
ESD_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082a4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  08008430  08008430  00018430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b48  08008b48  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08008b48  08008b48  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b48  08008b48  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b48  08008b48  00018b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b4c  08008b4c  00018b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08008b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          00006934  200000a8  200000a8  000200a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200069dc  200069dc  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb4c  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002424  00000000  00000000  0002cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0002f048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000980  00000000  00000000  0002fb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000231b9  00000000  00000000  00030490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109a0  00000000  00000000  00053649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4f06  00000000  00000000  00063fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00128eef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ebc  00000000  00000000  00128f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008414 	.word	0x08008414

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	08008414 	.word	0x08008414

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <event_analysis>:
uint16_t lane_change = 0;
uint16_t irregular_accel = 0;
uint16_t rash_driving = 0;

void event_analysis(int16_t xbuffer[], int16_t ybuffer[], int16_t zbuffer[])
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
	buf_analysis(xbuffer, 0);
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	68f8      	ldr	r0, [r7, #12]
 8000b60:	f000 f8c0 	bl	8000ce4 <buf_analysis>
	buf_analysis(ybuffer, 1);
 8000b64:	2101      	movs	r1, #1
 8000b66:	68b8      	ldr	r0, [r7, #8]
 8000b68:	f000 f8bc 	bl	8000ce4 <buf_analysis>
	buf_analysis(zbuffer, 2);
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f000 f8b8 	bl	8000ce4 <buf_analysis>
	//int data_to_write = 45;
	goToAscii(buffer_average[0], char_buf_avg0);
 8000b74:	4b4b      	ldr	r3, [pc, #300]	; (8000ca4 <event_analysis+0x154>)
 8000b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b7a:	494b      	ldr	r1, [pc, #300]	; (8000ca8 <event_analysis+0x158>)
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f919 	bl	8000db4 <goToAscii>
	goToAscii(buffer_average[1], char_buf_avg1);
 8000b82:	4b48      	ldr	r3, [pc, #288]	; (8000ca4 <event_analysis+0x154>)
 8000b84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b88:	4948      	ldr	r1, [pc, #288]	; (8000cac <event_analysis+0x15c>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f912 	bl	8000db4 <goToAscii>
	goToAscii(buffer_average[2], char_buf_avg2);
 8000b90:	4b44      	ldr	r3, [pc, #272]	; (8000ca4 <event_analysis+0x154>)
 8000b92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b96:	4946      	ldr	r1, [pc, #280]	; (8000cb0 <event_analysis+0x160>)
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f90b 	bl	8000db4 <goToAscii>
	f_mount(&fs1, "", 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4944      	ldr	r1, [pc, #272]	; (8000cb4 <event_analysis+0x164>)
 8000ba2:	4845      	ldr	r0, [pc, #276]	; (8000cb8 <event_analysis+0x168>)
 8000ba4:	f005 fc30 	bl	8006408 <f_mount>
	f_open(&fil1, "Blackbox_Data_Average.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8000ba8:	2213      	movs	r2, #19
 8000baa:	4944      	ldr	r1, [pc, #272]	; (8000cbc <event_analysis+0x16c>)
 8000bac:	4844      	ldr	r0, [pc, #272]	; (8000cc0 <event_analysis+0x170>)
 8000bae:	f005 fc71 	bl	8006494 <f_open>
	f_lseek(&fil1, f_size(&fil1));
 8000bb2:	4b43      	ldr	r3, [pc, #268]	; (8000cc0 <event_analysis+0x170>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4841      	ldr	r0, [pc, #260]	; (8000cc0 <event_analysis+0x170>)
 8000bba:	f006 f873 	bl	8006ca4 <f_lseek>
	f_puts("The average value over the past 5 seconds for x axis: ", &fil1);
 8000bbe:	4940      	ldr	r1, [pc, #256]	; (8000cc0 <event_analysis+0x170>)
 8000bc0:	4840      	ldr	r0, [pc, #256]	; (8000cc4 <event_analysis+0x174>)
 8000bc2:	f006 fb0a 	bl	80071da <f_puts>
	f_write(&fil1, char_buf_avg0, sizeof(char_buf_avg0), &bw1);
 8000bc6:	4b40      	ldr	r3, [pc, #256]	; (8000cc8 <event_analysis+0x178>)
 8000bc8:	2214      	movs	r2, #20
 8000bca:	4937      	ldr	r1, [pc, #220]	; (8000ca8 <event_analysis+0x158>)
 8000bcc:	483c      	ldr	r0, [pc, #240]	; (8000cc0 <event_analysis+0x170>)
 8000bce:	f005 fe2d 	bl	800682c <f_write>
	f_puts("\n", &fil1);
 8000bd2:	493b      	ldr	r1, [pc, #236]	; (8000cc0 <event_analysis+0x170>)
 8000bd4:	483d      	ldr	r0, [pc, #244]	; (8000ccc <event_analysis+0x17c>)
 8000bd6:	f006 fb00 	bl	80071da <f_puts>
	f_puts("The average value over the past 5 seconds for y axis: ", &fil1);
 8000bda:	4939      	ldr	r1, [pc, #228]	; (8000cc0 <event_analysis+0x170>)
 8000bdc:	483c      	ldr	r0, [pc, #240]	; (8000cd0 <event_analysis+0x180>)
 8000bde:	f006 fafc 	bl	80071da <f_puts>
	f_write(&fil1, char_buf_avg1, sizeof(char_buf_avg1), &bw1);
 8000be2:	4b39      	ldr	r3, [pc, #228]	; (8000cc8 <event_analysis+0x178>)
 8000be4:	2214      	movs	r2, #20
 8000be6:	4931      	ldr	r1, [pc, #196]	; (8000cac <event_analysis+0x15c>)
 8000be8:	4835      	ldr	r0, [pc, #212]	; (8000cc0 <event_analysis+0x170>)
 8000bea:	f005 fe1f 	bl	800682c <f_write>
	f_puts("\n", &fil1);
 8000bee:	4934      	ldr	r1, [pc, #208]	; (8000cc0 <event_analysis+0x170>)
 8000bf0:	4836      	ldr	r0, [pc, #216]	; (8000ccc <event_analysis+0x17c>)
 8000bf2:	f006 faf2 	bl	80071da <f_puts>
	f_puts("The average value over the past 5 seconds for z axis: ", &fil1);
 8000bf6:	4932      	ldr	r1, [pc, #200]	; (8000cc0 <event_analysis+0x170>)
 8000bf8:	4836      	ldr	r0, [pc, #216]	; (8000cd4 <event_analysis+0x184>)
 8000bfa:	f006 faee 	bl	80071da <f_puts>
	f_write(&fil1, char_buf_avg2, sizeof(char_buf_avg2), &bw1);
 8000bfe:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <event_analysis+0x178>)
 8000c00:	2214      	movs	r2, #20
 8000c02:	492b      	ldr	r1, [pc, #172]	; (8000cb0 <event_analysis+0x160>)
 8000c04:	482e      	ldr	r0, [pc, #184]	; (8000cc0 <event_analysis+0x170>)
 8000c06:	f005 fe11 	bl	800682c <f_write>
	f_puts("\n", &fil1);
 8000c0a:	492d      	ldr	r1, [pc, #180]	; (8000cc0 <event_analysis+0x170>)
 8000c0c:	482f      	ldr	r0, [pc, #188]	; (8000ccc <event_analysis+0x17c>)
 8000c0e:	f006 fae4 	bl	80071da <f_puts>
	f_close(&fil1);
 8000c12:	482b      	ldr	r0, [pc, #172]	; (8000cc0 <event_analysis+0x170>)
 8000c14:	f006 f81c 	bl	8006c50 <f_close>


	if (buffer_average[0] > X_HIGH   || buffer_average[0] < X_LOW)
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <event_analysis+0x154>)
 8000c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c1e:	f113 0f13 	cmn.w	r3, #19
 8000c22:	da05      	bge.n	8000c30 <event_analysis+0xe0>
 8000c24:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <event_analysis+0x154>)
 8000c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c2a:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8000c2e:	da05      	bge.n	8000c3c <event_analysis+0xec>
	 {
		lane_change++;
 8000c30:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <event_analysis+0x188>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <event_analysis+0x188>)
 8000c3a:	801a      	strh	r2, [r3, #0]
	 }
	if (buffer_average[1] > Y_HIGH || buffer_average[1] < Y_LOW)
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <event_analysis+0x154>)
 8000c3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c42:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8000c46:	da05      	bge.n	8000c54 <event_analysis+0x104>
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <event_analysis+0x154>)
 8000c4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c4e:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
 8000c52:	da05      	bge.n	8000c60 <event_analysis+0x110>
	{
		irregular_accel++;
 8000c54:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <event_analysis+0x18c>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <event_analysis+0x18c>)
 8000c5e:	801a      	strh	r2, [r3, #0]
	}

	if((buffer_average[0] > X_HIGH  || buffer_average[0] < X_LOW) &&
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <event_analysis+0x154>)
 8000c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c66:	f113 0f13 	cmn.w	r3, #19
 8000c6a:	da05      	bge.n	8000c78 <event_analysis+0x128>
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <event_analysis+0x154>)
 8000c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c72:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8000c76:	da11      	bge.n	8000c9c <event_analysis+0x14c>
		(buffer_average[1] > Y_HIGH || buffer_average[1] < Y_LOW))
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <event_analysis+0x154>)
 8000c7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	if((buffer_average[0] > X_HIGH  || buffer_average[0] < X_LOW) &&
 8000c7e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8000c82:	da05      	bge.n	8000c90 <event_analysis+0x140>
		(buffer_average[1] > Y_HIGH || buffer_average[1] < Y_LOW))
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <event_analysis+0x154>)
 8000c86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c8a:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
 8000c8e:	da05      	bge.n	8000c9c <event_analysis+0x14c>
	{
		rash_driving++;
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <event_analysis+0x190>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	3301      	adds	r3, #1
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <event_analysis+0x190>)
 8000c9a:	801a      	strh	r2, [r3, #0]
	}

}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000217c 	.word	0x2000217c
 8000ca8:	20002140 	.word	0x20002140
 8000cac:	20002154 	.word	0x20002154
 8000cb0:	20002168 	.word	0x20002168
 8000cb4:	08008430 	.word	0x08008430
 8000cb8:	200000c4 	.word	0x200000c4
 8000cbc:	08008434 	.word	0x08008434
 8000cc0:	200010fc 	.word	0x200010fc
 8000cc4:	08008450 	.word	0x08008450
 8000cc8:	2000212c 	.word	0x2000212c
 8000ccc:	08008488 	.word	0x08008488
 8000cd0:	0800848c 	.word	0x0800848c
 8000cd4:	080084c4 	.word	0x080084c4
 8000cd8:	2000218a 	.word	0x2000218a
 8000cdc:	2000218c 	.word	0x2000218c
 8000ce0:	2000218e 	.word	0x2000218e

08000ce4 <buf_analysis>:


void buf_analysis(int16_t input_buffer[], int index)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]

	int32_t sum = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
	int16_t minimum_final = input_buffer[0];
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	827b      	strh	r3, [r7, #18]
	int16_t maximum_final = input_buffer[0];
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	823b      	strh	r3, [r7, #16]
	for(int i = 0; i < DATA_VALS; i++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	e024      	b.n	8000d4e <buf_analysis+0x6a>
	{
		minimum_final = (minimum_final < input_buffer[i]) ? minimum_final : input_buffer[i];
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d10:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000d14:	4293      	cmp	r3, r2
 8000d16:	bfa8      	it	ge
 8000d18:	4613      	movge	r3, r2
 8000d1a:	827b      	strh	r3, [r7, #18]
		maximum_final = (maximum_final > input_buffer[i]) ? maximum_final : input_buffer[i];
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4413      	add	r3, r2
 8000d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d28:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	bfb8      	it	lt
 8000d30:	4613      	movlt	r3, r2
 8000d32:	823b      	strh	r3, [r7, #16]
		sum += input_buffer[i];
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d40:	461a      	mov	r2, r3
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	4413      	add	r3, r2
 8000d46:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < DATA_VALS; i++)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2b31      	cmp	r3, #49	; 0x31
 8000d52:	ddd7      	ble.n	8000d04 <buf_analysis+0x20>
	}

	buffer_min[index] = minimum_final;
 8000d54:	4912      	ldr	r1, [pc, #72]	; (8000da0 <buf_analysis+0xbc>)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	8a7a      	ldrh	r2, [r7, #18]
 8000d5a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	buffer_max[index] = maximum_final;
 8000d5e:	4911      	ldr	r1, [pc, #68]	; (8000da4 <buf_analysis+0xc0>)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	8a3a      	ldrh	r2, [r7, #16]
 8000d64:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	buffer_range[index] = maximum_final - minimum_final;
 8000d68:	8a3a      	ldrh	r2, [r7, #16]
 8000d6a:	8a7b      	ldrh	r3, [r7, #18]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	b219      	sxth	r1, r3
 8000d72:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <buf_analysis+0xc4>)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	buffer_average[index] = sum/DATA_VALS;
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <buf_analysis+0xc8>)
 8000d7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d82:	1112      	asrs	r2, r2, #4
 8000d84:	17db      	asrs	r3, r3, #31
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	b219      	sxth	r1, r3
 8000d8a:	4a09      	ldr	r2, [pc, #36]	; (8000db0 <buf_analysis+0xcc>)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]


}
 8000d92:	bf00      	nop
 8000d94:	371c      	adds	r7, #28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20002130 	.word	0x20002130
 8000da4:	20002138 	.word	0x20002138
 8000da8:	20002184 	.word	0x20002184
 8000dac:	51eb851f 	.word	0x51eb851f
 8000db0:	2000217c 	.word	0x2000217c

08000db4 <goToAscii>:



void goToAscii(int16_t number, char* resBuf)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	80fb      	strh	r3, [r7, #6]
	int i = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
	int qNegative = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]

	    // Handle negative numbers
	if (number < 0) {
 8000dc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	da05      	bge.n	8000ddc <goToAscii+0x28>
		qNegative = 1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
		number = -number;
 8000dd4:	88fb      	ldrh	r3, [r7, #6]
 8000dd6:	425b      	negs	r3, r3
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	80fb      	strh	r3, [r7, #6]
	}

	do {
		int inDigit = number % 10;
 8000ddc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000de0:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <goToAscii+0xe8>)
 8000de2:	fb83 1302 	smull	r1, r3, r3, r2
 8000de6:	1099      	asrs	r1, r3, #2
 8000de8:	17d3      	asrs	r3, r2, #31
 8000dea:	1ac9      	subs	r1, r1, r3
 8000dec:	460b      	mov	r3, r1
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	b21b      	sxth	r3, r3
 8000df8:	60fb      	str	r3, [r7, #12]
		resBuf[i++] = inDigit + '0';
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	1c59      	adds	r1, r3, #1
 8000e02:	61f9      	str	r1, [r7, #28]
 8000e04:	4619      	mov	r1, r3
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	440b      	add	r3, r1
 8000e0a:	3230      	adds	r2, #48	; 0x30
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	701a      	strb	r2, [r3, #0]
		number =  number / 10;
 8000e10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e14:	4a21      	ldr	r2, [pc, #132]	; (8000e9c <goToAscii+0xe8>)
 8000e16:	fb82 1203 	smull	r1, r2, r2, r3
 8000e1a:	1092      	asrs	r2, r2, #2
 8000e1c:	17db      	asrs	r3, r3, #31
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	80fb      	strh	r3, [r7, #6]
	} while (number > 0);
 8000e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	dcd8      	bgt.n	8000ddc <goToAscii+0x28>

	if (qNegative == 1) {
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d107      	bne.n	8000e40 <goToAscii+0x8c>
		resBuf[i++] = '-';
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	61fa      	str	r2, [r7, #28]
 8000e36:	461a      	mov	r2, r3
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	222d      	movs	r2, #45	; 0x2d
 8000e3e:	701a      	strb	r2, [r3, #0]
	}

	 resBuf[i] = '\0';
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	4413      	add	r3, r2
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]

	 int start = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
	 int end = i - 1;
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	613b      	str	r3, [r7, #16]
	    while (start < end) {
 8000e54:	e017      	b.n	8000e86 <goToAscii+0xd2>
	        char temp = resBuf[start];
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	72fb      	strb	r3, [r7, #11]
	        resBuf[start] = resBuf[end];
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	441a      	add	r2, r3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	6839      	ldr	r1, [r7, #0]
 8000e6a:	440b      	add	r3, r1
 8000e6c:	7812      	ldrb	r2, [r2, #0]
 8000e6e:	701a      	strb	r2, [r3, #0]
	        resBuf[end] = temp;
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	4413      	add	r3, r2
 8000e76:	7afa      	ldrb	r2, [r7, #11]
 8000e78:	701a      	strb	r2, [r3, #0]
	        start++;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
	        end--;
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	613b      	str	r3, [r7, #16]
	    while (start < end) {
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	dbe3      	blt.n	8000e56 <goToAscii+0xa2>
	    }
}
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	3724      	adds	r7, #36	; 0x24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	66666667 	.word	0x66666667

08000ea0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eac:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <SELECT+0x30>)
 8000eae:	f002 fc13 	bl	80036d8 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	for(int i=0;i<1;i++);
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	e002      	b.n	8000ebe <SELECT+0x1e>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	ddf9      	ble.n	8000eb8 <SELECT+0x18>
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40020400 	.word	0x40020400

08000ed4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee0:	4808      	ldr	r0, [pc, #32]	; (8000f04 <DESELECT+0x30>)
 8000ee2:	f002 fbf9 	bl	80036d8 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	for(int i=0;i<1;i++);
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	e002      	b.n	8000ef2 <DESELECT+0x1e>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	ddf9      	ble.n	8000eec <DESELECT+0x18>
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40020400 	.word	0x40020400

08000f08 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f12:	bf00      	nop
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <SPI_TxByte+0x30>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d1f8      	bne.n	8000f14 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f22:	1df9      	adds	r1, r7, #7
 8000f24:	2364      	movs	r3, #100	; 0x64
 8000f26:	2201      	movs	r2, #1
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <SPI_TxByte+0x30>)
 8000f2a:	f002 fc77 	bl	800381c <HAL_SPI_Transmit>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200022e0 	.word	0x200022e0

08000f3c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f48:	bf00      	nop
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <SPI_TxBuffer+0x30>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d1f8      	bne.n	8000f4a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f58:	887a      	ldrh	r2, [r7, #2]
 8000f5a:	2364      	movs	r3, #100	; 0x64
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4803      	ldr	r0, [pc, #12]	; (8000f6c <SPI_TxBuffer+0x30>)
 8000f60:	f002 fc5c 	bl	800381c <HAL_SPI_Transmit>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200022e0 	.word	0x200022e0

08000f70 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000f76:	23ff      	movs	r3, #255	; 0xff
 8000f78:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f7a:	bf00      	nop
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <SPI_RxByte+0x34>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d1f8      	bne.n	8000f7c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000f8a:	1dba      	adds	r2, r7, #6
 8000f8c:	1df9      	adds	r1, r7, #7
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2301      	movs	r3, #1
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <SPI_RxByte+0x34>)
 8000f96:	f002 fd7d 	bl	8003a94 <HAL_SPI_TransmitReceive>

	return data;
 8000f9a:	79bb      	ldrb	r3, [r7, #6]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200022e0 	.word	0x200022e0

08000fa8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000fb0:	f7ff ffde 	bl	8000f70 <SPI_RxByte>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	701a      	strb	r2, [r3, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <SD_ReadyWait+0x30>)
 8000fcc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fd0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000fd2:	f7ff ffcd 	bl	8000f70 <SPI_RxByte>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2bff      	cmp	r3, #255	; 0xff
 8000fde:	d004      	beq.n	8000fea <SD_ReadyWait+0x26>
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <SD_ReadyWait+0x30>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f3      	bne.n	8000fd2 <SD_ReadyWait+0xe>

	return res;
 8000fea:	79fb      	ldrb	r3, [r7, #7]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20006418 	.word	0x20006418

08000ff8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000ffe:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001002:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001004:	f7ff ff66 	bl	8000ed4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	e005      	b.n	800101a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800100e:	20ff      	movs	r0, #255	; 0xff
 8001010:	f7ff ff7a 	bl	8000f08 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	3301      	adds	r3, #1
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	2b09      	cmp	r3, #9
 800101e:	ddf6      	ble.n	800100e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001020:	f7ff ff3e 	bl	8000ea0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001024:	2340      	movs	r3, #64	; 0x40
 8001026:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001038:	2395      	movs	r3, #149	; 0x95
 800103a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800103c:	463b      	mov	r3, r7
 800103e:	2106      	movs	r1, #6
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff7b 	bl	8000f3c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001046:	e002      	b.n	800104e <SD_PowerOn+0x56>
	{
		cnt--;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3b01      	subs	r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800104e:	f7ff ff8f 	bl	8000f70 <SPI_RxByte>
 8001052:	4603      	mov	r3, r0
 8001054:	2b01      	cmp	r3, #1
 8001056:	d002      	beq.n	800105e <SD_PowerOn+0x66>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f4      	bne.n	8001048 <SD_PowerOn+0x50>
	}

	DESELECT();
 800105e:	f7ff ff39 	bl	8000ed4 <DESELECT>
	SPI_TxByte(0XFF);
 8001062:	20ff      	movs	r0, #255	; 0xff
 8001064:	f7ff ff50 	bl	8000f08 <SPI_TxByte>

	PowerFlag = 1;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <SD_PowerOn+0x80>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20002191 	.word	0x20002191

0800107c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <SD_PowerOff+0x14>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20002191 	.word	0x20002191

08001094 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <SD_CheckPower+0x14>)
 800109a:	781b      	ldrb	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20002191 	.word	0x20002191

080010ac <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <SD_RxDataBlock+0x5c>)
 80010b8:	22c8      	movs	r2, #200	; 0xc8
 80010ba:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80010bc:	f7ff ff58 	bl	8000f70 <SPI_RxByte>
 80010c0:	4603      	mov	r3, r0
 80010c2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2bff      	cmp	r3, #255	; 0xff
 80010c8:	d104      	bne.n	80010d4 <SD_RxDataBlock+0x28>
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <SD_RxDataBlock+0x5c>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f3      	bne.n	80010bc <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	2bfe      	cmp	r3, #254	; 0xfe
 80010d8:	d001      	beq.n	80010de <SD_RxDataBlock+0x32>
 80010da:	2300      	movs	r3, #0
 80010dc:	e00f      	b.n	80010fe <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5f 	bl	8000fa8 <SPI_RxBytePtr>
	} while(len--);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	1e5a      	subs	r2, r3, #1
 80010ee:	603a      	str	r2, [r7, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f4      	bne.n	80010de <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80010f4:	f7ff ff3c 	bl	8000f70 <SPI_RxByte>
	SPI_RxByte();
 80010f8:	f7ff ff3a 	bl	8000f70 <SPI_RxByte>

	return TRUE;
 80010fc:	2301      	movs	r3, #1
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20006416 	.word	0x20006416

0800110c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800111c:	f7ff ff52 	bl	8000fc4 <SD_ReadyWait>
 8001120:	4603      	mov	r3, r0
 8001122:	2bff      	cmp	r3, #255	; 0xff
 8001124:	d001      	beq.n	800112a <SD_TxDataBlock+0x1e>
 8001126:	2300      	movs	r3, #0
 8001128:	e02f      	b.n	800118a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800112a:	78fb      	ldrb	r3, [r7, #3]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff feeb 	bl	8000f08 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	2bfd      	cmp	r3, #253	; 0xfd
 8001136:	d020      	beq.n	800117a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff fefd 	bl	8000f3c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001142:	f7ff ff15 	bl	8000f70 <SPI_RxByte>
		SPI_RxByte();
 8001146:	f7ff ff13 	bl	8000f70 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800114a:	e00b      	b.n	8001164 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800114c:	f7ff ff10 	bl	8000f70 <SPI_RxByte>
 8001150:	4603      	mov	r3, r0
 8001152:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	2b05      	cmp	r3, #5
 800115c:	d006      	beq.n	800116c <SD_TxDataBlock+0x60>
			i++;
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	3301      	adds	r3, #1
 8001162:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	2b40      	cmp	r3, #64	; 0x40
 8001168:	d9f0      	bls.n	800114c <SD_TxDataBlock+0x40>
 800116a:	e000      	b.n	800116e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800116c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800116e:	bf00      	nop
 8001170:	f7ff fefe 	bl	8000f70 <SPI_RxByte>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0fa      	beq.n	8001170 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	f003 031f 	and.w	r3, r3, #31
 8001180:	2b05      	cmp	r3, #5
 8001182:	d101      	bne.n	8001188 <SD_TxDataBlock+0x7c>
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	6039      	str	r1, [r7, #0]
 800119c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800119e:	f7ff ff11 	bl	8000fc4 <SD_ReadyWait>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2bff      	cmp	r3, #255	; 0xff
 80011a6:	d001      	beq.n	80011ac <SD_SendCmd+0x1a>
 80011a8:	23ff      	movs	r3, #255	; 0xff
 80011aa:	e042      	b.n	8001232 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff feaa 	bl	8000f08 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	0e1b      	lsrs	r3, r3, #24
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fea4 	bl	8000f08 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	0c1b      	lsrs	r3, r3, #16
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fe9e 	bl	8000f08 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fe98 	bl	8000f08 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fe93 	bl	8000f08 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2b40      	cmp	r3, #64	; 0x40
 80011e6:	d102      	bne.n	80011ee <SD_SendCmd+0x5c>
 80011e8:	2395      	movs	r3, #149	; 0x95
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e007      	b.n	80011fe <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b48      	cmp	r3, #72	; 0x48
 80011f2:	d102      	bne.n	80011fa <SD_SendCmd+0x68>
 80011f4:	2387      	movs	r3, #135	; 0x87
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e001      	b.n	80011fe <SD_SendCmd+0x6c>
	else crc = 1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fe81 	bl	8000f08 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b4c      	cmp	r3, #76	; 0x4c
 800120a:	d101      	bne.n	8001210 <SD_SendCmd+0x7e>
 800120c:	f7ff feb0 	bl	8000f70 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001210:	230a      	movs	r3, #10
 8001212:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001214:	f7ff feac 	bl	8000f70 <SPI_RxByte>
 8001218:	4603      	mov	r3, r0
 800121a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800121c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001220:	2b00      	cmp	r3, #0
 8001222:	da05      	bge.n	8001230 <SD_SendCmd+0x9e>
 8001224:	7bbb      	ldrb	r3, [r7, #14]
 8001226:	3b01      	subs	r3, #1
 8001228:	73bb      	strb	r3, [r7, #14]
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f1      	bne.n	8001214 <SD_SendCmd+0x82>

	return res;
 8001230:	7b7b      	ldrb	r3, [r7, #13]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SD_disk_initialize+0x14>
 800124c:	2301      	movs	r3, #1
 800124e:	e0d6      	b.n	80013fe <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001250:	4b6d      	ldr	r3, [pc, #436]	; (8001408 <SD_disk_initialize+0x1cc>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <SD_disk_initialize+0x2a>
 800125e:	4b6a      	ldr	r3, [pc, #424]	; (8001408 <SD_disk_initialize+0x1cc>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	e0cb      	b.n	80013fe <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8001266:	f7ff fec7 	bl	8000ff8 <SD_PowerOn>

	/* slave select */
	SELECT();
 800126a:	f7ff fe19 	bl	8000ea0 <SELECT>

	/* check disk type */
	type = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001272:	2100      	movs	r1, #0
 8001274:	2040      	movs	r0, #64	; 0x40
 8001276:	f7ff ff8c 	bl	8001192 <SD_SendCmd>
 800127a:	4603      	mov	r3, r0
 800127c:	2b01      	cmp	r3, #1
 800127e:	f040 80a6 	bne.w	80013ce <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001282:	4b62      	ldr	r3, [pc, #392]	; (800140c <SD_disk_initialize+0x1d0>)
 8001284:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001288:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800128a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800128e:	2048      	movs	r0, #72	; 0x48
 8001290:	f7ff ff7f 	bl	8001192 <SD_SendCmd>
 8001294:	4603      	mov	r3, r0
 8001296:	2b01      	cmp	r3, #1
 8001298:	d158      	bne.n	800134c <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800129a:	2300      	movs	r3, #0
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	e00c      	b.n	80012ba <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80012a0:	7bfc      	ldrb	r4, [r7, #15]
 80012a2:	f7ff fe65 	bl	8000f70 <SPI_RxByte>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	f104 0310 	add.w	r3, r4, #16
 80012ae:	443b      	add	r3, r7
 80012b0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	3301      	adds	r3, #1
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d9ef      	bls.n	80012a0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80012c0:	7abb      	ldrb	r3, [r7, #10]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	f040 8083 	bne.w	80013ce <SD_disk_initialize+0x192>
 80012c8:	7afb      	ldrb	r3, [r7, #11]
 80012ca:	2baa      	cmp	r3, #170	; 0xaa
 80012cc:	d17f      	bne.n	80013ce <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012ce:	2100      	movs	r1, #0
 80012d0:	2077      	movs	r0, #119	; 0x77
 80012d2:	f7ff ff5e 	bl	8001192 <SD_SendCmd>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d807      	bhi.n	80012ec <SD_disk_initialize+0xb0>
 80012dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012e0:	2069      	movs	r0, #105	; 0x69
 80012e2:	f7ff ff56 	bl	8001192 <SD_SendCmd>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d005      	beq.n	80012f8 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80012ec:	4b47      	ldr	r3, [pc, #284]	; (800140c <SD_disk_initialize+0x1d0>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1eb      	bne.n	80012ce <SD_disk_initialize+0x92>
 80012f6:	e000      	b.n	80012fa <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012f8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80012fa:	4b44      	ldr	r3, [pc, #272]	; (800140c <SD_disk_initialize+0x1d0>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d064      	beq.n	80013ce <SD_disk_initialize+0x192>
 8001304:	2100      	movs	r1, #0
 8001306:	207a      	movs	r0, #122	; 0x7a
 8001308:	f7ff ff43 	bl	8001192 <SD_SendCmd>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d15d      	bne.n	80013ce <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]
 8001316:	e00c      	b.n	8001332 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001318:	7bfc      	ldrb	r4, [r7, #15]
 800131a:	f7ff fe29 	bl	8000f70 <SPI_RxByte>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	f104 0310 	add.w	r3, r4, #16
 8001326:	443b      	add	r3, r7
 8001328:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	3301      	adds	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b03      	cmp	r3, #3
 8001336:	d9ef      	bls.n	8001318 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001338:	7a3b      	ldrb	r3, [r7, #8]
 800133a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SD_disk_initialize+0x10a>
 8001342:	230c      	movs	r3, #12
 8001344:	e000      	b.n	8001348 <SD_disk_initialize+0x10c>
 8001346:	2304      	movs	r3, #4
 8001348:	73bb      	strb	r3, [r7, #14]
 800134a:	e040      	b.n	80013ce <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800134c:	2100      	movs	r1, #0
 800134e:	2077      	movs	r0, #119	; 0x77
 8001350:	f7ff ff1f 	bl	8001192 <SD_SendCmd>
 8001354:	4603      	mov	r3, r0
 8001356:	2b01      	cmp	r3, #1
 8001358:	d808      	bhi.n	800136c <SD_disk_initialize+0x130>
 800135a:	2100      	movs	r1, #0
 800135c:	2069      	movs	r0, #105	; 0x69
 800135e:	f7ff ff18 	bl	8001192 <SD_SendCmd>
 8001362:	4603      	mov	r3, r0
 8001364:	2b01      	cmp	r3, #1
 8001366:	d801      	bhi.n	800136c <SD_disk_initialize+0x130>
 8001368:	2302      	movs	r3, #2
 800136a:	e000      	b.n	800136e <SD_disk_initialize+0x132>
 800136c:	2301      	movs	r3, #1
 800136e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001370:	7bbb      	ldrb	r3, [r7, #14]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d10e      	bne.n	8001394 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001376:	2100      	movs	r1, #0
 8001378:	2077      	movs	r0, #119	; 0x77
 800137a:	f7ff ff0a 	bl	8001192 <SD_SendCmd>
 800137e:	4603      	mov	r3, r0
 8001380:	2b01      	cmp	r3, #1
 8001382:	d80e      	bhi.n	80013a2 <SD_disk_initialize+0x166>
 8001384:	2100      	movs	r1, #0
 8001386:	2069      	movs	r0, #105	; 0x69
 8001388:	f7ff ff03 	bl	8001192 <SD_SendCmd>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d107      	bne.n	80013a2 <SD_disk_initialize+0x166>
 8001392:	e00d      	b.n	80013b0 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001394:	2100      	movs	r1, #0
 8001396:	2041      	movs	r0, #65	; 0x41
 8001398:	f7ff fefb 	bl	8001192 <SD_SendCmd>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <SD_disk_initialize+0x1d0>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1e1      	bne.n	8001370 <SD_disk_initialize+0x134>
 80013ac:	e000      	b.n	80013b0 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013ae:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <SD_disk_initialize+0x1d0>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d007      	beq.n	80013ca <SD_disk_initialize+0x18e>
 80013ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013be:	2050      	movs	r0, #80	; 0x50
 80013c0:	f7ff fee7 	bl	8001192 <SD_SendCmd>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SD_disk_initialize+0x192>
 80013ca:	2300      	movs	r3, #0
 80013cc:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80013ce:	4a10      	ldr	r2, [pc, #64]	; (8001410 <SD_disk_initialize+0x1d4>)
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80013d4:	f7ff fd7e 	bl	8000ed4 <DESELECT>
	SPI_RxByte();
 80013d8:	f7ff fdca 	bl	8000f70 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80013dc:	7bbb      	ldrb	r3, [r7, #14]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d008      	beq.n	80013f4 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <SD_disk_initialize+0x1cc>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <SD_disk_initialize+0x1cc>)
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	e001      	b.n	80013f8 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80013f4:	f7ff fe42 	bl	800107c <SD_PowerOff>
	}

	return Stat;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <SD_disk_initialize+0x1cc>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	bd90      	pop	{r4, r7, pc}
 8001406:	bf00      	nop
 8001408:	20000000 	.word	0x20000000
 800140c:	20006416 	.word	0x20006416
 8001410:	20002190 	.word	0x20002190

08001414 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SD_disk_status+0x14>
 8001424:	2301      	movs	r3, #1
 8001426:	e002      	b.n	800142e <SD_disk_status+0x1a>
	return Stat;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <SD_disk_status+0x28>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000

08001440 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	4603      	mov	r3, r0
 800144e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <SD_disk_read+0x1c>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <SD_disk_read+0x20>
 800145c:	2304      	movs	r3, #4
 800145e:	e051      	b.n	8001504 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <SD_disk_read+0xcc>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SD_disk_read+0x32>
 800146e:	2303      	movs	r3, #3
 8001470:	e048      	b.n	8001504 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <SD_disk_read+0xd0>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d102      	bne.n	8001484 <SD_disk_read+0x44>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	025b      	lsls	r3, r3, #9
 8001482:	607b      	str	r3, [r7, #4]

	SELECT();
 8001484:	f7ff fd0c 	bl	8000ea0 <SELECT>

	if (count == 1)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d111      	bne.n	80014b2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	2051      	movs	r0, #81	; 0x51
 8001492:	f7ff fe7e 	bl	8001192 <SD_SendCmd>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d129      	bne.n	80014f0 <SD_disk_read+0xb0>
 800149c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a0:	68b8      	ldr	r0, [r7, #8]
 80014a2:	f7ff fe03 	bl	80010ac <SD_RxDataBlock>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d021      	beq.n	80014f0 <SD_disk_read+0xb0>
 80014ac:	2300      	movs	r3, #0
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	e01e      	b.n	80014f0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	2052      	movs	r0, #82	; 0x52
 80014b6:	f7ff fe6c 	bl	8001192 <SD_SendCmd>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d117      	bne.n	80014f0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80014c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f7ff fdf1 	bl	80010ac <SD_RxDataBlock>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00a      	beq.n	80014e6 <SD_disk_read+0xa6>
				buff += 512;
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014d6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	3b01      	subs	r3, #1
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1ed      	bne.n	80014c0 <SD_disk_read+0x80>
 80014e4:	e000      	b.n	80014e8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80014e6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80014e8:	2100      	movs	r1, #0
 80014ea:	204c      	movs	r0, #76	; 0x4c
 80014ec:	f7ff fe51 	bl	8001192 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80014f0:	f7ff fcf0 	bl	8000ed4 <DESELECT>
	SPI_RxByte();
 80014f4:	f7ff fd3c 	bl	8000f70 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	bf14      	ite	ne
 80014fe:	2301      	movne	r3, #1
 8001500:	2300      	moveq	r3, #0
 8001502:	b2db      	uxtb	r3, r3
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	20002190 	.word	0x20002190

08001514 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <SD_disk_write+0x1c>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <SD_disk_write+0x20>
 8001530:	2304      	movs	r3, #4
 8001532:	e06b      	b.n	800160c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001534:	4b37      	ldr	r3, [pc, #220]	; (8001614 <SD_disk_write+0x100>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SD_disk_write+0x32>
 8001542:	2303      	movs	r3, #3
 8001544:	e062      	b.n	800160c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <SD_disk_write+0x100>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SD_disk_write+0x44>
 8001554:	2302      	movs	r3, #2
 8001556:	e059      	b.n	800160c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001558:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <SD_disk_write+0x104>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <SD_disk_write+0x56>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	607b      	str	r3, [r7, #4]

	SELECT();
 800156a:	f7ff fc99 	bl	8000ea0 <SELECT>

	if (count == 1)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d110      	bne.n	8001596 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	2058      	movs	r0, #88	; 0x58
 8001578:	f7ff fe0b 	bl	8001192 <SD_SendCmd>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d13a      	bne.n	80015f8 <SD_disk_write+0xe4>
 8001582:	21fe      	movs	r1, #254	; 0xfe
 8001584:	68b8      	ldr	r0, [r7, #8]
 8001586:	f7ff fdc1 	bl	800110c <SD_TxDataBlock>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d033      	beq.n	80015f8 <SD_disk_write+0xe4>
			count = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	e030      	b.n	80015f8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <SD_disk_write+0x104>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80015a2:	2100      	movs	r1, #0
 80015a4:	2077      	movs	r0, #119	; 0x77
 80015a6:	f7ff fdf4 	bl	8001192 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80015aa:	6839      	ldr	r1, [r7, #0]
 80015ac:	2057      	movs	r0, #87	; 0x57
 80015ae:	f7ff fdf0 	bl	8001192 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	2059      	movs	r0, #89	; 0x59
 80015b6:	f7ff fdec 	bl	8001192 <SD_SendCmd>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d11b      	bne.n	80015f8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015c0:	21fc      	movs	r1, #252	; 0xfc
 80015c2:	68b8      	ldr	r0, [r7, #8]
 80015c4:	f7ff fda2 	bl	800110c <SD_TxDataBlock>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00a      	beq.n	80015e4 <SD_disk_write+0xd0>
				buff += 512;
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015d4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	3b01      	subs	r3, #1
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1ee      	bne.n	80015c0 <SD_disk_write+0xac>
 80015e2:	e000      	b.n	80015e6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015e4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80015e6:	21fd      	movs	r1, #253	; 0xfd
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff fd8f 	bl	800110c <SD_TxDataBlock>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <SD_disk_write+0xe4>
			{
				count = 1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80015f8:	f7ff fc6c 	bl	8000ed4 <DESELECT>
	SPI_RxByte();
 80015fc:	f7ff fcb8 	bl	8000f70 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000000 	.word	0x20000000
 8001618:	20002190 	.word	0x20002190

0800161c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b08b      	sub	sp, #44	; 0x2c
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	603a      	str	r2, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
 8001628:	460b      	mov	r3, r1
 800162a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SD_disk_ioctl+0x1e>
 8001636:	2304      	movs	r3, #4
 8001638:	e115      	b.n	8001866 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001640:	79bb      	ldrb	r3, [r7, #6]
 8001642:	2b05      	cmp	r3, #5
 8001644:	d124      	bne.n	8001690 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d012      	beq.n	8001674 <SD_disk_ioctl+0x58>
 800164e:	2b02      	cmp	r3, #2
 8001650:	dc1a      	bgt.n	8001688 <SD_disk_ioctl+0x6c>
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <SD_disk_ioctl+0x40>
 8001656:	2b01      	cmp	r3, #1
 8001658:	d006      	beq.n	8001668 <SD_disk_ioctl+0x4c>
 800165a:	e015      	b.n	8001688 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800165c:	f7ff fd0e 	bl	800107c <SD_PowerOff>
			res = RES_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001666:	e0fc      	b.n	8001862 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001668:	f7ff fcc6 	bl	8000ff8 <SD_PowerOn>
			res = RES_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001672:	e0f6      	b.n	8001862 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	1c5c      	adds	r4, r3, #1
 8001678:	f7ff fd0c 	bl	8001094 <SD_CheckPower>
 800167c:	4603      	mov	r3, r0
 800167e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001686:	e0ec      	b.n	8001862 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001688:	2304      	movs	r3, #4
 800168a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800168e:	e0e8      	b.n	8001862 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001690:	4b77      	ldr	r3, [pc, #476]	; (8001870 <SD_disk_ioctl+0x254>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SD_disk_ioctl+0x86>
 800169e:	2303      	movs	r3, #3
 80016a0:	e0e1      	b.n	8001866 <SD_disk_ioctl+0x24a>

		SELECT();
 80016a2:	f7ff fbfd 	bl	8000ea0 <SELECT>

		switch (ctrl)
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	2b0d      	cmp	r3, #13
 80016aa:	f200 80cb 	bhi.w	8001844 <SD_disk_ioctl+0x228>
 80016ae:	a201      	add	r2, pc, #4	; (adr r2, 80016b4 <SD_disk_ioctl+0x98>)
 80016b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b4:	080017af 	.word	0x080017af
 80016b8:	080016ed 	.word	0x080016ed
 80016bc:	0800179f 	.word	0x0800179f
 80016c0:	08001845 	.word	0x08001845
 80016c4:	08001845 	.word	0x08001845
 80016c8:	08001845 	.word	0x08001845
 80016cc:	08001845 	.word	0x08001845
 80016d0:	08001845 	.word	0x08001845
 80016d4:	08001845 	.word	0x08001845
 80016d8:	08001845 	.word	0x08001845
 80016dc:	08001845 	.word	0x08001845
 80016e0:	080017c1 	.word	0x080017c1
 80016e4:	080017e5 	.word	0x080017e5
 80016e8:	08001809 	.word	0x08001809
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80016ec:	2100      	movs	r1, #0
 80016ee:	2049      	movs	r0, #73	; 0x49
 80016f0:	f7ff fd4f 	bl	8001192 <SD_SendCmd>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f040 80a8 	bne.w	800184c <SD_disk_ioctl+0x230>
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	2110      	movs	r1, #16
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fcd2 	bl	80010ac <SD_RxDataBlock>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 809e 	beq.w	800184c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001710:	7b3b      	ldrb	r3, [r7, #12]
 8001712:	099b      	lsrs	r3, r3, #6
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b01      	cmp	r3, #1
 8001718:	d10e      	bne.n	8001738 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800171a:	7d7b      	ldrb	r3, [r7, #21]
 800171c:	b29a      	uxth	r2, r3
 800171e:	7d3b      	ldrb	r3, [r7, #20]
 8001720:	b29b      	uxth	r3, r3
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	b29b      	uxth	r3, r3
 8001726:	4413      	add	r3, r2
 8001728:	b29b      	uxth	r3, r3
 800172a:	3301      	adds	r3, #1
 800172c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800172e:	8bfb      	ldrh	r3, [r7, #30]
 8001730:	029a      	lsls	r2, r3, #10
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e02e      	b.n	8001796 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001738:	7c7b      	ldrb	r3, [r7, #17]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	b2da      	uxtb	r2, r3
 8001740:	7dbb      	ldrb	r3, [r7, #22]
 8001742:	09db      	lsrs	r3, r3, #7
 8001744:	b2db      	uxtb	r3, r3
 8001746:	4413      	add	r3, r2
 8001748:	b2da      	uxtb	r2, r3
 800174a:	7d7b      	ldrb	r3, [r7, #21]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f003 0306 	and.w	r3, r3, #6
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4413      	add	r3, r2
 8001758:	b2db      	uxtb	r3, r3
 800175a:	3302      	adds	r3, #2
 800175c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001760:	7d3b      	ldrb	r3, [r7, #20]
 8001762:	099b      	lsrs	r3, r3, #6
 8001764:	b2db      	uxtb	r3, r3
 8001766:	b29a      	uxth	r2, r3
 8001768:	7cfb      	ldrb	r3, [r7, #19]
 800176a:	b29b      	uxth	r3, r3
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	b29b      	uxth	r3, r3
 8001770:	4413      	add	r3, r2
 8001772:	b29a      	uxth	r2, r3
 8001774:	7cbb      	ldrb	r3, [r7, #18]
 8001776:	029b      	lsls	r3, r3, #10
 8001778:	b29b      	uxth	r3, r3
 800177a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800177e:	b29b      	uxth	r3, r3
 8001780:	4413      	add	r3, r2
 8001782:	b29b      	uxth	r3, r3
 8001784:	3301      	adds	r3, #1
 8001786:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001788:	8bfa      	ldrh	r2, [r7, #30]
 800178a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800178e:	3b09      	subs	r3, #9
 8001790:	409a      	lsls	r2, r3
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800179c:	e056      	b.n	800184c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017ac:	e055      	b.n	800185a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80017ae:	f7ff fc09 	bl	8000fc4 <SD_ReadyWait>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2bff      	cmp	r3, #255	; 0xff
 80017b6:	d14b      	bne.n	8001850 <SD_disk_ioctl+0x234>
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017be:	e047      	b.n	8001850 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017c0:	2100      	movs	r1, #0
 80017c2:	2049      	movs	r0, #73	; 0x49
 80017c4:	f7ff fce5 	bl	8001192 <SD_SendCmd>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d142      	bne.n	8001854 <SD_disk_ioctl+0x238>
 80017ce:	2110      	movs	r1, #16
 80017d0:	6a38      	ldr	r0, [r7, #32]
 80017d2:	f7ff fc6b 	bl	80010ac <SD_RxDataBlock>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d03b      	beq.n	8001854 <SD_disk_ioctl+0x238>
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017e2:	e037      	b.n	8001854 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017e4:	2100      	movs	r1, #0
 80017e6:	204a      	movs	r0, #74	; 0x4a
 80017e8:	f7ff fcd3 	bl	8001192 <SD_SendCmd>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d132      	bne.n	8001858 <SD_disk_ioctl+0x23c>
 80017f2:	2110      	movs	r1, #16
 80017f4:	6a38      	ldr	r0, [r7, #32]
 80017f6:	f7ff fc59 	bl	80010ac <SD_RxDataBlock>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d02b      	beq.n	8001858 <SD_disk_ioctl+0x23c>
 8001800:	2300      	movs	r3, #0
 8001802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001806:	e027      	b.n	8001858 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001808:	2100      	movs	r1, #0
 800180a:	207a      	movs	r0, #122	; 0x7a
 800180c:	f7ff fcc1 	bl	8001192 <SD_SendCmd>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d116      	bne.n	8001844 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800181c:	e00b      	b.n	8001836 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800181e:	6a3c      	ldr	r4, [r7, #32]
 8001820:	1c63      	adds	r3, r4, #1
 8001822:	623b      	str	r3, [r7, #32]
 8001824:	f7ff fba4 	bl	8000f70 <SPI_RxByte>
 8001828:	4603      	mov	r3, r0
 800182a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800182c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001830:	3301      	adds	r3, #1
 8001832:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001836:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800183a:	2b03      	cmp	r3, #3
 800183c:	d9ef      	bls.n	800181e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001844:	2304      	movs	r3, #4
 8001846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800184a:	e006      	b.n	800185a <SD_disk_ioctl+0x23e>
			break;
 800184c:	bf00      	nop
 800184e:	e004      	b.n	800185a <SD_disk_ioctl+0x23e>
			break;
 8001850:	bf00      	nop
 8001852:	e002      	b.n	800185a <SD_disk_ioctl+0x23e>
			break;
 8001854:	bf00      	nop
 8001856:	e000      	b.n	800185a <SD_disk_ioctl+0x23e>
			break;
 8001858:	bf00      	nop
		}

		DESELECT();
 800185a:	f7ff fb3b 	bl	8000ed4 <DESELECT>
		SPI_RxByte();
 800185e:	f7ff fb87 	bl	8000f70 <SPI_RxByte>
	}

	return res;
 8001862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001866:	4618      	mov	r0, r3
 8001868:	372c      	adds	r7, #44	; 0x2c
 800186a:	46bd      	mov	sp, r7
 800186c:	bd90      	pop	{r4, r7, pc}
 800186e:	bf00      	nop
 8001870:	20000000 	.word	0x20000000

08001874 <I2C_Config>:
 */
#include "main.h"
#include "i2c.h"

void I2C_Config (void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
	// Enable the I2C CLOCK and GPIO CLOCK
	//I2C3-SDA is PC9 and I2C3-SCL is PA8
	RCC->APB1ENR |= APB1_I2C3_EN;  // enable I2C3 CLOCK
 8001878:	4b32      	ldr	r3, [pc, #200]	; (8001944 <I2C_Config+0xd0>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	4a31      	ldr	r2, [pc, #196]	; (8001944 <I2C_Config+0xd0>)
 800187e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001882:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= AHB1_GPIOA_EN | AHB1_GPIOC_EN;  // Enable GPIO A + C Clocks
 8001884:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <I2C_Config+0xd0>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	4a2e      	ldr	r2, [pc, #184]	; (8001944 <I2C_Config+0xd0>)
 800188a:	f043 0305 	orr.w	r3, r3, #5
 800188e:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure the I2C3 PINs for ALternate Functions (MODER)
	GPIOA->MODER |= GPIOA_PA8_ALT;
 8001890:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <I2C_Config+0xd4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a2c      	ldr	r2, [pc, #176]	; (8001948 <I2C_Config+0xd4>)
 8001896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800189a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIOC_PC9_ALT;
 800189c:	4b2b      	ldr	r3, [pc, #172]	; (800194c <I2C_Config+0xd8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a2a      	ldr	r2, [pc, #168]	; (800194c <I2C_Config+0xd8>)
 80018a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018a6:	6013      	str	r3, [r2, #0]

	//Open Drain Configuration in port output type register
	GPIOA->OTYPER |= GPIOA_PA8_OD;
 80018a8:	4b27      	ldr	r3, [pc, #156]	; (8001948 <I2C_Config+0xd4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4a26      	ldr	r2, [pc, #152]	; (8001948 <I2C_Config+0xd4>)
 80018ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b2:	6053      	str	r3, [r2, #4]
	GPIOC->OTYPER |= GPIOC_PC9_OD;
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <I2C_Config+0xd8>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4a24      	ldr	r2, [pc, #144]	; (800194c <I2C_Config+0xd8>)
 80018ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018be:	6053      	str	r3, [r2, #4]

	//High Speed Select in Output Speed register
	GPIOA->OSPEEDR |= GPIOA_PA8_HIGH_SPEED;
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <I2C_Config+0xd4>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4a20      	ldr	r2, [pc, #128]	; (8001948 <I2C_Config+0xd4>)
 80018c6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80018ca:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIOC_PC9_HIGH_SPEED;
 80018cc:	4b1f      	ldr	r3, [pc, #124]	; (800194c <I2C_Config+0xd8>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4a1e      	ldr	r2, [pc, #120]	; (800194c <I2C_Config+0xd8>)
 80018d2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80018d6:	6093      	str	r3, [r2, #8]

	//Pull-Up select in PUPDR register
	GPIOA->PUPDR |= GPIOA_PA8_PULL_UP;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <I2C_Config+0xd4>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4a1a      	ldr	r2, [pc, #104]	; (8001948 <I2C_Config+0xd4>)
 80018de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e2:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= GPIOC_PC9_PULL_UP;
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <I2C_Config+0xd8>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4a18      	ldr	r2, [pc, #96]	; (800194c <I2C_Config+0xd8>)
 80018ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ee:	60d3      	str	r3, [r2, #12]

	//Alternate function select AF4 for I2C3
	GPIOA->AFR[1] = GPIOA_PA8_AFR_I2C3;
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <I2C_Config+0xd4>)
 80018f2:	2204      	movs	r2, #4
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1] = GPIOC_PC9_AFR_I2C3;
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <I2C_Config+0xd8>)
 80018f8:	2240      	movs	r2, #64	; 0x40
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24


	// Reset the I2C3 using SWRESET
	I2C3->CR1 |= I2C3_SWRESET_SET;
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <I2C_Config+0xdc>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a13      	ldr	r2, [pc, #76]	; (8001950 <I2C_Config+0xdc>)
 8001902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001906:	6013      	str	r3, [r2, #0]
	I2C3->CR1 &= ~(I2C3_SWRESET_SET);
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <I2C_Config+0xdc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a10      	ldr	r2, [pc, #64]	; (8001950 <I2C_Config+0xdc>)
 800190e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001912:	6013      	str	r3, [r2, #0]

	///Because APB1 is @ 24Mhz, set peripheral also to 24 Mhz
	I2C3->CR2 |= I2C3_PERIPH_FREQ;
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <I2C_Config+0xdc>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <I2C_Config+0xdc>)
 800191a:	f043 0318 	orr.w	r3, r3, #24
 800191e:	6053      	str	r3, [r2, #4]
	/* Configure the clock control registers:
	 * This value is determined by taking the (SCL high time
	 * + SDA/SCL rise time) / APB1 Bus Frequency
	 * APB1 Bus Frequency: 24 Mhz
	*/
	I2C3->CCR = I2C3_CCR;
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <I2C_Config+0xdc>)
 8001922:	2278      	movs	r2, #120	; 0x78
 8001924:	61da      	str	r2, [r3, #28]

	// Configure the rise time register
	// (Rise Time SCL / Period of APB1 clock) + 1
	I2C3->TRISE = I2C3_TRISE;
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <I2C_Config+0xdc>)
 8001928:	2219      	movs	r2, #25
 800192a:	621a      	str	r2, [r3, #32]

	// Program the I2C3_CR1 register to enable the peripheral
	I2C3->CR1 |= I2C3_ENABLE;  // Enable I2C
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <I2C_Config+0xdc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <I2C_Config+0xdc>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40020000 	.word	0x40020000
 800194c:	40020800 	.word	0x40020800
 8001950:	40005c00 	.word	0x40005c00

08001954 <I2C_Start>:

void I2C_Start (void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
	I2C3->CR1 |= ACK_ENABLE; //Acknowledge returned after a byte is received
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <I2C_Start+0x38>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0b      	ldr	r2, [pc, #44]	; (800198c <I2C_Start+0x38>)
 800195e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001962:	6013      	str	r3, [r2, #0]
	I2C3->CR1 |= START_GEN;  // Generate START
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <I2C_Start+0x38>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a08      	ldr	r2, [pc, #32]	; (800198c <I2C_Start+0x38>)
 800196a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196e:	6013      	str	r3, [r2, #0]
	while (!(I2C3->SR1 & START_BIT));  //Ensure start bit (condition) generated, read only
 8001970:	bf00      	nop
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <I2C_Start+0x38>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f9      	beq.n	8001972 <I2C_Start+0x1e>
}
 800197e:	bf00      	nop
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40005c00 	.word	0x40005c00

08001990 <I2C_Write>:

void I2C_Write (uint8_t data)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
	while (!(I2C3->SR1 & TXE_BIT));  // while TXE bit is not set, stay here
 800199a:	bf00      	nop
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <I2C_Write+0x3c>)
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f9      	beq.n	800199c <I2C_Write+0xc>
	I2C3->DR = data;
 80019a8:	4a08      	ldr	r2, [pc, #32]	; (80019cc <I2C_Write+0x3c>)
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	6113      	str	r3, [r2, #16]
	while (!(I2C3->SR1 & BTF_BIT));  // while BTF bit is not set, stay here
 80019ae:	bf00      	nop
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <I2C_Write+0x3c>)
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f9      	beq.n	80019b0 <I2C_Write+0x20>
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40005c00 	.word	0x40005c00

080019d0 <I2C_Address>:

void I2C_Address (uint8_t Address)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
	I2C3->DR = Address;  // Send address byte
 80019da:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <I2C_Address+0x3c>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	6113      	str	r3, [r2, #16]
	while (!(I2C3->SR1 & ADDR_BIT));  // while ADDR bit not set
 80019e0:	bf00      	nop
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <I2C_Address+0x3c>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f9      	beq.n	80019e2 <I2C_Address+0x12>
	uint8_t temp = I2C3->SR1 | I2C3->SR2;  // read SR1 and SR2 to clear the ADDR bit
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <I2C_Address+0x3c>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <I2C_Address+0x3c>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	73fb      	strb	r3, [r7, #15]
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40005c00 	.word	0x40005c00

08001a10 <I2C_Stop>:

void I2C_Stop (void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	I2C3->CR1 |= STOP_BIT;  // Stop I2C
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <I2C_Stop+0x1c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <I2C_Stop+0x1c>)
 8001a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40005c00 	.word	0x40005c00

08001a30 <I2C_Read>:

void I2C_Read (uint8_t Address, uint8_t *buffer, uint8_t size)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	71bb      	strb	r3, [r7, #6]
		 second last data byte (after second last RxNE event)
	g) In order to generate the Stop/Restart condition, software must set the STOP/START bit
	   after reading the second last data byte (after the second last RxNE event)
*/

	int remaining = size;
 8001a40:	79bb      	ldrb	r3, [r7, #6]
 8001a42:	60fb      	str	r3, [r7, #12]
	if (size == 1)
 8001a44:	79bb      	ldrb	r3, [r7, #6]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d12f      	bne.n	8001aaa <I2C_Read+0x7a>
	{
		I2C3->DR = Address;  // Send Address
 8001a4a:	4a4b      	ldr	r2, [pc, #300]	; (8001b78 <I2C_Read+0x148>)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	6113      	str	r3, [r2, #16]
		while (!(I2C3->SR1 & ADDR_BIT));  // wait for ADDR bit to set
 8001a50:	bf00      	nop
 8001a52:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <I2C_Read+0x148>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f9      	beq.n	8001a52 <I2C_Read+0x22>

		I2C3->CR1 &= ~ACK_ENABLE;  // clear the ACK bit
 8001a5e:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <I2C_Read+0x148>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <I2C_Read+0x148>)
 8001a64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a68:	6013      	str	r3, [r2, #0]
		uint8_t temp = I2C3->SR1 | I2C3->SR2;  // Clear ADDR by reading SR1 and SR2
 8001a6a:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <I2C_Read+0x148>)
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	4b41      	ldr	r3, [pc, #260]	; (8001b78 <I2C_Read+0x148>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4313      	orrs	r3, r2
 8001a78:	72bb      	strb	r3, [r7, #10]
		I2C3->CR1 |= STOP_BIT;  // Stop I2C
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <I2C_Read+0x148>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a3e      	ldr	r2, [pc, #248]	; (8001b78 <I2C_Read+0x148>)
 8001a80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a84:	6013      	str	r3, [r2, #0]
		while (!(I2C3->SR1 & RXNE_BIT));  // Ensure RxNE is set
 8001a86:	bf00      	nop
 8001a88:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <I2C_Read+0x148>)
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f9      	beq.n	8001a88 <I2C_Read+0x58>
		buffer[size-remaining] = I2C3->DR;  // Read data and store into buffer
 8001a94:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <I2C_Read+0x148>)
 8001a96:	6919      	ldr	r1, [r3, #16]
 8001a98:	79ba      	ldrb	r2, [r7, #6]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	b2ca      	uxtb	r2, r1
 8001aa6:	701a      	strb	r2, [r3, #0]
		remaining--;
		while (!(I2C3->SR1 & RXNE_BIT));  // wait for RxNE to set
		buffer[size-remaining] = I2C3->DR;  // copy the data into the buffer
	}

}
 8001aa8:	e060      	b.n	8001b6c <I2C_Read+0x13c>
		I2C3->DR = Address;  // Send Address
 8001aaa:	4a33      	ldr	r2, [pc, #204]	; (8001b78 <I2C_Read+0x148>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	6113      	str	r3, [r2, #16]
		while (!(I2C3->SR1 & ADDR_BIT));  // wait for ADDR bit to set
 8001ab0:	bf00      	nop
 8001ab2:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <I2C_Read+0x148>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f9      	beq.n	8001ab2 <I2C_Read+0x82>
		uint8_t temp = I2C3->SR1 | I2C3->SR2;  // read SR1 and SR2 to clear the ADDR bit
 8001abe:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <I2C_Read+0x148>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <I2C_Read+0x148>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	4313      	orrs	r3, r2
 8001acc:	72fb      	strb	r3, [r7, #11]
		while (remaining > 2)
 8001ace:	e019      	b.n	8001b04 <I2C_Read+0xd4>
			while (!(I2C3->SR1 & RXNE_BIT));  // wait for RxNE to set
 8001ad0:	bf00      	nop
 8001ad2:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <I2C_Read+0x148>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f9      	beq.n	8001ad2 <I2C_Read+0xa2>
			buffer[size-remaining] = I2C3->DR;  // Store data from DR into buffer
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <I2C_Read+0x148>)
 8001ae0:	6919      	ldr	r1, [r3, #16]
 8001ae2:	79ba      	ldrb	r2, [r7, #6]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	461a      	mov	r2, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	4413      	add	r3, r2
 8001aee:	b2ca      	uxtb	r2, r1
 8001af0:	701a      	strb	r2, [r3, #0]
			I2C3->CR1 |= ACK_ENABLE;  // Send ACK
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <I2C_Read+0x148>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a20      	ldr	r2, [pc, #128]	; (8001b78 <I2C_Read+0x148>)
 8001af8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001afc:	6013      	str	r3, [r2, #0]
			remaining--;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
		while (remaining > 2)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	dce2      	bgt.n	8001ad0 <I2C_Read+0xa0>
		while (!(I2C3->SR1 & RXNE_BIT));  // wait for RxNE to set
 8001b0a:	bf00      	nop
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <I2C_Read+0x148>)
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f9      	beq.n	8001b0c <I2C_Read+0xdc>
		buffer[size-remaining] = I2C3->DR;
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <I2C_Read+0x148>)
 8001b1a:	6919      	ldr	r1, [r3, #16]
 8001b1c:	79ba      	ldrb	r2, [r7, #6]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	b2ca      	uxtb	r2, r1
 8001b2a:	701a      	strb	r2, [r3, #0]
		I2C3->CR1 &= ~ACK_ENABLE;  // Clear ACK
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <I2C_Read+0x148>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a11      	ldr	r2, [pc, #68]	; (8001b78 <I2C_Read+0x148>)
 8001b32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b36:	6013      	str	r3, [r2, #0]
		I2C3->CR1 |= STOP_BIT;  // Stop I2C
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <I2C_Read+0x148>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <I2C_Read+0x148>)
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b42:	6013      	str	r3, [r2, #0]
		remaining--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
		while (!(I2C3->SR1 & RXNE_BIT));  // wait for RxNE to set
 8001b4a:	bf00      	nop
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <I2C_Read+0x148>)
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f9      	beq.n	8001b4c <I2C_Read+0x11c>
		buffer[size-remaining] = I2C3->DR;  // copy the data into the buffer
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <I2C_Read+0x148>)
 8001b5a:	6919      	ldr	r1, [r3, #16]
 8001b5c:	79ba      	ldrb	r2, [r7, #6]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	b2ca      	uxtb	r2, r1
 8001b6a:	701a      	strb	r2, [r3, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40005c00 	.word	0x40005c00

08001b7c <MPU_Write>:

void MPU_Write (uint8_t Address, uint8_t Reg, uint8_t Data)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
 8001b86:	460b      	mov	r3, r1
 8001b88:	71bb      	strb	r3, [r7, #6]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	717b      	strb	r3, [r7, #5]
	I2C_Start();
 8001b8e:	f7ff fee1 	bl	8001954 <I2C_Start>
	I2C_Address (Address);
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff1b 	bl	80019d0 <I2C_Address>
	I2C_Write (Reg);
 8001b9a:	79bb      	ldrb	r3, [r7, #6]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fef7 	bl	8001990 <I2C_Write>
	I2C_Write (Data);
 8001ba2:	797b      	ldrb	r3, [r7, #5]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fef3 	bl	8001990 <I2C_Write>
	I2C_Stop ();
 8001baa:	f7ff ff31 	bl	8001a10 <I2C_Stop>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <MPU_Read>:

void MPU_Read (uint8_t Address, uint8_t Reg, uint8_t *buffer, uint8_t size)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	603a      	str	r2, [r7, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	71fb      	strb	r3, [r7, #7]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	71bb      	strb	r3, [r7, #6]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	717b      	strb	r3, [r7, #5]
	I2C_Start ();
 8001bcc:	f7ff fec2 	bl	8001954 <I2C_Start>
	I2C_Address (Address);
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fefc 	bl	80019d0 <I2C_Address>
	I2C_Write (Reg);
 8001bd8:	79bb      	ldrb	r3, [r7, #6]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fed8 	bl	8001990 <I2C_Write>
	I2C_Start ();
 8001be0:	f7ff feb8 	bl	8001954 <I2C_Start>
	I2C_Read (Address+0x01, buffer, size);
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	3301      	adds	r3, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	797a      	ldrb	r2, [r7, #5]
 8001bec:	6839      	ldr	r1, [r7, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ff1e 	bl	8001a30 <I2C_Read>
	I2C_Stop ();
 8001bf4:	f7ff ff0c 	bl	8001a10 <I2C_Stop>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db0b      	blt.n	8001c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4907      	ldr	r1, [pc, #28]	; (8001c38 <__NVIC_EnableIRQ+0x38>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2001      	movs	r0, #1
 8001c22:	fa00 f202 	lsl.w	r2, r0, r2
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca0:	d301      	bcc.n	8001ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00f      	b.n	8001cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <SysTick_Config+0x40>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	6053      	str	r3, [r2, #4]
  //NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  NVIC_SetPriority (SysTick_IRQn, 4); /* set Priority for Systick Interrupt */
 8001cae:	2104      	movs	r1, #4
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f7ff ffc2 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <SysTick_Config+0x40>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cbe:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <SysTick_Config+0x40>)
 8001cc0:	2207      	movs	r2, #7
 8001cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	e000e010 	.word	0xe000e010

08001cd4 <main>:




int main(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0

  HAL_Init();
 8001cd8:	f001 faf6 	bl	80032c8 <HAL_Init>
  SystemClock_Config();
 8001cdc:	f000 f90e 	bl	8001efc <SystemClock_Config>
  MX_GPIO_Init();
 8001ce0:	f000 f96e 	bl	8001fc0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001ce4:	f000 f936 	bl	8001f54 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001ce8:	f002 f940 	bl	8003f6c <MX_FATFS_Init>
  I2C_Config();
 8001cec:	f7ff fdc2 	bl	8001874 <I2C_Config>
  MPU6050_Init();
 8001cf0:	f000 f82e 	bl	8001d50 <MPU6050_Init>
  SysTick_Config(16000000/1000); // set tick to every 1ms
 8001cf4:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8001cf8:	f7ff ffca 	bl	8001c90 <SysTick_Config>
  Uart2Config();
 8001cfc:	f001 f9da 	bl	80030b4 <Uart2Config>

  while (1)
  {
	  if(systick_count == 50)
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <main+0x64>)
 8001d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d06:	2b32      	cmp	r3, #50	; 0x32
 8001d08:	d110      	bne.n	8001d2c <main+0x58>
	  	  {
	  		  event_analysis(x_axis_buffer, y_axis_buffer, z_axis_buffer);
 8001d0a:	4a0c      	ldr	r2, [pc, #48]	; (8001d3c <main+0x68>)
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <main+0x6c>)
 8001d0e:	480d      	ldr	r0, [pc, #52]	; (8001d44 <main+0x70>)
 8001d10:	f7fe ff1e 	bl	8000b50 <event_analysis>

	  		  //systick_count  = 0;
	  		  buff_incr = 0;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <main+0x74>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
	  		  USART2->CR1 |= (1<<13); //UART ENABLE
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <main+0x78>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <main+0x78>)
 8001d20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d24:	60d3      	str	r3, [r2, #12]
	  		  NVIC_EnableIRQ(USART2_IRQn);
 8001d26:	2026      	movs	r0, #38	; 0x26
 8001d28:	f7ff ff6a 	bl	8001c00 <__NVIC_EnableIRQ>
	  	  }

	  MPU6050_Read_Accel();
 8001d2c:	f000 f840 	bl	8001db0 <MPU6050_Read_Accel>
	  delay_ms_systick(100);
 8001d30:	2064      	movs	r0, #100	; 0x64
 8001d32:	f001 f949 	bl	8002fc8 <delay_ms_systick>
	  if(systick_count == 50)
 8001d36:	e7e3      	b.n	8001d00 <main+0x2c>
 8001d38:	20002198 	.word	0x20002198
 8001d3c:	2000226c 	.word	0x2000226c
 8001d40:	20002204 	.word	0x20002204
 8001d44:	2000219c 	.word	0x2000219c
 8001d48:	200022d2 	.word	0x200022d2
 8001d4c:	40004400 	.word	0x40004400

08001d50 <MPU6050_Init>:

}


void MPU6050_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	MPU_Read (MPU6050_ADDR,WHO_AM_I_REG, &check, 1);
 8001d56:	1dba      	adds	r2, r7, #6
 8001d58:	2301      	movs	r3, #1
 8001d5a:	2175      	movs	r1, #117	; 0x75
 8001d5c:	20d0      	movs	r0, #208	; 0xd0
 8001d5e:	f7ff ff2a 	bl	8001bb6 <MPU_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001d62:	79bb      	ldrb	r3, [r7, #6]
 8001d64:	2b68      	cmp	r3, #104	; 0x68
 8001d66:	d11f      	bne.n	8001da8 <MPU6050_Init+0x58>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	71fb      	strb	r3, [r7, #7]
		MPU_Write (MPU6050_ADDR, PWR_MGMT_1_REG, Data);
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	216b      	movs	r1, #107	; 0x6b
 8001d72:	20d0      	movs	r0, #208	; 0xd0
 8001d74:	f7ff ff02 	bl	8001b7c <MPU_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001d78:	2307      	movs	r3, #7
 8001d7a:	71fb      	strb	r3, [r7, #7]
		MPU_Write(MPU6050_ADDR, SMPLRT_DIV_REG, Data);
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2119      	movs	r1, #25
 8001d82:	20d0      	movs	r0, #208	; 0xd0
 8001d84:	f7ff fefa 	bl	8001b7c <MPU_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ? 2g
		Data = 0x18;
 8001d88:	2318      	movs	r3, #24
 8001d8a:	71fb      	strb	r3, [r7, #7]
		MPU_Write(MPU6050_ADDR, ACCEL_CONFIG_REG, Data);
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	211c      	movs	r1, #28
 8001d92:	20d0      	movs	r0, #208	; 0xd0
 8001d94:	f7ff fef2 	bl	8001b7c <MPU_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ? 250 ?/s
		Data = 0x00;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	71fb      	strb	r3, [r7, #7]
		MPU_Write(MPU6050_ADDR, GYRO_CONFIG_REG, Data);
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	211b      	movs	r1, #27
 8001da2:	20d0      	movs	r0, #208	; 0xd0
 8001da4:	f7ff feea 	bl	8001b7c <MPU_Write>
	}

}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0

	uint8_t Rx_data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	MPU_Read (MPU6050_ADDR, ACCEL_XOUT_H_REG, Rx_data, 6);
 8001db6:	463a      	mov	r2, r7
 8001db8:	2306      	movs	r3, #6
 8001dba:	213b      	movs	r1, #59	; 0x3b
 8001dbc:	20d0      	movs	r0, #208	; 0xd0
 8001dbe:	f7ff fefa 	bl	8001bb6 <MPU_Read>

	Accel_X_RAW = (int16_t)(Rx_data[0] << 8 | Rx_data [1]);
 8001dc2:	783b      	ldrb	r3, [r7, #0]
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	b21a      	sxth	r2, r3
 8001dc8:	787b      	ldrb	r3, [r7, #1]
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	b21a      	sxth	r2, r3
 8001dd0:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <MPU6050_Read_Accel+0x11c>)
 8001dd2:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rx_data[2] << 8 | Rx_data [3]);
 8001dd4:	78bb      	ldrb	r3, [r7, #2]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	b21a      	sxth	r2, r3
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b21a      	sxth	r2, r3
 8001de2:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <MPU6050_Read_Accel+0x120>)
 8001de4:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rx_data[4] << 8 | Rx_data [5]);
 8001de6:	793b      	ldrb	r3, [r7, #4]
 8001de8:	021b      	lsls	r3, r3, #8
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	797b      	ldrb	r3, [r7, #5]
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	4313      	orrs	r3, r2
 8001df2:	b21a      	sxth	r2, r3
 8001df4:	4b37      	ldr	r3, [pc, #220]	; (8001ed4 <MPU6050_Read_Accel+0x124>)
 8001df6:	801a      	strh	r2, [r3, #0]
	systick_count++;
 8001df8:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <MPU6050_Read_Accel+0x128>)
 8001dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	3301      	adds	r3, #1
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	b21a      	sxth	r2, r3
 8001e06:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <MPU6050_Read_Accel+0x128>)
 8001e08:	801a      	strh	r2, [r3, #0]

	Ax = Accel_X_RAW/2048.0;
 8001e0a:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <MPU6050_Read_Accel+0x11c>)
 8001e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fb33 	bl	800047c <__aeabi_i2d>
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	4b30      	ldr	r3, [pc, #192]	; (8001edc <MPU6050_Read_Accel+0x12c>)
 8001e1c:	f7fe fcc2 	bl	80007a4 <__aeabi_ddiv>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f7fe fe42 	bl	8000ab0 <__aeabi_d2f>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4a2c      	ldr	r2, [pc, #176]	; (8001ee0 <MPU6050_Read_Accel+0x130>)
 8001e30:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/2048.0;
 8001e32:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <MPU6050_Read_Accel+0x120>)
 8001e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fb1f 	bl	800047c <__aeabi_i2d>
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <MPU6050_Read_Accel+0x12c>)
 8001e44:	f7fe fcae 	bl	80007a4 <__aeabi_ddiv>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f7fe fe2e 	bl	8000ab0 <__aeabi_d2f>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4a23      	ldr	r2, [pc, #140]	; (8001ee4 <MPU6050_Read_Accel+0x134>)
 8001e58:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/2048.0;
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <MPU6050_Read_Accel+0x124>)
 8001e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb0b 	bl	800047c <__aeabi_i2d>
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <MPU6050_Read_Accel+0x12c>)
 8001e6c:	f7fe fc9a 	bl	80007a4 <__aeabi_ddiv>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f7fe fe1a 	bl	8000ab0 <__aeabi_d2f>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ee8 <MPU6050_Read_Accel+0x138>)
 8001e80:	6013      	str	r3, [r2, #0]

	x_axis_buffer[buff_incr] = Accel_X_RAW;
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <MPU6050_Read_Accel+0x13c>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <MPU6050_Read_Accel+0x11c>)
 8001e8a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001e8e:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <MPU6050_Read_Accel+0x140>)
 8001e90:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	y_axis_buffer[buff_incr] = Accel_Y_RAW;
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <MPU6050_Read_Accel+0x13c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <MPU6050_Read_Accel+0x120>)
 8001e9c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <MPU6050_Read_Accel+0x144>)
 8001ea2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	z_axis_buffer[buff_incr] = Accel_Z_RAW;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MPU6050_Read_Accel+0x13c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <MPU6050_Read_Accel+0x124>)
 8001eae:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <MPU6050_Read_Accel+0x148>)
 8001eb4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	buff_incr++;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MPU6050_Read_Accel+0x13c>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <MPU6050_Read_Accel+0x13c>)
 8001ec2:	701a      	strb	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20002192 	.word	0x20002192
 8001ed0:	20002194 	.word	0x20002194
 8001ed4:	20002196 	.word	0x20002196
 8001ed8:	20002198 	.word	0x20002198
 8001edc:	40a00000 	.word	0x40a00000
 8001ee0:	200022d4 	.word	0x200022d4
 8001ee4:	200022d8 	.word	0x200022d8
 8001ee8:	200022dc 	.word	0x200022dc
 8001eec:	200022d2 	.word	0x200022d2
 8001ef0:	2000219c 	.word	0x2000219c
 8001ef4:	20002204 	.word	0x20002204
 8001ef8:	2000226c 	.word	0x2000226c

08001efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSION;                         //Enable HSI and wait for HSI to be on
 8001f00:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <SystemClock_Config+0x54>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <SystemClock_Config+0x54>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSIRDY));              ///WAIT FOR HSI TO GET READY
 8001f0c:	bf00      	nop
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <SystemClock_Config+0x54>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f9      	beq.n	8001f0e <SystemClock_Config+0x12>

	/////PRESCALERS
	/////AHB PSC
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;                 //AHB PSC TO 1
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <SystemClock_Config+0x54>)
 8001f1c:	4a0c      	ldr	r2, [pc, #48]	; (8001f50 <SystemClock_Config+0x54>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;                //APB1 PSC TO 2
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <SystemClock_Config+0x54>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <SystemClock_Config+0x54>)
 8001f28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f2c:	6093      	str	r3, [r2, #8]

	    //SET HSI AS CLOCK SOURCE and confirm status
	RCC->CFGR |= RCC_CFGR_SW_HSI;                            //Enabling HSI as clock source
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <SystemClock_Config+0x54>)
 8001f30:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <SystemClock_Config+0x54>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SW) != RCC_CFGR_SW_HSI);    //Wait for the clock to be on
 8001f36:	bf00      	nop
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <SystemClock_Config+0x54>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f9      	bne.n	8001f38 <SystemClock_Config+0x3c>
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40023800 	.word	0x40023800

08001f54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  hspi2.Instance = SPI2;
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f5a:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <MX_SPI2_Init+0x68>)
 8001f5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f84:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f88:	2208      	movs	r2, #8
 8001f8a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001fa0:	220a      	movs	r2, #10
 8001fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fa4:	4804      	ldr	r0, [pc, #16]	; (8001fb8 <MX_SPI2_Init+0x64>)
 8001fa6:	f001 fbb0 	bl	800370a <HAL_SPI_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001fb0:	f000 f978 	bl	80022a4 <Error_Handler>
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200022e0 	.word	0x200022e0
 8001fbc:	40003800 	.word	0x40003800

08001fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
 8001fd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	4bac      	ldr	r3, [pc, #688]	; (800228c <MX_GPIO_Init+0x2cc>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4aab      	ldr	r2, [pc, #684]	; (800228c <MX_GPIO_Init+0x2cc>)
 8001fe0:	f043 0310 	orr.w	r3, r3, #16
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4ba9      	ldr	r3, [pc, #676]	; (800228c <MX_GPIO_Init+0x2cc>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	4ba5      	ldr	r3, [pc, #660]	; (800228c <MX_GPIO_Init+0x2cc>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4aa4      	ldr	r2, [pc, #656]	; (800228c <MX_GPIO_Init+0x2cc>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4ba2      	ldr	r3, [pc, #648]	; (800228c <MX_GPIO_Init+0x2cc>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b9e      	ldr	r3, [pc, #632]	; (800228c <MX_GPIO_Init+0x2cc>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a9d      	ldr	r2, [pc, #628]	; (800228c <MX_GPIO_Init+0x2cc>)
 8002018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b9b      	ldr	r3, [pc, #620]	; (800228c <MX_GPIO_Init+0x2cc>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b97      	ldr	r3, [pc, #604]	; (800228c <MX_GPIO_Init+0x2cc>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a96      	ldr	r2, [pc, #600]	; (800228c <MX_GPIO_Init+0x2cc>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b94      	ldr	r3, [pc, #592]	; (800228c <MX_GPIO_Init+0x2cc>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	4b90      	ldr	r3, [pc, #576]	; (800228c <MX_GPIO_Init+0x2cc>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a8f      	ldr	r2, [pc, #572]	; (800228c <MX_GPIO_Init+0x2cc>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b8d      	ldr	r3, [pc, #564]	; (800228c <MX_GPIO_Init+0x2cc>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	4b89      	ldr	r3, [pc, #548]	; (800228c <MX_GPIO_Init+0x2cc>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a88      	ldr	r2, [pc, #544]	; (800228c <MX_GPIO_Init+0x2cc>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b86      	ldr	r3, [pc, #536]	; (800228c <MX_GPIO_Init+0x2cc>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800207e:	2200      	movs	r2, #0
 8002080:	2108      	movs	r1, #8
 8002082:	4883      	ldr	r0, [pc, #524]	; (8002290 <MX_GPIO_Init+0x2d0>)
 8002084:	f001 fb28 	bl	80036d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002088:	2201      	movs	r2, #1
 800208a:	2101      	movs	r1, #1
 800208c:	4881      	ldr	r0, [pc, #516]	; (8002294 <MX_GPIO_Init+0x2d4>)
 800208e:	f001 fb23 	bl	80036d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002092:	2200      	movs	r2, #0
 8002094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002098:	487f      	ldr	r0, [pc, #508]	; (8002298 <MX_GPIO_Init+0x2d8>)
 800209a:	f001 fb1d 	bl	80036d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800209e:	2200      	movs	r2, #0
 80020a0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80020a4:	487d      	ldr	r0, [pc, #500]	; (800229c <MX_GPIO_Init+0x2dc>)
 80020a6:	f001 fb17 	bl	80036d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80020aa:	2308      	movs	r3, #8
 80020ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ae:	2301      	movs	r3, #1
 80020b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80020ba:	f107 031c 	add.w	r3, r7, #28
 80020be:	4619      	mov	r1, r3
 80020c0:	4873      	ldr	r0, [pc, #460]	; (8002290 <MX_GPIO_Init+0x2d0>)
 80020c2:	f001 f96d 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80020c6:	2301      	movs	r3, #1
 80020c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ca:	2301      	movs	r3, #1
 80020cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80020d6:	f107 031c 	add.w	r3, r7, #28
 80020da:	4619      	mov	r1, r3
 80020dc:	486d      	ldr	r0, [pc, #436]	; (8002294 <MX_GPIO_Init+0x2d4>)
 80020de:	f001 f95f 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80020e2:	2308      	movs	r3, #8
 80020e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020f2:	2305      	movs	r3, #5
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	4619      	mov	r1, r3
 80020fc:	4865      	ldr	r0, [pc, #404]	; (8002294 <MX_GPIO_Init+0x2d4>)
 80020fe:	f001 f94f 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002102:	2301      	movs	r3, #1
 8002104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002106:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800210a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	4619      	mov	r1, r3
 8002116:	4862      	ldr	r0, [pc, #392]	; (80022a0 <MX_GPIO_Init+0x2e0>)
 8002118:	f001 f942 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800211c:	2310      	movs	r3, #16
 800211e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800212c:	2306      	movs	r3, #6
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	4619      	mov	r1, r3
 8002136:	485a      	ldr	r0, [pc, #360]	; (80022a0 <MX_GPIO_Init+0x2e0>)
 8002138:	f001 f932 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800213c:	23e0      	movs	r3, #224	; 0xe0
 800213e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	2300      	movs	r3, #0
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800214c:	2305      	movs	r3, #5
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	4619      	mov	r1, r3
 8002156:	4852      	ldr	r0, [pc, #328]	; (80022a0 <MX_GPIO_Init+0x2e0>)
 8002158:	f001 f922 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800215c:	2304      	movs	r3, #4
 800215e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002160:	2300      	movs	r3, #0
 8002162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002168:	f107 031c 	add.w	r3, r7, #28
 800216c:	4619      	mov	r1, r3
 800216e:	484a      	ldr	r0, [pc, #296]	; (8002298 <MX_GPIO_Init+0x2d8>)
 8002170:	f001 f916 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002186:	2305      	movs	r3, #5
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	4619      	mov	r1, r3
 8002190:	4841      	ldr	r0, [pc, #260]	; (8002298 <MX_GPIO_Init+0x2d8>)
 8002192:	f001 f905 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800219a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a8:	f107 031c 	add.w	r3, r7, #28
 80021ac:	4619      	mov	r1, r3
 80021ae:	483a      	ldr	r0, [pc, #232]	; (8002298 <MX_GPIO_Init+0x2d8>)
 80021b0:	f001 f8f6 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80021b4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80021b8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ba:	2301      	movs	r3, #1
 80021bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	4619      	mov	r1, r3
 80021cc:	4833      	ldr	r0, [pc, #204]	; (800229c <MX_GPIO_Init+0x2dc>)
 80021ce:	f001 f8e7 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80021d2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80021d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021e4:	2306      	movs	r3, #6
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4829      	ldr	r0, [pc, #164]	; (8002294 <MX_GPIO_Init+0x2d4>)
 80021f0:	f001 f8d6 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80021f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fa:	2300      	movs	r3, #0
 80021fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4619      	mov	r1, r3
 8002208:	4825      	ldr	r0, [pc, #148]	; (80022a0 <MX_GPIO_Init+0x2e0>)
 800220a:	f001 f8c9 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800220e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002220:	230a      	movs	r3, #10
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002224:	f107 031c 	add.w	r3, r7, #28
 8002228:	4619      	mov	r1, r3
 800222a:	481d      	ldr	r0, [pc, #116]	; (80022a0 <MX_GPIO_Init+0x2e0>)
 800222c:	f001 f8b8 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002230:	2320      	movs	r3, #32
 8002232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002234:	2300      	movs	r3, #0
 8002236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	4619      	mov	r1, r3
 8002242:	4816      	ldr	r0, [pc, #88]	; (800229c <MX_GPIO_Init+0x2dc>)
 8002244:	f001 f8ac 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002248:	f44f 7310 	mov.w	r3, #576	; 0x240
 800224c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800224e:	2312      	movs	r3, #18
 8002250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800225a:	2304      	movs	r3, #4
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225e:	f107 031c 	add.w	r3, r7, #28
 8002262:	4619      	mov	r1, r3
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <MX_GPIO_Init+0x2d8>)
 8002266:	f001 f89b 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800226a:	2302      	movs	r3, #2
 800226c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800226e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002272:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	4619      	mov	r1, r3
 800227e:	4804      	ldr	r0, [pc, #16]	; (8002290 <MX_GPIO_Init+0x2d0>)
 8002280:	f001 f88e 	bl	80033a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002284:	bf00      	nop
 8002286:	3730      	adds	r7, #48	; 0x30
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40023800 	.word	0x40023800
 8002290:	40021000 	.word	0x40021000
 8002294:	40020800 	.word	0x40020800
 8002298:	40020400 	.word	0x40020400
 800229c:	40020c00 	.word	0x40020c00
 80022a0:	40020000 	.word	0x40020000

080022a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a8:	b672      	cpsid	i
}
 80022aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022ac:	e7fe      	b.n	80022ac <Error_Handler+0x8>

080022ae <gps_fix_check>:

int index1 = 0;


int gps_fix_check(char *input_buffer)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b085      	sub	sp, #20
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
	int comma_count = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 60; i++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	e011      	b.n	80022e4 <gps_fix_check+0x36>
	{
		if(input_buffer[i] == ',')
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b2c      	cmp	r3, #44	; 0x2c
 80022ca:	d108      	bne.n	80022de <gps_fix_check+0x30>
		{
			comma_count++;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3301      	adds	r3, #1
 80022d0:	60fb      	str	r3, [r7, #12]
			if(comma_count == FIX_POS)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b06      	cmp	r3, #6
 80022d6:	d102      	bne.n	80022de <gps_fix_check+0x30>
			return i+1;
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	3301      	adds	r3, #1
 80022dc:	e007      	b.n	80022ee <gps_fix_check+0x40>
	for(int i = 0; i < 60; i++)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3301      	adds	r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b3b      	cmp	r3, #59	; 0x3b
 80022e8:	ddea      	ble.n	80022c0 <gps_fix_check+0x12>
		}
	}
	return -1;
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	0000      	movs	r0, r0
 80022fc:	0000      	movs	r0, r0
	...

08002300 <GGA_analysis>:

void GGA_analysis(char *input_buffer, GGASTRUCT *gga)
{
 8002300:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002304:	b09a      	sub	sp, #104	; 0x68
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]


	index1 = 0;
 800230c:	4bac      	ldr	r3, [pc, #688]	; (80025c0 <GGA_analysis+0x2c0>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
	char time_buffer[12] = {0};
 8002312:	2300      	movs	r3, #0
 8002314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002316:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
	char latitude_buffer[12] = {0};
 8002320:	2300      	movs	r3, #0
 8002322:	633b      	str	r3, [r7, #48]	; 0x30
 8002324:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
	char longitude_buffer[12] = {0};
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
 8002332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
	char satellite_buffer[12] = {0};
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	f107 031c 	add.w	r3, r7, #28
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
	char altitude_buffer[12] = {0};
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	f107 0310 	add.w	r3, r7, #16
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
	int i = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	667b      	str	r3, [r7, #100]	; 0x64



	index1 = gps_fix_check(input_buffer);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ffa6 	bl	80022ae <gps_fix_check>
 8002362:	4603      	mov	r3, r0
 8002364:	4a96      	ldr	r2, [pc, #600]	; (80025c0 <GGA_analysis+0x2c0>)
 8002366:	6013      	str	r3, [r2, #0]
	if (input_buffer[index1] == '0')
 8002368:	4b95      	ldr	r3, [pc, #596]	; (80025c0 <GGA_analysis+0x2c0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b30      	cmp	r3, #48	; 0x30
 8002376:	d103      	bne.n	8002380 <GGA_analysis+0x80>
	{
		gga->fixbit_gga = 0;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
		return;
 800237e:	e2d5      	b.n	800292c <GGA_analysis+0x62c>
	}
	else
	{
		gga->fixbit_gga = 1;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2201      	movs	r2, #1
 8002384:	61da      	str	r2, [r3, #28]
		index1 = 0;
 8002386:	4b8e      	ldr	r3, [pc, #568]	; (80025c0 <GGA_analysis+0x2c0>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
	}

	index1 = 8;
 800238c:	4b8c      	ldr	r3, [pc, #560]	; (80025c0 <GGA_analysis+0x2c0>)
 800238e:	2208      	movs	r2, #8
 8002390:	601a      	str	r2, [r3, #0]
	i=0;
 8002392:	2300      	movs	r3, #0
 8002394:	667b      	str	r3, [r7, #100]	; 0x64
	for(;input_buffer[index1] != ','; time_buffer[i++] = input_buffer[index1++]);
 8002396:	e00f      	b.n	80023b8 <GGA_analysis+0xb8>
 8002398:	4b89      	ldr	r3, [pc, #548]	; (80025c0 <GGA_analysis+0x2c0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	4988      	ldr	r1, [pc, #544]	; (80025c0 <GGA_analysis+0x2c0>)
 80023a0:	600a      	str	r2, [r1, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	441a      	add	r2, r3
 80023a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023aa:	1c59      	adds	r1, r3, #1
 80023ac:	6679      	str	r1, [r7, #100]	; 0x64
 80023ae:	7812      	ldrb	r2, [r2, #0]
 80023b0:	3368      	adds	r3, #104	; 0x68
 80023b2:	443b      	add	r3, r7
 80023b4:	f803 2c2c 	strb.w	r2, [r3, #-44]
 80023b8:	4b81      	ldr	r3, [pc, #516]	; (80025c0 <GGA_analysis+0x2c0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b2c      	cmp	r3, #44	; 0x2c
 80023c6:	d1e7      	bne.n	8002398 <GGA_analysis+0x98>

	gga->hour = ((time_buffer[0] - '0') * 10 + (time_buffer[1] - '0')) + (GMT/100) - 12;
 80023c8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80023cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	461a      	mov	r2, r3
 80023da:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80023de:	3b30      	subs	r3, #48	; 0x30
 80023e0:	4413      	add	r3, r2
 80023e2:	1fda      	subs	r2, r3, #7
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	611a      	str	r2, [r3, #16]
	gga->min = ((time_buffer[2] - '0') * 10 + (time_buffer[3] - '0')) + (GMT % 100);
 80023e8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80023ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	461a      	mov	r2, r3
 80023fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023fe:	3b30      	subs	r3, #48	; 0x30
 8002400:	441a      	add	r2, r3
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	615a      	str	r2, [r3, #20]
	gga->sec = (time_buffer[4] - '0') * 10 + (time_buffer[5] - '0');
 8002406:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800240a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	461a      	mov	r2, r3
 8002418:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800241c:	3b30      	subs	r3, #48	; 0x30
 800241e:	441a      	add	r2, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	619a      	str	r2, [r3, #24]


	index1++;
 8002424:	4b66      	ldr	r3, [pc, #408]	; (80025c0 <GGA_analysis+0x2c0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3301      	adds	r3, #1
 800242a:	4a65      	ldr	r2, [pc, #404]	; (80025c0 <GGA_analysis+0x2c0>)
 800242c:	6013      	str	r3, [r2, #0]
	i=0;
 800242e:	2300      	movs	r3, #0
 8002430:	667b      	str	r3, [r7, #100]	; 0x64
	for(;input_buffer[index1] != ','; latitude_buffer[i++] = input_buffer[index1++]);
 8002432:	e00f      	b.n	8002454 <GGA_analysis+0x154>
 8002434:	4b62      	ldr	r3, [pc, #392]	; (80025c0 <GGA_analysis+0x2c0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	4961      	ldr	r1, [pc, #388]	; (80025c0 <GGA_analysis+0x2c0>)
 800243c:	600a      	str	r2, [r1, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	441a      	add	r2, r3
 8002444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002446:	1c59      	adds	r1, r3, #1
 8002448:	6679      	str	r1, [r7, #100]	; 0x64
 800244a:	7812      	ldrb	r2, [r2, #0]
 800244c:	3368      	adds	r3, #104	; 0x68
 800244e:	443b      	add	r3, r7
 8002450:	f803 2c38 	strb.w	r2, [r3, #-56]
 8002454:	4b5a      	ldr	r3, [pc, #360]	; (80025c0 <GGA_analysis+0x2c0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b2c      	cmp	r3, #44	; 0x2c
 8002462:	d1e7      	bne.n	8002434 <GGA_analysis+0x134>


	if (strlen(latitude_buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8002464:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002468:	4618      	mov	r0, r3
 800246a:	f7fd fead 	bl	80001c8 <strlen>
 800246e:	4603      	mov	r3, r0
 8002470:	2b05      	cmp	r3, #5
 8002472:	f240 825a 	bls.w	800292a <GGA_analysis+0x62a>
	int16_t num = (atoi(latitude_buffer));   // change the buffer to the number. It will only convert upto decimal
 8002476:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800247a:	4618      	mov	r0, r3
 800247c:	f004 fff4 	bl	8007468 <atoi>
 8002480:	4603      	mov	r3, r0
 8002482:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	int j = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	663b      	str	r3, [r7, #96]	; 0x60
	while (latitude_buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 800248a:	e002      	b.n	8002492 <GGA_analysis+0x192>
 800248c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800248e:	3301      	adds	r3, #1
 8002490:	663b      	str	r3, [r7, #96]	; 0x60
 8002492:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002498:	4413      	add	r3, r2
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b2e      	cmp	r3, #46	; 0x2e
 800249e:	d1f5      	bne.n	800248c <GGA_analysis+0x18c>
	j++;
 80024a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024a2:	3301      	adds	r3, #1
 80024a4:	663b      	str	r3, [r7, #96]	; 0x60
	int declen = (strlen(latitude_buffer))-j;  // calculate the number of digit after decimal
 80024a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fd fe8c 	bl	80001c8 <strlen>
 80024b0:	4602      	mov	r2, r0
 80024b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	65bb      	str	r3, [r7, #88]	; 0x58
	int dec = atoi ((char *) latitude_buffer+j);  // conver the decimal part a a separate number
 80024b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80024be:	4413      	add	r3, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f004 ffd1 	bl	8007468 <atoi>
 80024c6:	6578      	str	r0, [r7, #84]	; 0x54
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80024c8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fd ffd5 	bl	800047c <__aeabi_i2d>
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <GGA_analysis+0x2c4>)
 80024d8:	f7fe f964 	bl	80007a4 <__aeabi_ddiv>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4690      	mov	r8, r2
 80024e2:	4699      	mov	r9, r3
 80024e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80024e6:	f7fd ffc9 	bl	800047c <__aeabi_i2d>
 80024ea:	4604      	mov	r4, r0
 80024ec:	460d      	mov	r5, r1
 80024ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f0:	3302      	adds	r3, #2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fd ffc2 	bl	800047c <__aeabi_i2d>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	ec43 2b11 	vmov	d1, r2, r3
 8002500:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 80025b8 <GGA_analysis+0x2b8>
 8002504:	f005 f86a 	bl	80075dc <pow>
 8002508:	ec53 2b10 	vmov	r2, r3, d0
 800250c:	4620      	mov	r0, r4
 800250e:	4629      	mov	r1, r5
 8002510:	f7fe f948 	bl	80007a4 <__aeabi_ddiv>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4640      	mov	r0, r8
 800251a:	4649      	mov	r1, r9
 800251c:	f7fd fe62 	bl	80001e4 <__adddf3>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	f7fe fac2 	bl	8000ab0 <__aeabi_d2f>
 800252c:	4603      	mov	r3, r0
 800252e:	653b      	str	r3, [r7, #80]	; 0x50
	gga->latitude = lat;  // save the lattitude data into the strucure
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002534:	601a      	str	r2, [r3, #0]
	index1++;
 8002536:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <GGA_analysis+0x2c0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3301      	adds	r3, #1
 800253c:	4a20      	ldr	r2, [pc, #128]	; (80025c0 <GGA_analysis+0x2c0>)
 800253e:	6013      	str	r3, [r2, #0]
	int store_index_NS = index1;
 8002540:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <GGA_analysis+0x2c0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	64fb      	str	r3, [r7, #76]	; 0x4c
	gga->NS = input_buffer[index1];  // save the N/S into the structure
 8002546:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <GGA_analysis+0x2c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	781a      	ldrb	r2, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	711a      	strb	r2, [r3, #4]



	index1++;  // ',' after NS character
 8002556:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <GGA_analysis+0x2c0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3301      	adds	r3, #1
 800255c:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <GGA_analysis+0x2c0>)
 800255e:	6013      	str	r3, [r2, #0]
	index1++;  // Reach the first number in the longitude
 8002560:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <GGA_analysis+0x2c0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	4a16      	ldr	r2, [pc, #88]	; (80025c0 <GGA_analysis+0x2c0>)
 8002568:	6013      	str	r3, [r2, #0]
	i=0;
 800256a:	2300      	movs	r3, #0
 800256c:	667b      	str	r3, [r7, #100]	; 0x64
	for(;input_buffer[index1] != ','; longitude_buffer[i++] = input_buffer[index1++]);
 800256e:	e00f      	b.n	8002590 <GGA_analysis+0x290>
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <GGA_analysis+0x2c0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	4912      	ldr	r1, [pc, #72]	; (80025c0 <GGA_analysis+0x2c0>)
 8002578:	600a      	str	r2, [r1, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	441a      	add	r2, r3
 8002580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002582:	1c59      	adds	r1, r3, #1
 8002584:	6679      	str	r1, [r7, #100]	; 0x64
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	3368      	adds	r3, #104	; 0x68
 800258a:	443b      	add	r3, r7
 800258c:	f803 2c44 	strb.w	r2, [r3, #-68]
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <GGA_analysis+0x2c0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b2c      	cmp	r3, #44	; 0x2c
 800259e:	d1e7      	bne.n	8002570 <GGA_analysis+0x270>



	num = (atoi(longitude_buffer));  // change the buffer to the number. It will only convert upto decimal
 80025a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a4:	4618      	mov	r0, r3
 80025a6:	f004 ff5f 	bl	8007468 <atoi>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	j = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	663b      	str	r3, [r7, #96]	; 0x60
	while (longitude_buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 80025b4:	e00b      	b.n	80025ce <GGA_analysis+0x2ce>
 80025b6:	bf00      	nop
 80025b8:	00000000 	.word	0x00000000
 80025bc:	40240000 	.word	0x40240000
 80025c0:	20006410 	.word	0x20006410
 80025c4:	40590000 	.word	0x40590000
 80025c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ca:	3301      	adds	r3, #1
 80025cc:	663b      	str	r3, [r7, #96]	; 0x60
 80025ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80025d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025d4:	4413      	add	r3, r2
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b2e      	cmp	r3, #46	; 0x2e
 80025da:	d1f5      	bne.n	80025c8 <GGA_analysis+0x2c8>
	j++;
 80025dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025de:	3301      	adds	r3, #1
 80025e0:	663b      	str	r3, [r7, #96]	; 0x60
	declen = (strlen(longitude_buffer))-j;  // calculate the number of digit after decimal
 80025e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd fdee 	bl	80001c8 <strlen>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	65bb      	str	r3, [r7, #88]	; 0x58
	dec = atoi ((char *) longitude_buffer+j);  // conver the decimal part a a separate number
 80025f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80025fa:	4413      	add	r3, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f004 ff33 	bl	8007468 <atoi>
 8002602:	6578      	str	r0, [r7, #84]	; 0x54
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8002604:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ff37 	bl	800047c <__aeabi_i2d>
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	4b5d      	ldr	r3, [pc, #372]	; (8002788 <GGA_analysis+0x488>)
 8002614:	f7fe f8c6 	bl	80007a4 <__aeabi_ddiv>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4690      	mov	r8, r2
 800261e:	4699      	mov	r9, r3
 8002620:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002622:	f7fd ff2b 	bl	800047c <__aeabi_i2d>
 8002626:	4604      	mov	r4, r0
 8002628:	460d      	mov	r5, r1
 800262a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800262c:	3302      	adds	r3, #2
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd ff24 	bl	800047c <__aeabi_i2d>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	ec43 2b11 	vmov	d1, r2, r3
 800263c:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8002780 <GGA_analysis+0x480>
 8002640:	f004 ffcc 	bl	80075dc <pow>
 8002644:	ec53 2b10 	vmov	r2, r3, d0
 8002648:	4620      	mov	r0, r4
 800264a:	4629      	mov	r1, r5
 800264c:	f7fe f8aa 	bl	80007a4 <__aeabi_ddiv>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4640      	mov	r0, r8
 8002656:	4649      	mov	r1, r9
 8002658:	f7fd fdc4 	bl	80001e4 <__adddf3>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	f7fe fa24 	bl	8000ab0 <__aeabi_d2f>
 8002668:	4603      	mov	r3, r0
 800266a:	653b      	str	r3, [r7, #80]	; 0x50
	gga->longitude = lat;  // save the longitude data into the strucure
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002670:	609a      	str	r2, [r3, #8]
	index1++;
 8002672:	4b46      	ldr	r3, [pc, #280]	; (800278c <GGA_analysis+0x48c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3301      	adds	r3, #1
 8002678:	4a44      	ldr	r2, [pc, #272]	; (800278c <GGA_analysis+0x48c>)
 800267a:	6013      	str	r3, [r2, #0]
	int store_index_EW = index1;
 800267c:	4b43      	ldr	r3, [pc, #268]	; (800278c <GGA_analysis+0x48c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	64bb      	str	r3, [r7, #72]	; 0x48
	gga->EW = input_buffer[index1];  // save the E/W into the structure
 8002682:	4b42      	ldr	r3, [pc, #264]	; (800278c <GGA_analysis+0x48c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4413      	add	r3, r2
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	index1++;   // ',' after E/W
 8002692:	4b3e      	ldr	r3, [pc, #248]	; (800278c <GGA_analysis+0x48c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	4a3c      	ldr	r2, [pc, #240]	; (800278c <GGA_analysis+0x48c>)
 800269a:	6013      	str	r3, [r2, #0]
	index1++;   // position fix
 800269c:	4b3b      	ldr	r3, [pc, #236]	; (800278c <GGA_analysis+0x48c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3301      	adds	r3, #1
 80026a2:	4a3a      	ldr	r2, [pc, #232]	; (800278c <GGA_analysis+0x48c>)
 80026a4:	6013      	str	r3, [r2, #0]
	index1++;   // ',' after position fix;
 80026a6:	4b39      	ldr	r3, [pc, #228]	; (800278c <GGA_analysis+0x48c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3301      	adds	r3, #1
 80026ac:	4a37      	ldr	r2, [pc, #220]	; (800278c <GGA_analysis+0x48c>)
 80026ae:	6013      	str	r3, [r2, #0]

	// number of sattelites
	index1++;  // Reach the first number in the satellites
 80026b0:	4b36      	ldr	r3, [pc, #216]	; (800278c <GGA_analysis+0x48c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3301      	adds	r3, #1
 80026b6:	4a35      	ldr	r2, [pc, #212]	; (800278c <GGA_analysis+0x48c>)
 80026b8:	6013      	str	r3, [r2, #0]
	i=0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	667b      	str	r3, [r7, #100]	; 0x64
	for(;input_buffer[index1] != ','; satellite_buffer[i++] = input_buffer[index1++]);
 80026be:	e00f      	b.n	80026e0 <GGA_analysis+0x3e0>
 80026c0:	4b32      	ldr	r3, [pc, #200]	; (800278c <GGA_analysis+0x48c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	4931      	ldr	r1, [pc, #196]	; (800278c <GGA_analysis+0x48c>)
 80026c8:	600a      	str	r2, [r1, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	441a      	add	r2, r3
 80026d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026d2:	1c59      	adds	r1, r3, #1
 80026d4:	6679      	str	r1, [r7, #100]	; 0x64
 80026d6:	7812      	ldrb	r2, [r2, #0]
 80026d8:	3368      	adds	r3, #104	; 0x68
 80026da:	443b      	add	r3, r7
 80026dc:	f803 2c50 	strb.w	r2, [r3, #-80]
 80026e0:	4b2a      	ldr	r3, [pc, #168]	; (800278c <GGA_analysis+0x48c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b2c      	cmp	r3, #44	; 0x2c
 80026ee:	d1e7      	bne.n	80026c0 <GGA_analysis+0x3c0>


	gga->numofsat = atoi(satellite_buffer);   // convert the buffer to number and save into the structure
 80026f0:	f107 0318 	add.w	r3, r7, #24
 80026f4:	4618      	mov	r0, r3
 80026f6:	f004 feb7 	bl	8007468 <atoi>
 80026fa:	4602      	mov	r2, r0
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	index1++;
 8002700:	4b22      	ldr	r3, [pc, #136]	; (800278c <GGA_analysis+0x48c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	3301      	adds	r3, #1
 8002706:	4a21      	ldr	r2, [pc, #132]	; (800278c <GGA_analysis+0x48c>)
 8002708:	6013      	str	r3, [r2, #0]
	while (input_buffer[index1] != ',') index1++;
 800270a:	e004      	b.n	8002716 <GGA_analysis+0x416>
 800270c:	4b1f      	ldr	r3, [pc, #124]	; (800278c <GGA_analysis+0x48c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3301      	adds	r3, #1
 8002712:	4a1e      	ldr	r2, [pc, #120]	; (800278c <GGA_analysis+0x48c>)
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <GGA_analysis+0x48c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4413      	add	r3, r2
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b2c      	cmp	r3, #44	; 0x2c
 8002724:	d1f2      	bne.n	800270c <GGA_analysis+0x40c>


	index1++;
 8002726:	4b19      	ldr	r3, [pc, #100]	; (800278c <GGA_analysis+0x48c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3301      	adds	r3, #1
 800272c:	4a17      	ldr	r2, [pc, #92]	; (800278c <GGA_analysis+0x48c>)
 800272e:	6013      	str	r3, [r2, #0]
	i=0;
 8002730:	2300      	movs	r3, #0
 8002732:	667b      	str	r3, [r7, #100]	; 0x64
	for(;input_buffer[index1] != ','; altitude_buffer[i++] = input_buffer[index1++]);
 8002734:	e00f      	b.n	8002756 <GGA_analysis+0x456>
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <GGA_analysis+0x48c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	4913      	ldr	r1, [pc, #76]	; (800278c <GGA_analysis+0x48c>)
 800273e:	600a      	str	r2, [r1, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	441a      	add	r2, r3
 8002746:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002748:	1c59      	adds	r1, r3, #1
 800274a:	6679      	str	r1, [r7, #100]	; 0x64
 800274c:	7812      	ldrb	r2, [r2, #0]
 800274e:	3368      	adds	r3, #104	; 0x68
 8002750:	443b      	add	r3, r7
 8002752:	f803 2c5c 	strb.w	r2, [r3, #-92]
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <GGA_analysis+0x48c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b2c      	cmp	r3, #44	; 0x2c
 8002764:	d1e7      	bne.n	8002736 <GGA_analysis+0x436>


	num = (atoi(altitude_buffer));
 8002766:	f107 030c 	add.w	r3, r7, #12
 800276a:	4618      	mov	r0, r3
 800276c:	f004 fe7c 	bl	8007468 <atoi>
 8002770:	4603      	mov	r3, r0
 8002772:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	j = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	663b      	str	r3, [r7, #96]	; 0x60
	while (altitude_buffer[j] != '.') j++;
 800277a:	e00c      	b.n	8002796 <GGA_analysis+0x496>
 800277c:	f3af 8000 	nop.w
 8002780:	00000000 	.word	0x00000000
 8002784:	40240000 	.word	0x40240000
 8002788:	40590000 	.word	0x40590000
 800278c:	20006410 	.word	0x20006410
 8002790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002792:	3301      	adds	r3, #1
 8002794:	663b      	str	r3, [r7, #96]	; 0x60
 8002796:	f107 020c 	add.w	r2, r7, #12
 800279a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800279c:	4413      	add	r3, r2
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b2e      	cmp	r3, #46	; 0x2e
 80027a2:	d1f5      	bne.n	8002790 <GGA_analysis+0x490>
	j++;
 80027a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027a6:	3301      	adds	r3, #1
 80027a8:	663b      	str	r3, [r7, #96]	; 0x60
	declen = (strlen(altitude_buffer))-j;
 80027aa:	f107 030c 	add.w	r3, r7, #12
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fd fd0a 	bl	80001c8 <strlen>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	65bb      	str	r3, [r7, #88]	; 0x58
	dec = atoi ((char *) altitude_buffer+j);
 80027bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027be:	f107 020c 	add.w	r2, r7, #12
 80027c2:	4413      	add	r3, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f004 fe4f 	bl	8007468 <atoi>
 80027ca:	6578      	str	r0, [r7, #84]	; 0x54
	lat = (num) + (dec/pow(10, (declen)));
 80027cc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fe53 	bl	800047c <__aeabi_i2d>
 80027d6:	4604      	mov	r4, r0
 80027d8:	460d      	mov	r5, r1
 80027da:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80027dc:	f7fd fe4e 	bl	800047c <__aeabi_i2d>
 80027e0:	4680      	mov	r8, r0
 80027e2:	4689      	mov	r9, r1
 80027e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80027e6:	f7fd fe49 	bl	800047c <__aeabi_i2d>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	ec43 2b11 	vmov	d1, r2, r3
 80027f2:	ed9f 0b51 	vldr	d0, [pc, #324]	; 8002938 <GGA_analysis+0x638>
 80027f6:	f004 fef1 	bl	80075dc <pow>
 80027fa:	ec53 2b10 	vmov	r2, r3, d0
 80027fe:	4640      	mov	r0, r8
 8002800:	4649      	mov	r1, r9
 8002802:	f7fd ffcf 	bl	80007a4 <__aeabi_ddiv>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4620      	mov	r0, r4
 800280c:	4629      	mov	r1, r5
 800280e:	f7fd fce9 	bl	80001e4 <__adddf3>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4610      	mov	r0, r2
 8002818:	4619      	mov	r1, r3
 800281a:	f7fe f949 	bl	8000ab0 <__aeabi_d2f>
 800281e:	4603      	mov	r3, r0
 8002820:	653b      	str	r3, [r7, #80]	; 0x50
	gga->altitude = lat;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002826:	621a      	str	r2, [r3, #32]

	index1++;
 8002828:	4b45      	ldr	r3, [pc, #276]	; (8002940 <GGA_analysis+0x640>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3301      	adds	r3, #1
 800282e:	4a44      	ldr	r2, [pc, #272]	; (8002940 <GGA_analysis+0x640>)
 8002830:	6013      	str	r3, [r2, #0]
	gga->unit = input_buffer[index1];
 8002832:	4b43      	ldr	r3, [pc, #268]	; (8002940 <GGA_analysis+0x640>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	781a      	ldrb	r2, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	f_mount(&fs2, "", 0);
 8002844:	2200      	movs	r2, #0
 8002846:	493f      	ldr	r1, [pc, #252]	; (8002944 <GGA_analysis+0x644>)
 8002848:	483f      	ldr	r0, [pc, #252]	; (8002948 <GGA_analysis+0x648>)
 800284a:	f003 fddd 	bl	8006408 <f_mount>
	f_open(&fil2, "GGA_DATA.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 800284e:	2213      	movs	r2, #19
 8002850:	493e      	ldr	r1, [pc, #248]	; (800294c <GGA_analysis+0x64c>)
 8002852:	483f      	ldr	r0, [pc, #252]	; (8002950 <GGA_analysis+0x650>)
 8002854:	f003 fe1e 	bl	8006494 <f_open>
	f_lseek(&fil2, f_size(&fil2));
 8002858:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <GGA_analysis+0x650>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4619      	mov	r1, r3
 800285e:	483c      	ldr	r0, [pc, #240]	; (8002950 <GGA_analysis+0x650>)
 8002860:	f004 fa20 	bl	8006ca4 <f_lseek>

	f_puts("Timestamp: ", &fil2);
 8002864:	493a      	ldr	r1, [pc, #232]	; (8002950 <GGA_analysis+0x650>)
 8002866:	483b      	ldr	r0, [pc, #236]	; (8002954 <GGA_analysis+0x654>)
 8002868:	f004 fcb7 	bl	80071da <f_puts>
	f_write(&fil2, time_buffer, sizeof(time_buffer), &bw2);
 800286c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002870:	4b39      	ldr	r3, [pc, #228]	; (8002958 <GGA_analysis+0x658>)
 8002872:	220c      	movs	r2, #12
 8002874:	4836      	ldr	r0, [pc, #216]	; (8002950 <GGA_analysis+0x650>)
 8002876:	f003 ffd9 	bl	800682c <f_write>
	f_puts("\n", &fil2);
 800287a:	4935      	ldr	r1, [pc, #212]	; (8002950 <GGA_analysis+0x650>)
 800287c:	4837      	ldr	r0, [pc, #220]	; (800295c <GGA_analysis+0x65c>)
 800287e:	f004 fcac 	bl	80071da <f_puts>

	f_puts("Latitude: ", &fil2);
 8002882:	4933      	ldr	r1, [pc, #204]	; (8002950 <GGA_analysis+0x650>)
 8002884:	4836      	ldr	r0, [pc, #216]	; (8002960 <GGA_analysis+0x660>)
 8002886:	f004 fca8 	bl	80071da <f_puts>
	f_write(&fil2, latitude_buffer, sizeof(latitude_buffer), &bw2);
 800288a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800288e:	4b32      	ldr	r3, [pc, #200]	; (8002958 <GGA_analysis+0x658>)
 8002890:	220c      	movs	r2, #12
 8002892:	482f      	ldr	r0, [pc, #188]	; (8002950 <GGA_analysis+0x650>)
 8002894:	f003 ffca 	bl	800682c <f_write>
	f_write(&fil2, input_buffer[store_index_NS], sizeof(char), &bw2);
 8002898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	4619      	mov	r1, r3
 80028a2:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <GGA_analysis+0x658>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	482a      	ldr	r0, [pc, #168]	; (8002950 <GGA_analysis+0x650>)
 80028a8:	f003 ffc0 	bl	800682c <f_write>
	f_puts("\n", &fil2);
 80028ac:	4928      	ldr	r1, [pc, #160]	; (8002950 <GGA_analysis+0x650>)
 80028ae:	482b      	ldr	r0, [pc, #172]	; (800295c <GGA_analysis+0x65c>)
 80028b0:	f004 fc93 	bl	80071da <f_puts>


	f_puts("Longitude: ", &fil2);
 80028b4:	4926      	ldr	r1, [pc, #152]	; (8002950 <GGA_analysis+0x650>)
 80028b6:	482b      	ldr	r0, [pc, #172]	; (8002964 <GGA_analysis+0x664>)
 80028b8:	f004 fc8f 	bl	80071da <f_puts>
	f_write(&fil2, longitude_buffer, sizeof(longitude_buffer), &bw2);
 80028bc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80028c0:	4b25      	ldr	r3, [pc, #148]	; (8002958 <GGA_analysis+0x658>)
 80028c2:	220c      	movs	r2, #12
 80028c4:	4822      	ldr	r0, [pc, #136]	; (8002950 <GGA_analysis+0x650>)
 80028c6:	f003 ffb1 	bl	800682c <f_write>
  f_write(&fil2, input_buffer[store_index_EW], sizeof(char), &bw2);
 80028ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	4619      	mov	r1, r3
 80028d4:	4b20      	ldr	r3, [pc, #128]	; (8002958 <GGA_analysis+0x658>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	481d      	ldr	r0, [pc, #116]	; (8002950 <GGA_analysis+0x650>)
 80028da:	f003 ffa7 	bl	800682c <f_write>
	f_puts("\n", &fil2);
 80028de:	491c      	ldr	r1, [pc, #112]	; (8002950 <GGA_analysis+0x650>)
 80028e0:	481e      	ldr	r0, [pc, #120]	; (800295c <GGA_analysis+0x65c>)
 80028e2:	f004 fc7a 	bl	80071da <f_puts>

	f_puts("Number of satellites: ", &fil2);
 80028e6:	491a      	ldr	r1, [pc, #104]	; (8002950 <GGA_analysis+0x650>)
 80028e8:	481f      	ldr	r0, [pc, #124]	; (8002968 <GGA_analysis+0x668>)
 80028ea:	f004 fc76 	bl	80071da <f_puts>
	f_write(&fil2, satellite_buffer, sizeof(satellite_buffer), &bw2);
 80028ee:	f107 0118 	add.w	r1, r7, #24
 80028f2:	4b19      	ldr	r3, [pc, #100]	; (8002958 <GGA_analysis+0x658>)
 80028f4:	220c      	movs	r2, #12
 80028f6:	4816      	ldr	r0, [pc, #88]	; (8002950 <GGA_analysis+0x650>)
 80028f8:	f003 ff98 	bl	800682c <f_write>
	f_puts("\n", &fil2);
 80028fc:	4914      	ldr	r1, [pc, #80]	; (8002950 <GGA_analysis+0x650>)
 80028fe:	4817      	ldr	r0, [pc, #92]	; (800295c <GGA_analysis+0x65c>)
 8002900:	f004 fc6b 	bl	80071da <f_puts>

	f_puts("Altitude: ", &fil2);
 8002904:	4912      	ldr	r1, [pc, #72]	; (8002950 <GGA_analysis+0x650>)
 8002906:	4819      	ldr	r0, [pc, #100]	; (800296c <GGA_analysis+0x66c>)
 8002908:	f004 fc67 	bl	80071da <f_puts>
	f_write(&fil2, altitude_buffer, sizeof(altitude_buffer), &bw2);
 800290c:	f107 010c 	add.w	r1, r7, #12
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <GGA_analysis+0x658>)
 8002912:	220c      	movs	r2, #12
 8002914:	480e      	ldr	r0, [pc, #56]	; (8002950 <GGA_analysis+0x650>)
 8002916:	f003 ff89 	bl	800682c <f_write>
	f_puts("\n", &fil2);
 800291a:	490d      	ldr	r1, [pc, #52]	; (8002950 <GGA_analysis+0x650>)
 800291c:	480f      	ldr	r0, [pc, #60]	; (800295c <GGA_analysis+0x65c>)
 800291e:	f004 fc5c 	bl	80071da <f_puts>


	f_close(&fil2);
 8002922:	480b      	ldr	r0, [pc, #44]	; (8002950 <GGA_analysis+0x650>)
 8002924:	f004 f994 	bl	8006c50 <f_close>
 8002928:	e000      	b.n	800292c <GGA_analysis+0x62c>
	if (strlen(latitude_buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 800292a:	bf00      	nop
}
 800292c:	3768      	adds	r7, #104	; 0x68
 800292e:	46bd      	mov	sp, r7
 8002930:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002934:	f3af 8000 	nop.w
 8002938:	00000000 	.word	0x00000000
 800293c:	40240000 	.word	0x40240000
 8002940:	20006410 	.word	0x20006410
 8002944:	080084fc 	.word	0x080084fc
 8002948:	20002338 	.word	0x20002338
 800294c:	08008500 	.word	0x08008500
 8002950:	20003370 	.word	0x20003370
 8002954:	08008510 	.word	0x08008510
 8002958:	200043a0 	.word	0x200043a0
 800295c:	0800851c 	.word	0x0800851c
 8002960:	08008520 	.word	0x08008520
 8002964:	0800852c 	.word	0x0800852c
 8002968:	08008538 	.word	0x08008538
 800296c:	08008550 	.word	0x08008550

08002970 <valid_data_check>:

int valid_data_check(char *input_buffer)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
	int comma_count = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 60; i++)
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	e011      	b.n	80029a6 <valid_data_check+0x36>
	{
		if(input_buffer[i] == ',')
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	4413      	add	r3, r2
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b2c      	cmp	r3, #44	; 0x2c
 800298c:	d108      	bne.n	80029a0 <valid_data_check+0x30>
		{
			comma_count++;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3301      	adds	r3, #1
 8002992:	60fb      	str	r3, [r7, #12]
			if(comma_count == VALID_POS)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d102      	bne.n	80029a0 <valid_data_check+0x30>
			return i+1;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	3301      	adds	r3, #1
 800299e:	e007      	b.n	80029b0 <valid_data_check+0x40>
	for(int i = 0; i < 60; i++)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	3301      	adds	r3, #1
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b3b      	cmp	r3, #59	; 0x3b
 80029aa:	ddea      	ble.n	8002982 <valid_data_check+0x12>
		}
	}
	return -1;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <speed_data_check>:


int speed_data_check(char *input_buffer)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	int comma_count = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < 60; i++)
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	e011      	b.n	80029f2 <speed_data_check+0x36>
		{
			if(input_buffer[i] == ',')
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b2c      	cmp	r3, #44	; 0x2c
 80029d8:	d108      	bne.n	80029ec <speed_data_check+0x30>
			{
				comma_count++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3301      	adds	r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
				if(comma_count == SPEED_POS)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b07      	cmp	r3, #7
 80029e4:	d102      	bne.n	80029ec <speed_data_check+0x30>
				return i+1;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3301      	adds	r3, #1
 80029ea:	e007      	b.n	80029fc <speed_data_check+0x40>
		for(int i = 0; i < 60; i++)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	3301      	adds	r3, #1
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b3b      	cmp	r3, #59	; 0x3b
 80029f6:	ddea      	ble.n	80029ce <speed_data_check+0x12>
			}
		}
		return -1;
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <RMC_analysis>:

void RMC_analysis(char *input_buffer, RMCSTRUCT *rmc)
{
 8002a08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a0c:	b096      	sub	sp, #88	; 0x58
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]




	index1 = 0;
 8002a14:	4ba0      	ldr	r3, [pc, #640]	; (8002c98 <RMC_analysis+0x290>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
	char speed_buffer[12] = {0};
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
 8002a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
	char course_buffer[12] = {0};
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	f107 0318 	add.w	r3, r7, #24
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
	char date_buffer[12] = {0};
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	f107 030c 	add.w	r3, r7, #12
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]


	int i = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	657b      	str	r3, [r7, #84]	; 0x54
	index1 = valid_data_check(input_buffer);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff91 	bl	8002970 <valid_data_check>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4a91      	ldr	r2, [pc, #580]	; (8002c98 <RMC_analysis+0x290>)
 8002a52:	6013      	str	r3, [r2, #0]
	if (input_buffer[index1] == 'A')
 8002a54:	4b90      	ldr	r3, [pc, #576]	; (8002c98 <RMC_analysis+0x290>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b41      	cmp	r3, #65	; 0x41
 8002a62:	d10e      	bne.n	8002a82 <RMC_analysis+0x7a>
	{
		rmc->fixbit_rmc = 1;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2201      	movs	r2, #1
 8002a68:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->fixbit_rmc =0;
		return;
	}
	index1 = 0;
 8002a6a:	4b8b      	ldr	r3, [pc, #556]	; (8002c98 <RMC_analysis+0x290>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
	index1 = speed_data_check(input_buffer);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ffa3 	bl	80029bc <speed_data_check>
 8002a76:	4603      	mov	r3, r0
 8002a78:	4a87      	ldr	r2, [pc, #540]	; (8002c98 <RMC_analysis+0x290>)
 8002a7a:	6013      	str	r3, [r2, #0]

	i=0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	657b      	str	r3, [r7, #84]	; 0x54

	for(;input_buffer[index1] != ','; speed_buffer[i++] = input_buffer[index1++]);
 8002a80:	e013      	b.n	8002aaa <RMC_analysis+0xa2>
		rmc->fixbit_rmc =0;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2200      	movs	r2, #0
 8002a86:	615a      	str	r2, [r3, #20]
 8002a88:	e187      	b.n	8002d9a <RMC_analysis+0x392>
	for(;input_buffer[index1] != ','; speed_buffer[i++] = input_buffer[index1++]);
 8002a8a:	4b83      	ldr	r3, [pc, #524]	; (8002c98 <RMC_analysis+0x290>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	4981      	ldr	r1, [pc, #516]	; (8002c98 <RMC_analysis+0x290>)
 8002a92:	600a      	str	r2, [r1, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	441a      	add	r2, r3
 8002a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9c:	1c59      	adds	r1, r3, #1
 8002a9e:	6579      	str	r1, [r7, #84]	; 0x54
 8002aa0:	7812      	ldrb	r2, [r2, #0]
 8002aa2:	3358      	adds	r3, #88	; 0x58
 8002aa4:	443b      	add	r3, r7
 8002aa6:	f803 2c38 	strb.w	r2, [r3, #-56]
 8002aaa:	4b7b      	ldr	r3, [pc, #492]	; (8002c98 <RMC_analysis+0x290>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b2c      	cmp	r3, #44	; 0x2c
 8002ab8:	d1e7      	bne.n	8002a8a <RMC_analysis+0x82>


	if (strlen (speed_buffer) > 0){
 8002aba:	f107 0320 	add.w	r3, r7, #32
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d057      	beq.n	8002b74 <RMC_analysis+0x16c>
		int16_t num = (atoi(speed_buffer));
 8002ac4:	f107 0320 	add.w	r3, r7, #32
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f004 fccd 	bl	8007468 <atoi>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		int j = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	653b      	str	r3, [r7, #80]	; 0x50
		while (speed_buffer[j] != '.') j++;
 8002ad8:	e002      	b.n	8002ae0 <RMC_analysis+0xd8>
 8002ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002adc:	3301      	adds	r3, #1
 8002ade:	653b      	str	r3, [r7, #80]	; 0x50
 8002ae0:	f107 0220 	add.w	r2, r7, #32
 8002ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b2e      	cmp	r3, #46	; 0x2e
 8002aec:	d1f5      	bne.n	8002ada <RMC_analysis+0xd2>
		j++;
 8002aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af0:	3301      	adds	r3, #1
 8002af2:	653b      	str	r3, [r7, #80]	; 0x50
		int declen = (strlen(speed_buffer))-j;
 8002af4:	f107 0320 	add.w	r3, r7, #32
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fd fb65 	bl	80001c8 <strlen>
 8002afe:	4602      	mov	r2, r0
 8002b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	647b      	str	r3, [r7, #68]	; 0x44
		int dec = atoi ((char *) speed_buffer+j);
 8002b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b08:	f107 0220 	add.w	r2, r7, #32
 8002b0c:	4413      	add	r3, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f004 fcaa 	bl	8007468 <atoi>
 8002b14:	6438      	str	r0, [r7, #64]	; 0x40
		float lat = num + (dec/pow(10, (declen)));
 8002b16:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fd fcae 	bl	800047c <__aeabi_i2d>
 8002b20:	4604      	mov	r4, r0
 8002b22:	460d      	mov	r5, r1
 8002b24:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002b26:	f7fd fca9 	bl	800047c <__aeabi_i2d>
 8002b2a:	4680      	mov	r8, r0
 8002b2c:	4689      	mov	r9, r1
 8002b2e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b30:	f7fd fca4 	bl	800047c <__aeabi_i2d>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	ec43 2b11 	vmov	d1, r2, r3
 8002b3c:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8002c90 <RMC_analysis+0x288>
 8002b40:	f004 fd4c 	bl	80075dc <pow>
 8002b44:	ec53 2b10 	vmov	r2, r3, d0
 8002b48:	4640      	mov	r0, r8
 8002b4a:	4649      	mov	r1, r9
 8002b4c:	f7fd fe2a 	bl	80007a4 <__aeabi_ddiv>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4620      	mov	r0, r4
 8002b56:	4629      	mov	r1, r5
 8002b58:	f7fd fb44 	bl	80001e4 <__adddf3>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	f7fd ffa4 	bl	8000ab0 <__aeabi_d2f>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
		rmc->speed = lat;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	e003      	b.n	8002b7c <RMC_analysis+0x174>
	}
	else rmc->speed = 0;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	60da      	str	r2, [r3, #12]

	index1++;
 8002b7c:	4b46      	ldr	r3, [pc, #280]	; (8002c98 <RMC_analysis+0x290>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3301      	adds	r3, #1
 8002b82:	4a45      	ldr	r2, [pc, #276]	; (8002c98 <RMC_analysis+0x290>)
 8002b84:	6013      	str	r3, [r2, #0]
	i=0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	657b      	str	r3, [r7, #84]	; 0x54
	for(;input_buffer[index1] != ','; course_buffer[i++] = input_buffer[index1++]);
 8002b8a:	e00f      	b.n	8002bac <RMC_analysis+0x1a4>
 8002b8c:	4b42      	ldr	r3, [pc, #264]	; (8002c98 <RMC_analysis+0x290>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	4941      	ldr	r1, [pc, #260]	; (8002c98 <RMC_analysis+0x290>)
 8002b94:	600a      	str	r2, [r1, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	441a      	add	r2, r3
 8002b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9e:	1c59      	adds	r1, r3, #1
 8002ba0:	6579      	str	r1, [r7, #84]	; 0x54
 8002ba2:	7812      	ldrb	r2, [r2, #0]
 8002ba4:	3358      	adds	r3, #88	; 0x58
 8002ba6:	443b      	add	r3, r7
 8002ba8:	f803 2c44 	strb.w	r2, [r3, #-68]
 8002bac:	4b3a      	ldr	r3, [pc, #232]	; (8002c98 <RMC_analysis+0x290>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b2c      	cmp	r3, #44	; 0x2c
 8002bba:	d1e7      	bne.n	8002b8c <RMC_analysis+0x184>


	if (strlen (course_buffer) > 0){
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d056      	beq.n	8002c74 <RMC_analysis+0x26c>
		int16_t num = (atoi(course_buffer));
 8002bc6:	f107 0314 	add.w	r3, r7, #20
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f004 fc4c 	bl	8007468 <atoi>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	877b      	strh	r3, [r7, #58]	; 0x3a
		int j = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
		while (course_buffer[j] != '.') j++;
 8002bd8:	e002      	b.n	8002be0 <RMC_analysis+0x1d8>
 8002bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bdc:	3301      	adds	r3, #1
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be0:	f107 0214 	add.w	r2, r7, #20
 8002be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be6:	4413      	add	r3, r2
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b2e      	cmp	r3, #46	; 0x2e
 8002bec:	d1f5      	bne.n	8002bda <RMC_analysis+0x1d2>
		j++;
 8002bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
		int declen = (strlen(course_buffer))-j;
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fae5 	bl	80001c8 <strlen>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	637b      	str	r3, [r7, #52]	; 0x34
		int dec = atoi ((char *) course_buffer+j);
 8002c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c08:	f107 0214 	add.w	r2, r7, #20
 8002c0c:	4413      	add	r3, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f004 fc2a 	bl	8007468 <atoi>
 8002c14:	6338      	str	r0, [r7, #48]	; 0x30
		float lat = num + (dec/pow(10, (declen)));
 8002c16:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fc2e 	bl	800047c <__aeabi_i2d>
 8002c20:	4604      	mov	r4, r0
 8002c22:	460d      	mov	r5, r1
 8002c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c26:	f7fd fc29 	bl	800047c <__aeabi_i2d>
 8002c2a:	4680      	mov	r8, r0
 8002c2c:	4689      	mov	r9, r1
 8002c2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c30:	f7fd fc24 	bl	800047c <__aeabi_i2d>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	ec43 2b11 	vmov	d1, r2, r3
 8002c3c:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8002c90 <RMC_analysis+0x288>
 8002c40:	f004 fccc 	bl	80075dc <pow>
 8002c44:	ec53 2b10 	vmov	r2, r3, d0
 8002c48:	4640      	mov	r0, r8
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	f7fd fdaa 	bl	80007a4 <__aeabi_ddiv>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4620      	mov	r0, r4
 8002c56:	4629      	mov	r1, r5
 8002c58:	f7fd fac4 	bl	80001e4 <__adddf3>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	f7fd ff24 	bl	8000ab0 <__aeabi_d2f>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
		rmc->course = lat;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c70:	611a      	str	r2, [r3, #16]
 8002c72:	e003      	b.n	8002c7c <RMC_analysis+0x274>
	}
	else
		{
			rmc->course = 0;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
		}

	index1++;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <RMC_analysis+0x290>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	4a05      	ldr	r2, [pc, #20]	; (8002c98 <RMC_analysis+0x290>)
 8002c84:	6013      	str	r3, [r2, #0]
	i=0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	657b      	str	r3, [r7, #84]	; 0x54
	for(;input_buffer[index1] != ','; date_buffer[i++] = input_buffer[index1++]);
 8002c8a:	e017      	b.n	8002cbc <RMC_analysis+0x2b4>
 8002c8c:	f3af 8000 	nop.w
 8002c90:	00000000 	.word	0x00000000
 8002c94:	40240000 	.word	0x40240000
 8002c98:	20006410 	.word	0x20006410
 8002c9c:	4b41      	ldr	r3, [pc, #260]	; (8002da4 <RMC_analysis+0x39c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	4940      	ldr	r1, [pc, #256]	; (8002da4 <RMC_analysis+0x39c>)
 8002ca4:	600a      	str	r2, [r1, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	441a      	add	r2, r3
 8002cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cae:	1c59      	adds	r1, r3, #1
 8002cb0:	6579      	str	r1, [r7, #84]	; 0x54
 8002cb2:	7812      	ldrb	r2, [r2, #0]
 8002cb4:	3358      	adds	r3, #88	; 0x58
 8002cb6:	443b      	add	r3, r7
 8002cb8:	f803 2c50 	strb.w	r2, [r3, #-80]
 8002cbc:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <RMC_analysis+0x39c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b2c      	cmp	r3, #44	; 0x2c
 8002cca:	d1e7      	bne.n	8002c9c <RMC_analysis+0x294>


	rmc->Day = (date_buffer[0] - '0') * 10 + (date_buffer[1] - '0');
 8002ccc:	7a3b      	ldrb	r3, [r7, #8]
 8002cce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	461a      	mov	r2, r3
 8002cdc:	7a7b      	ldrb	r3, [r7, #9]
 8002cde:	3b30      	subs	r3, #48	; 0x30
 8002ce0:	441a      	add	r2, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	601a      	str	r2, [r3, #0]
	rmc->Mon = (date_buffer[2] - '0') * 10 + (date_buffer[3] - '0');
 8002ce6:	7abb      	ldrb	r3, [r7, #10]
 8002ce8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	7afb      	ldrb	r3, [r7, #11]
 8002cf8:	3b30      	subs	r3, #48	; 0x30
 8002cfa:	441a      	add	r2, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
	rmc->Yr = (date_buffer[4] - '0') * 10 + (date_buffer[5] - '0');
 8002d00:	7b3b      	ldrb	r3, [r7, #12]
 8002d02:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	461a      	mov	r2, r3
 8002d10:	7b7b      	ldrb	r3, [r7, #13]
 8002d12:	3b30      	subs	r3, #48	; 0x30
 8002d14:	441a      	add	r2, r3
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	609a      	str	r2, [r3, #8]

	f_mount(&fs3, "", 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	4922      	ldr	r1, [pc, #136]	; (8002da8 <RMC_analysis+0x3a0>)
 8002d1e:	4823      	ldr	r0, [pc, #140]	; (8002dac <RMC_analysis+0x3a4>)
 8002d20:	f003 fb72 	bl	8006408 <f_mount>
	f_open(&fil3, "RMC_DATA.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8002d24:	2213      	movs	r2, #19
 8002d26:	4922      	ldr	r1, [pc, #136]	; (8002db0 <RMC_analysis+0x3a8>)
 8002d28:	4822      	ldr	r0, [pc, #136]	; (8002db4 <RMC_analysis+0x3ac>)
 8002d2a:	f003 fbb3 	bl	8006494 <f_open>
	f_lseek(&fil3, f_size(&fil3));
 8002d2e:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <RMC_analysis+0x3ac>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	4619      	mov	r1, r3
 8002d34:	481f      	ldr	r0, [pc, #124]	; (8002db4 <RMC_analysis+0x3ac>)
 8002d36:	f003 ffb5 	bl	8006ca4 <f_lseek>

	f_puts("Speed: ", &fil3);
 8002d3a:	491e      	ldr	r1, [pc, #120]	; (8002db4 <RMC_analysis+0x3ac>)
 8002d3c:	481e      	ldr	r0, [pc, #120]	; (8002db8 <RMC_analysis+0x3b0>)
 8002d3e:	f004 fa4c 	bl	80071da <f_puts>
	f_write(&fil3, speed_buffer, sizeof(speed_buffer), &bw3);
 8002d42:	f107 0120 	add.w	r1, r7, #32
 8002d46:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <RMC_analysis+0x3b4>)
 8002d48:	220c      	movs	r2, #12
 8002d4a:	481a      	ldr	r0, [pc, #104]	; (8002db4 <RMC_analysis+0x3ac>)
 8002d4c:	f003 fd6e 	bl	800682c <f_write>
	f_puts("\n", &fil3);
 8002d50:	4918      	ldr	r1, [pc, #96]	; (8002db4 <RMC_analysis+0x3ac>)
 8002d52:	481b      	ldr	r0, [pc, #108]	; (8002dc0 <RMC_analysis+0x3b8>)
 8002d54:	f004 fa41 	bl	80071da <f_puts>

	f_puts("Course: ", &fil3);
 8002d58:	4916      	ldr	r1, [pc, #88]	; (8002db4 <RMC_analysis+0x3ac>)
 8002d5a:	481a      	ldr	r0, [pc, #104]	; (8002dc4 <RMC_analysis+0x3bc>)
 8002d5c:	f004 fa3d 	bl	80071da <f_puts>
	f_write(&fil3, course_buffer, sizeof(course_buffer), &bw3);
 8002d60:	f107 0114 	add.w	r1, r7, #20
 8002d64:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <RMC_analysis+0x3b4>)
 8002d66:	220c      	movs	r2, #12
 8002d68:	4812      	ldr	r0, [pc, #72]	; (8002db4 <RMC_analysis+0x3ac>)
 8002d6a:	f003 fd5f 	bl	800682c <f_write>
	f_puts("\n", &fil3);
 8002d6e:	4911      	ldr	r1, [pc, #68]	; (8002db4 <RMC_analysis+0x3ac>)
 8002d70:	4813      	ldr	r0, [pc, #76]	; (8002dc0 <RMC_analysis+0x3b8>)
 8002d72:	f004 fa32 	bl	80071da <f_puts>

	f_puts("Date: ", &fil3);
 8002d76:	490f      	ldr	r1, [pc, #60]	; (8002db4 <RMC_analysis+0x3ac>)
 8002d78:	4813      	ldr	r0, [pc, #76]	; (8002dc8 <RMC_analysis+0x3c0>)
 8002d7a:	f004 fa2e 	bl	80071da <f_puts>
	f_write(&fil3, date_buffer, sizeof(date_buffer), &bw3);
 8002d7e:	f107 0108 	add.w	r1, r7, #8
 8002d82:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <RMC_analysis+0x3b4>)
 8002d84:	220c      	movs	r2, #12
 8002d86:	480b      	ldr	r0, [pc, #44]	; (8002db4 <RMC_analysis+0x3ac>)
 8002d88:	f003 fd50 	bl	800682c <f_write>
	f_puts("\n", &fil3);
 8002d8c:	4909      	ldr	r1, [pc, #36]	; (8002db4 <RMC_analysis+0x3ac>)
 8002d8e:	480c      	ldr	r0, [pc, #48]	; (8002dc0 <RMC_analysis+0x3b8>)
 8002d90:	f004 fa23 	bl	80071da <f_puts>

	f_close(&fil3);
 8002d94:	4807      	ldr	r0, [pc, #28]	; (8002db4 <RMC_analysis+0x3ac>)
 8002d96:	f003 ff5b 	bl	8006c50 <f_close>
}
 8002d9a:	3758      	adds	r7, #88	; 0x58
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002da2:	bf00      	nop
 8002da4:	20006410 	.word	0x20006410
 8002da8:	080084fc 	.word	0x080084fc
 8002dac:	200043a4 	.word	0x200043a4
 8002db0:	0800855c 	.word	0x0800855c
 8002db4:	200053dc 	.word	0x200053dc
 8002db8:	0800856c 	.word	0x0800856c
 8002dbc:	2000640c 	.word	0x2000640c
 8002dc0:	0800851c 	.word	0x0800851c
 8002dc4:	08008574 	.word	0x08008574
 8002dc8:	08008580 	.word	0x08008580

08002dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <HAL_MspInit+0x4c>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	4a0f      	ldr	r2, [pc, #60]	; (8002e18 <HAL_MspInit+0x4c>)
 8002ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de0:	6453      	str	r3, [r2, #68]	; 0x44
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_MspInit+0x4c>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	603b      	str	r3, [r7, #0]
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_MspInit+0x4c>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	4a08      	ldr	r2, [pc, #32]	; (8002e18 <HAL_MspInit+0x4c>)
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_MspInit+0x4c>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e0a:	2007      	movs	r0, #7
 8002e0c:	f000 fabc 	bl	8003388 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40023800 	.word	0x40023800

08002e1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a19      	ldr	r2, [pc, #100]	; (8002ea0 <HAL_SPI_MspInit+0x84>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d12c      	bne.n	8002e98 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <HAL_SPI_MspInit+0x88>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	4a17      	ldr	r2, [pc, #92]	; (8002ea4 <HAL_SPI_MspInit+0x88>)
 8002e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <HAL_SPI_MspInit+0x88>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <HAL_SPI_MspInit+0x88>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	4a10      	ldr	r2, [pc, #64]	; (8002ea4 <HAL_SPI_MspInit+0x88>)
 8002e64:	f043 0302 	orr.w	r3, r3, #2
 8002e68:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <HAL_SPI_MspInit+0x88>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002e76:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e84:	2303      	movs	r3, #3
 8002e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e88:	2305      	movs	r3, #5
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	4619      	mov	r1, r3
 8002e92:	4805      	ldr	r0, [pc, #20]	; (8002ea8 <HAL_SPI_MspInit+0x8c>)
 8002e94:	f000 fa84 	bl	80033a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002e98:	bf00      	nop
 8002e9a:	3728      	adds	r7, #40	; 0x28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40003800 	.word	0x40003800
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40020400 	.word	0x40020400

08002eac <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <SDTimer_Handler+0x40>)
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <SDTimer_Handler+0x1c>
    Timer1--;
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <SDTimer_Handler+0x40>)
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	4b09      	ldr	r3, [pc, #36]	; (8002eec <SDTimer_Handler+0x40>)
 8002ec6:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <SDTimer_Handler+0x44>)
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <SDTimer_Handler+0x34>
    Timer2--;
 8002ed2:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <SDTimer_Handler+0x44>)
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <SDTimer_Handler+0x44>)
 8002ede:	801a      	strh	r2, [r3, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20006416 	.word	0x20006416
 8002ef0:	20006418 	.word	0x20006418

08002ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ef8:	e7fe      	b.n	8002ef8 <NMI_Handler+0x4>

08002efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002efe:	e7fe      	b.n	8002efe <HardFault_Handler+0x4>

08002f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f04:	e7fe      	b.n	8002f04 <MemManage_Handler+0x4>

08002f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f0a:	e7fe      	b.n	8002f0a <BusFault_Handler+0x4>

08002f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f10:	e7fe      	b.n	8002f10 <UsageFault_Handler+0x4>

08002f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0

	incr_ticks();
 8002f40:	f000 f830 	bl	8002fa4 <incr_ticks>
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <SysTick_Handler+0x34>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <SysTick_Handler+0x34>)
 8002f50:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <SysTick_Handler+0x34>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b09      	cmp	r3, #9
 8002f5a:	d904      	bls.n	8002f66 <SysTick_Handler+0x2a>
	  {
	    FatFsCnt = 0;
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <SysTick_Handler+0x34>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8002f62:	f7ff ffa3 	bl	8002eac <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f66:	f000 f9cb 	bl	8003300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20006414 	.word	0x20006414

08002f74 <USART2_IRQHandler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void USART2_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
	usart2_call();
 8002f78:	f000 f8f4 	bl	8003164 <usart2_call>
}
 8002f7c:	bf00      	nop
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <SystemInit+0x20>)
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8a:	4a05      	ldr	r2, [pc, #20]	; (8002fa0 <SystemInit+0x20>)
 8002f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <incr_ticks>:
volatile uint64_t  ticks = 0; // must be volatile to prevent compiler



void incr_ticks(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
	ticks++;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <incr_ticks+0x20>)
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	1c50      	adds	r0, r2, #1
 8002fb0:	f143 0100 	adc.w	r1, r3, #0
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <incr_ticks+0x20>)
 8002fb6:	e9c3 0100 	strd	r0, r1, [r3]
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	20006420 	.word	0x20006420

08002fc8 <delay_ms_systick>:



void delay_ms_systick(int ms)
{
 8002fc8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
	uint32_t started = ticks;
 8002fd2:	4910      	ldr	r1, [pc, #64]	; (8003014 <delay_ms_systick+0x4c>)
 8002fd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fd8:	4601      	mov	r1, r0
 8002fda:	60f9      	str	r1, [r7, #12]
	while((ticks-started)<=ms); // rollover-safe (within limits)
 8002fdc:	bf00      	nop
 8002fde:	490d      	ldr	r1, [pc, #52]	; (8003014 <delay_ms_systick+0x4c>)
 8002fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fe4:	68fe      	ldr	r6, [r7, #12]
 8002fe6:	f04f 0c00 	mov.w	ip, #0
 8002fea:	46b0      	mov	r8, r6
 8002fec:	46e1      	mov	r9, ip
 8002fee:	ebb0 0208 	subs.w	r2, r0, r8
 8002ff2:	eb61 0309 	sbc.w	r3, r1, r9
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	17c8      	asrs	r0, r1, #31
 8002ffa:	460c      	mov	r4, r1
 8002ffc:	4605      	mov	r5, r0
 8002ffe:	4294      	cmp	r4, r2
 8003000:	eb75 0103 	sbcs.w	r1, r5, r3
 8003004:	d2eb      	bcs.n	8002fde <delay_ms_systick+0x16>
}
 8003006:	bf00      	nop
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8003012:	4770      	bx	lr
 8003014:	20006420 	.word	0x20006420

08003018 <__NVIC_DisableIRQ>:
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	2b00      	cmp	r3, #0
 8003028:	db12      	blt.n	8003050 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	f003 021f 	and.w	r2, r3, #31
 8003030:	490a      	ldr	r1, [pc, #40]	; (800305c <__NVIC_DisableIRQ+0x44>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2001      	movs	r0, #1
 800303a:	fa00 f202 	lsl.w	r2, r0, r2
 800303e:	3320      	adds	r3, #32
 8003040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003044:	f3bf 8f4f 	dsb	sy
}
 8003048:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800304a:	f3bf 8f6f 	isb	sy
}
 800304e:	bf00      	nop
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000e100 	.word	0xe000e100

08003060 <__NVIC_SetPriority>:
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	6039      	str	r1, [r7, #0]
 800306a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003070:	2b00      	cmp	r3, #0
 8003072:	db0a      	blt.n	800308a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	b2da      	uxtb	r2, r3
 8003078:	490c      	ldr	r1, [pc, #48]	; (80030ac <__NVIC_SetPriority+0x4c>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	0112      	lsls	r2, r2, #4
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	440b      	add	r3, r1
 8003084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003088:	e00a      	b.n	80030a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	4908      	ldr	r1, [pc, #32]	; (80030b0 <__NVIC_SetPriority+0x50>)
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	3b04      	subs	r3, #4
 8003098:	0112      	lsls	r2, r2, #4
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	440b      	add	r3, r1
 800309e:	761a      	strb	r2, [r3, #24]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000e100 	.word	0xe000e100
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <Uart2Config>:
/**
  * @brief  This function is executed to initialize UART module, sets BAUD rate and enables the receiver and transmitter bit
  * @retval None
  */
void Uart2Config (void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= (1<<17);  // Enable UART2 CLOCK
 80030b8:	4b27      	ldr	r3, [pc, #156]	; (8003158 <Uart2Config+0xa4>)
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	4a26      	ldr	r2, [pc, #152]	; (8003158 <Uart2Config+0xa4>)
 80030be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c2:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= (1<<0); // Enable GPIOA CLOCK
 80030c4:	4b24      	ldr	r3, [pc, #144]	; (8003158 <Uart2Config+0xa4>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	4a23      	ldr	r2, [pc, #140]	; (8003158 <Uart2Config+0xa4>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |= (2<<4);  // Bits (5:4)= 1:0 --> Alternate Function for Pin PA2
 80030d0:	4b22      	ldr	r3, [pc, #136]	; (800315c <Uart2Config+0xa8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a21      	ldr	r2, [pc, #132]	; (800315c <Uart2Config+0xa8>)
 80030d6:	f043 0320 	orr.w	r3, r3, #32
 80030da:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2<<6);  // Bits (7:6)= 1:0 --> Alternate Function for Pin PA3
 80030dc:	4b1f      	ldr	r3, [pc, #124]	; (800315c <Uart2Config+0xa8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1e      	ldr	r2, [pc, #120]	; (800315c <Uart2Config+0xa8>)
 80030e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e6:	6013      	str	r3, [r2, #0]

	GPIOA->OSPEEDR |= (3<<4) | (3<<6);  // Bits (5:4)= 1:1 and Bits (7:6)= 1:1 --> High Speed for PIN PA2 and PA3
 80030e8:	4b1c      	ldr	r3, [pc, #112]	; (800315c <Uart2Config+0xa8>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a1b      	ldr	r2, [pc, #108]	; (800315c <Uart2Config+0xa8>)
 80030ee:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80030f2:	6093      	str	r3, [r2, #8]

	GPIOA->AFR[0] |= (7<<8);  //  AF7 Alternate function for USART2 at Pin PA2
 80030f4:	4b19      	ldr	r3, [pc, #100]	; (800315c <Uart2Config+0xa8>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4a18      	ldr	r2, [pc, #96]	; (800315c <Uart2Config+0xa8>)
 80030fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7<<12); //  AF7 Alternate function for USART2 at Pin PA3
 8003100:	4b16      	ldr	r3, [pc, #88]	; (800315c <Uart2Config+0xa8>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4a15      	ldr	r2, [pc, #84]	; (800315c <Uart2Config+0xa8>)
 8003106:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800310a:	6213      	str	r3, [r2, #32]

	USART2->CR1 = 0x00;  // clear all
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <Uart2Config+0xac>)
 800310e:	2200      	movs	r2, #0
 8003110:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= (1<<5) | (1<<7);
 8003112:	4b13      	ldr	r3, [pc, #76]	; (8003160 <Uart2Config+0xac>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	4a12      	ldr	r2, [pc, #72]	; (8003160 <Uart2Config+0xac>)
 8003118:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800311c:	60d3      	str	r3, [r2, #12]


	// Program the M bit in USART_CR1 to define the word length.
	USART2->CR1 &= ~(1<<12);  // M =0; 8 bit word length
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <Uart2Config+0xac>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <Uart2Config+0xac>)
 8003124:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003128:	60d3      	str	r3, [r2, #12]

	// Select the desired baud rate using the USART_BRR register.
	USART2->BRR = 0x0341;   // Baud rate of 115200 AT 8MHz
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <Uart2Config+0xac>)
 800312c:	f240 3241 	movw	r2, #833	; 0x341
 8003130:	609a      	str	r2, [r3, #8]

	//Enable the Transmitter/Receiver by Setting the TE and RE bits in USART_CR1 Register
	USART2->CR1 |= (1<<2); // RE=1,Enable the Receiver
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <Uart2Config+0xac>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <Uart2Config+0xac>)
 8003138:	f043 0304 	orr.w	r3, r3, #4
 800313c:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1<<3);  // TE=1,Enable Transmitter
 800313e:	4b08      	ldr	r3, [pc, #32]	; (8003160 <Uart2Config+0xac>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	4a07      	ldr	r2, [pc, #28]	; (8003160 <Uart2Config+0xac>)
 8003144:	f043 0308 	orr.w	r3, r3, #8
 8003148:	60d3      	str	r3, [r2, #12]

	//USART2->CR1 |= (1<<13); //UART ENABLE

	NVIC_SetPriority(USART2_IRQn, 2);
 800314a:	2102      	movs	r1, #2
 800314c:	2026      	movs	r0, #38	; 0x26
 800314e:	f7ff ff87 	bl	8003060 <__NVIC_SetPriority>
	//NVIC_ClearPending(USART2_IRQn);
	//NVIC_EnableIRQ(USART2_IRQn);
	//NVIC_SetPriority(UART0_IRQn, 2); // could be 0, 1, 2, or 3 priority
		//NVIC_ClearPendingIRQ(UART0_IRQn);
		//NVIC_EnableIRQ(UART0_IRQn);
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800
 800315c:	40020000 	.word	0x40020000
 8003160:	40004400 	.word	0x40004400

08003164 <usart2_call>:




void usart2_call(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
	 //check if we are here because of RXNE interrupt

	 if (USART2->SR & USART_SR_RXNE) //if RX is not empty
 8003168:	4b38      	ldr	r3, [pc, #224]	; (800324c <usart2_call+0xe8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d068      	beq.n	8003246 <usart2_call+0xe2>
	 {
		 NMEA[nmea_count][buf_count] = (char) USART2->DR;
 8003174:	4b35      	ldr	r3, [pc, #212]	; (800324c <usart2_call+0xe8>)
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	4b35      	ldr	r3, [pc, #212]	; (8003250 <usart2_call+0xec>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a35      	ldr	r2, [pc, #212]	; (8003254 <usart2_call+0xf0>)
 800317e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003182:	4a35      	ldr	r2, [pc, #212]	; (8003258 <usart2_call+0xf4>)
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	4413      	add	r3, r2
 8003188:	b2ca      	uxtb	r2, r1
 800318a:	701a      	strb	r2, [r3, #0]
		 if (USART2->DR == '\n')
 800318c:	4b2f      	ldr	r3, [pc, #188]	; (800324c <usart2_call+0xe8>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b0a      	cmp	r3, #10
 8003192:	d153      	bne.n	800323c <usart2_call+0xd8>
		 {
			 NMEA[nmea_count][buf_count] = '\0';
 8003194:	4b2e      	ldr	r3, [pc, #184]	; (8003250 <usart2_call+0xec>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a2e      	ldr	r2, [pc, #184]	; (8003254 <usart2_call+0xf0>)
 800319a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319e:	4a2e      	ldr	r2, [pc, #184]	; (8003258 <usart2_call+0xf4>)
 80031a0:	6812      	ldr	r2, [r2, #0]
 80031a2:	4413      	add	r3, r2
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
			 NMEA[nmea_count][buf_count-1] = '\0';
 80031a8:	4b29      	ldr	r3, [pc, #164]	; (8003250 <usart2_call+0xec>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a29      	ldr	r2, [pc, #164]	; (8003254 <usart2_call+0xf0>)
 80031ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80031b2:	4b29      	ldr	r3, [pc, #164]	; (8003258 <usart2_call+0xf4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
			 buf_count = 0;
 80031be:	4b26      	ldr	r3, [pc, #152]	; (8003258 <usart2_call+0xf4>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
			 nmea_count++; //1
 80031c4:	4b22      	ldr	r3, [pc, #136]	; (8003250 <usart2_call+0xec>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3301      	adds	r3, #1
 80031ca:	4a21      	ldr	r2, [pc, #132]	; (8003250 <usart2_call+0xec>)
 80031cc:	6013      	str	r3, [r2, #0]
			 if(nmea_count == 8) {
 80031ce:	4b20      	ldr	r3, [pc, #128]	; (8003250 <usart2_call+0xec>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d132      	bne.n	800323c <usart2_call+0xd8>
				 nmea_count = 0;
 80031d6:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <usart2_call+0xec>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
				 uart_incr_ticks++;
 80031dc:	4b1f      	ldr	r3, [pc, #124]	; (800325c <usart2_call+0xf8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	4a1e      	ldr	r2, [pc, #120]	; (800325c <usart2_call+0xf8>)
 80031e4:	6013      	str	r3, [r2, #0]
				 USART2->CR1 &= ~(1<<13);
 80031e6:	4b19      	ldr	r3, [pc, #100]	; (800324c <usart2_call+0xe8>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	4a18      	ldr	r2, [pc, #96]	; (800324c <usart2_call+0xe8>)
 80031ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031f0:	60d3      	str	r3, [r2, #12]
				 NVIC_DisableIRQ(USART2_IRQn);
 80031f2:	2026      	movs	r0, #38	; 0x26
 80031f4:	f7ff ff10 	bl	8003018 <__NVIC_DisableIRQ>

				 if(even_counter%2 == 0)
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <usart2_call+0xfc>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10c      	bne.n	8003222 <usart2_call+0xbe>
				 {
					 GGA_analysis(NMEA[2], &gnssTransfer.GGA);
 8003208:	4b12      	ldr	r3, [pc, #72]	; (8003254 <usart2_call+0xf0>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4915      	ldr	r1, [pc, #84]	; (8003264 <usart2_call+0x100>)
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f876 	bl	8002300 <GGA_analysis>
					 even_counter = 1;
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <usart2_call+0xfc>)
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
					 systick_count = 0;
 800321a:	4b13      	ldr	r3, [pc, #76]	; (8003268 <usart2_call+0x104>)
 800321c:	2200      	movs	r2, #0
 800321e:	801a      	strh	r2, [r3, #0]
				 {
					 RMC_analysis(NMEA[0], &gnssTransfer.RMC);
					 even_counter = 0;
					 systick_count = 0;
				 }
				 return;
 8003220:	e013      	b.n	800324a <usart2_call+0xe6>
					 RMC_analysis(NMEA[0], &gnssTransfer.RMC);
 8003222:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <usart2_call+0xf0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4911      	ldr	r1, [pc, #68]	; (800326c <usart2_call+0x108>)
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fbed 	bl	8002a08 <RMC_analysis>
					 even_counter = 0;
 800322e:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <usart2_call+0xfc>)
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
					 systick_count = 0;
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <usart2_call+0x104>)
 8003236:	2200      	movs	r2, #0
 8003238:	801a      	strh	r2, [r3, #0]
				 return;
 800323a:	e006      	b.n	800324a <usart2_call+0xe6>
			 }

		 }
		 buf_count++;
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <usart2_call+0xf4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3301      	adds	r3, #1
 8003242:	4a05      	ldr	r2, [pc, #20]	; (8003258 <usart2_call+0xf4>)
 8003244:	6013      	str	r3, [r2, #0]


	 }

	 //check if we are here because of TXEIE interrupt
	 if (USART1->SR & USART_SR_TXE) //if RX is not empty
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <usart2_call+0x10c>)
 8003248:	681b      	ldr	r3, [r3, #0]
	 {
	  //handle transmit completion here

	 }
}
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40004400 	.word	0x40004400
 8003250:	2000674c 	.word	0x2000674c
 8003254:	20000008 	.word	0x20000008
 8003258:	20006748 	.word	0x20006748
 800325c:	20006750 	.word	0x20006750
 8003260:	20006754 	.word	0x20006754
 8003264:	20006758 	.word	0x20006758
 8003268:	20002198 	.word	0x20002198
 800326c:	20006784 	.word	0x20006784
 8003270:	40011000 	.word	0x40011000

08003274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003278:	480d      	ldr	r0, [pc, #52]	; (80032b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800327a:	490e      	ldr	r1, [pc, #56]	; (80032b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800327c:	4a0e      	ldr	r2, [pc, #56]	; (80032b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800327e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003280:	e002      	b.n	8003288 <LoopCopyDataInit>

08003282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003286:	3304      	adds	r3, #4

08003288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800328a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800328c:	d3f9      	bcc.n	8003282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800328e:	4a0b      	ldr	r2, [pc, #44]	; (80032bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003290:	4c0b      	ldr	r4, [pc, #44]	; (80032c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003294:	e001      	b.n	800329a <LoopFillZerobss>

08003296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003298:	3204      	adds	r2, #4

0800329a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800329a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800329c:	d3fb      	bcc.n	8003296 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800329e:	f7ff fe6f 	bl	8002f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032a2:	f004 f8eb 	bl	800747c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032a6:	f7fe fd15 	bl	8001cd4 <main>
  bx  lr    
 80032aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032b4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80032b8:	08008b50 	.word	0x08008b50
  ldr r2, =_sbss
 80032bc:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80032c0:	200069dc 	.word	0x200069dc

080032c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032c4:	e7fe      	b.n	80032c4 <ADC_IRQHandler>
	...

080032c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_Init+0x34>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <HAL_Init+0x34>)
 80032d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <HAL_Init+0x34>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a07      	ldr	r2, [pc, #28]	; (80032fc <HAL_Init+0x34>)
 80032de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <HAL_Init+0x34>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a04      	ldr	r2, [pc, #16]	; (80032fc <HAL_Init+0x34>)
 80032ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ee:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  //HAL_InitTick(TICK_INT_PRIORITY);

  /* Init the low level hardware */
  HAL_MspInit();
 80032f0:	f7ff fd6c 	bl	8002dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023c00 	.word	0x40023c00

08003300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_IncTick+0x20>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	461a      	mov	r2, r3
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_IncTick+0x24>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4413      	add	r3, r2
 8003310:	4a04      	ldr	r2, [pc, #16]	; (8003324 <HAL_IncTick+0x24>)
 8003312:	6013      	str	r3, [r2, #0]
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000028 	.word	0x20000028
 8003324:	2000679c 	.word	0x2000679c

08003328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return uwTick;
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_GetTick+0x14>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	2000679c 	.word	0x2000679c

08003340 <__NVIC_SetPriorityGrouping>:
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800335c:	4013      	ands	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800336c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003372:	4a04      	ldr	r2, [pc, #16]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	60d3      	str	r3, [r2, #12]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ffd5 	bl	8003340 <__NVIC_SetPriorityGrouping>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b089      	sub	sp, #36	; 0x24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	e16b      	b.n	8003694 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033bc:	2201      	movs	r2, #1
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	f040 815a 	bne.w	800368e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d005      	beq.n	80033f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d130      	bne.n	8003454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	2203      	movs	r2, #3
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003428:	2201      	movs	r2, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f003 0201 	and.w	r2, r3, #1
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	2b03      	cmp	r3, #3
 800345e:	d017      	beq.n	8003490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	2203      	movs	r2, #3
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d123      	bne.n	80034e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	08da      	lsrs	r2, r3, #3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3208      	adds	r2, #8
 80034a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	220f      	movs	r2, #15
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	08da      	lsrs	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3208      	adds	r2, #8
 80034de:	69b9      	ldr	r1, [r7, #24]
 80034e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	2203      	movs	r2, #3
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 0203 	and.w	r2, r3, #3
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 80b4 	beq.w	800368e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	4b60      	ldr	r3, [pc, #384]	; (80036ac <HAL_GPIO_Init+0x30c>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	4a5f      	ldr	r2, [pc, #380]	; (80036ac <HAL_GPIO_Init+0x30c>)
 8003530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003534:	6453      	str	r3, [r2, #68]	; 0x44
 8003536:	4b5d      	ldr	r3, [pc, #372]	; (80036ac <HAL_GPIO_Init+0x30c>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003542:	4a5b      	ldr	r2, [pc, #364]	; (80036b0 <HAL_GPIO_Init+0x310>)
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	3302      	adds	r3, #2
 800354a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	220f      	movs	r2, #15
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43db      	mvns	r3, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4013      	ands	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a52      	ldr	r2, [pc, #328]	; (80036b4 <HAL_GPIO_Init+0x314>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d02b      	beq.n	80035c6 <HAL_GPIO_Init+0x226>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a51      	ldr	r2, [pc, #324]	; (80036b8 <HAL_GPIO_Init+0x318>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d025      	beq.n	80035c2 <HAL_GPIO_Init+0x222>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a50      	ldr	r2, [pc, #320]	; (80036bc <HAL_GPIO_Init+0x31c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01f      	beq.n	80035be <HAL_GPIO_Init+0x21e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4f      	ldr	r2, [pc, #316]	; (80036c0 <HAL_GPIO_Init+0x320>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d019      	beq.n	80035ba <HAL_GPIO_Init+0x21a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4e      	ldr	r2, [pc, #312]	; (80036c4 <HAL_GPIO_Init+0x324>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d013      	beq.n	80035b6 <HAL_GPIO_Init+0x216>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a4d      	ldr	r2, [pc, #308]	; (80036c8 <HAL_GPIO_Init+0x328>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00d      	beq.n	80035b2 <HAL_GPIO_Init+0x212>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a4c      	ldr	r2, [pc, #304]	; (80036cc <HAL_GPIO_Init+0x32c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d007      	beq.n	80035ae <HAL_GPIO_Init+0x20e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4b      	ldr	r2, [pc, #300]	; (80036d0 <HAL_GPIO_Init+0x330>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d101      	bne.n	80035aa <HAL_GPIO_Init+0x20a>
 80035a6:	2307      	movs	r3, #7
 80035a8:	e00e      	b.n	80035c8 <HAL_GPIO_Init+0x228>
 80035aa:	2308      	movs	r3, #8
 80035ac:	e00c      	b.n	80035c8 <HAL_GPIO_Init+0x228>
 80035ae:	2306      	movs	r3, #6
 80035b0:	e00a      	b.n	80035c8 <HAL_GPIO_Init+0x228>
 80035b2:	2305      	movs	r3, #5
 80035b4:	e008      	b.n	80035c8 <HAL_GPIO_Init+0x228>
 80035b6:	2304      	movs	r3, #4
 80035b8:	e006      	b.n	80035c8 <HAL_GPIO_Init+0x228>
 80035ba:	2303      	movs	r3, #3
 80035bc:	e004      	b.n	80035c8 <HAL_GPIO_Init+0x228>
 80035be:	2302      	movs	r3, #2
 80035c0:	e002      	b.n	80035c8 <HAL_GPIO_Init+0x228>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_GPIO_Init+0x228>
 80035c6:	2300      	movs	r3, #0
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	f002 0203 	and.w	r2, r2, #3
 80035ce:	0092      	lsls	r2, r2, #2
 80035d0:	4093      	lsls	r3, r2
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035d8:	4935      	ldr	r1, [pc, #212]	; (80036b0 <HAL_GPIO_Init+0x310>)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	089b      	lsrs	r3, r3, #2
 80035de:	3302      	adds	r3, #2
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035e6:	4b3b      	ldr	r3, [pc, #236]	; (80036d4 <HAL_GPIO_Init+0x334>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800360a:	4a32      	ldr	r2, [pc, #200]	; (80036d4 <HAL_GPIO_Init+0x334>)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003610:	4b30      	ldr	r3, [pc, #192]	; (80036d4 <HAL_GPIO_Init+0x334>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003634:	4a27      	ldr	r2, [pc, #156]	; (80036d4 <HAL_GPIO_Init+0x334>)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800363a:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <HAL_GPIO_Init+0x334>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800365e:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <HAL_GPIO_Init+0x334>)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003664:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_GPIO_Init+0x334>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003688:	4a12      	ldr	r2, [pc, #72]	; (80036d4 <HAL_GPIO_Init+0x334>)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3301      	adds	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2b0f      	cmp	r3, #15
 8003698:	f67f ae90 	bls.w	80033bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	3724      	adds	r7, #36	; 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40013800 	.word	0x40013800
 80036b4:	40020000 	.word	0x40020000
 80036b8:	40020400 	.word	0x40020400
 80036bc:	40020800 	.word	0x40020800
 80036c0:	40020c00 	.word	0x40020c00
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40021400 	.word	0x40021400
 80036cc:	40021800 	.word	0x40021800
 80036d0:	40021c00 	.word	0x40021c00
 80036d4:	40013c00 	.word	0x40013c00

080036d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	807b      	strh	r3, [r7, #2]
 80036e4:	4613      	mov	r3, r2
 80036e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036e8:	787b      	ldrb	r3, [r7, #1]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ee:	887a      	ldrh	r2, [r7, #2]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036f4:	e003      	b.n	80036fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036f6:	887b      	ldrh	r3, [r7, #2]
 80036f8:	041a      	lsls	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	619a      	str	r2, [r3, #24]
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e07b      	b.n	8003814 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	2b00      	cmp	r3, #0
 8003722:	d108      	bne.n	8003736 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372c:	d009      	beq.n	8003742 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	61da      	str	r2, [r3, #28]
 8003734:	e005      	b.n	8003742 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fb5d 	bl	8002e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003778:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c6:	ea42 0103 	orr.w	r1, r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	0c1b      	lsrs	r3, r3, #16
 80037e0:	f003 0104 	and.w	r1, r3, #4
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	f003 0210 	and.w	r2, r3, #16
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69da      	ldr	r2, [r3, #28]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003802:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_SPI_Transmit+0x22>
 800383a:	2302      	movs	r3, #2
 800383c:	e126      	b.n	8003a8c <HAL_SPI_Transmit+0x270>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003846:	f7ff fd6f 	bl	8003328 <HAL_GetTick>
 800384a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	d002      	beq.n	8003862 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800385c:	2302      	movs	r3, #2
 800385e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003860:	e10b      	b.n	8003a7a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_SPI_Transmit+0x52>
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d102      	bne.n	8003874 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003872:	e102      	b.n	8003a7a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2203      	movs	r2, #3
 8003878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	88fa      	ldrh	r2, [r7, #6]
 8003892:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ba:	d10f      	bne.n	80038dc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	d007      	beq.n	80038fa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003902:	d14b      	bne.n	800399c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_SPI_Transmit+0xf6>
 800390c:	8afb      	ldrh	r3, [r7, #22]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d13e      	bne.n	8003990 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	881a      	ldrh	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	1c9a      	adds	r2, r3, #2
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003936:	e02b      	b.n	8003990 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b02      	cmp	r3, #2
 8003944:	d112      	bne.n	800396c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	881a      	ldrh	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	1c9a      	adds	r2, r3, #2
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	86da      	strh	r2, [r3, #54]	; 0x36
 800396a:	e011      	b.n	8003990 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800396c:	f7ff fcdc 	bl	8003328 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d803      	bhi.n	8003984 <HAL_SPI_Transmit+0x168>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d102      	bne.n	800398a <HAL_SPI_Transmit+0x16e>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d102      	bne.n	8003990 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800398e:	e074      	b.n	8003a7a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1ce      	bne.n	8003938 <HAL_SPI_Transmit+0x11c>
 800399a:	e04c      	b.n	8003a36 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <HAL_SPI_Transmit+0x18e>
 80039a4:	8afb      	ldrh	r3, [r7, #22]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d140      	bne.n	8003a2c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	330c      	adds	r3, #12
 80039b4:	7812      	ldrb	r2, [r2, #0]
 80039b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039d0:	e02c      	b.n	8003a2c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d113      	bne.n	8003a08 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	330c      	adds	r3, #12
 80039ea:	7812      	ldrb	r2, [r2, #0]
 80039ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a06:	e011      	b.n	8003a2c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a08:	f7ff fc8e 	bl	8003328 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d803      	bhi.n	8003a20 <HAL_SPI_Transmit+0x204>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d102      	bne.n	8003a26 <HAL_SPI_Transmit+0x20a>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d102      	bne.n	8003a2c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a2a:	e026      	b.n	8003a7a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1cd      	bne.n	80039d2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	6839      	ldr	r1, [r7, #0]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fa54 	bl	8003ee8 <SPI_EndRxTxTransaction>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a54:	2300      	movs	r3, #0
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e000      	b.n	8003a7a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3720      	adds	r7, #32
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	; 0x30
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_SPI_TransmitReceive+0x26>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e18a      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x33c>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ac2:	f7ff fc31 	bl	8003328 <HAL_GetTick>
 8003ac6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003adc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d00f      	beq.n	8003b04 <HAL_SPI_TransmitReceive+0x70>
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aea:	d107      	bne.n	8003afc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d103      	bne.n	8003afc <HAL_SPI_TransmitReceive+0x68>
 8003af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d003      	beq.n	8003b04 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003afc:	2302      	movs	r3, #2
 8003afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b02:	e15b      	b.n	8003dbc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_SPI_TransmitReceive+0x82>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_SPI_TransmitReceive+0x82>
 8003b10:	887b      	ldrh	r3, [r7, #2]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d103      	bne.n	8003b1e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b1c:	e14e      	b.n	8003dbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d003      	beq.n	8003b32 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2205      	movs	r2, #5
 8003b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	887a      	ldrh	r2, [r7, #2]
 8003b42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	887a      	ldrh	r2, [r7, #2]
 8003b48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	887a      	ldrh	r2, [r7, #2]
 8003b54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	887a      	ldrh	r2, [r7, #2]
 8003b5a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b72:	2b40      	cmp	r3, #64	; 0x40
 8003b74:	d007      	beq.n	8003b86 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b8e:	d178      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_SPI_TransmitReceive+0x10a>
 8003b98:	8b7b      	ldrh	r3, [r7, #26]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d166      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	881a      	ldrh	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	1c9a      	adds	r2, r3, #2
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bc2:	e053      	b.n	8003c6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d11b      	bne.n	8003c0a <HAL_SPI_TransmitReceive+0x176>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d016      	beq.n	8003c0a <HAL_SPI_TransmitReceive+0x176>
 8003bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d113      	bne.n	8003c0a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	881a      	ldrh	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	1c9a      	adds	r2, r3, #2
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d119      	bne.n	8003c4c <HAL_SPI_TransmitReceive+0x1b8>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d014      	beq.n	8003c4c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	b292      	uxth	r2, r2
 8003c2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	1c9a      	adds	r2, r3, #2
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c4c:	f7ff fb6c 	bl	8003328 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d807      	bhi.n	8003c6c <HAL_SPI_TransmitReceive+0x1d8>
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c62:	d003      	beq.n	8003c6c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c6a:	e0a7      	b.n	8003dbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1a6      	bne.n	8003bc4 <HAL_SPI_TransmitReceive+0x130>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1a1      	bne.n	8003bc4 <HAL_SPI_TransmitReceive+0x130>
 8003c80:	e07c      	b.n	8003d7c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <HAL_SPI_TransmitReceive+0x1fc>
 8003c8a:	8b7b      	ldrh	r3, [r7, #26]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d16b      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	7812      	ldrb	r2, [r2, #0]
 8003c9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cb6:	e057      	b.n	8003d68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d11c      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x26c>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d017      	beq.n	8003d00 <HAL_SPI_TransmitReceive+0x26c>
 8003cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d114      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	7812      	ldrb	r2, [r2, #0]
 8003ce2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d119      	bne.n	8003d42 <HAL_SPI_TransmitReceive+0x2ae>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d014      	beq.n	8003d42 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d42:	f7ff faf1 	bl	8003328 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d803      	bhi.n	8003d5a <HAL_SPI_TransmitReceive+0x2c6>
 8003d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d102      	bne.n	8003d60 <HAL_SPI_TransmitReceive+0x2cc>
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d103      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d66:	e029      	b.n	8003dbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1a2      	bne.n	8003cb8 <HAL_SPI_TransmitReceive+0x224>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d19d      	bne.n	8003cb8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f8b1 	bl	8003ee8 <SPI_EndRxTxTransaction>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d006      	beq.n	8003d9a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2220      	movs	r2, #32
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d98:	e010      	b.n	8003dbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10b      	bne.n	8003dba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	e000      	b.n	8003dbc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003dba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3730      	adds	r7, #48	; 0x30
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	4613      	mov	r3, r2
 8003de6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003de8:	f7ff fa9e 	bl	8003328 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	1a9b      	subs	r3, r3, r2
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	4413      	add	r3, r2
 8003df6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003df8:	f7ff fa96 	bl	8003328 <HAL_GetTick>
 8003dfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dfe:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	015b      	lsls	r3, r3, #5
 8003e04:	0d1b      	lsrs	r3, r3, #20
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	fb02 f303 	mul.w	r3, r2, r3
 8003e0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e0e:	e054      	b.n	8003eba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e16:	d050      	beq.n	8003eba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e18:	f7ff fa86 	bl	8003328 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d902      	bls.n	8003e2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d13d      	bne.n	8003eaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e46:	d111      	bne.n	8003e6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e50:	d004      	beq.n	8003e5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5a:	d107      	bne.n	8003e6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e74:	d10f      	bne.n	8003e96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e017      	b.n	8003eda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	bf0c      	ite	eq
 8003eca:	2301      	moveq	r3, #1
 8003ecc:	2300      	movne	r3, #0
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d19b      	bne.n	8003e10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3720      	adds	r7, #32
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000004 	.word	0x20000004

08003ee8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ef4:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <SPI_EndRxTxTransaction+0x7c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1b      	ldr	r2, [pc, #108]	; (8003f68 <SPI_EndRxTxTransaction+0x80>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	0d5b      	lsrs	r3, r3, #21
 8003f00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f04:	fb02 f303 	mul.w	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f12:	d112      	bne.n	8003f3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2180      	movs	r1, #128	; 0x80
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff ff5a 	bl	8003dd8 <SPI_WaitFlagStateUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d016      	beq.n	8003f58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f043 0220 	orr.w	r2, r3, #32
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e00f      	b.n	8003f5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	2b80      	cmp	r3, #128	; 0x80
 8003f52:	d0f2      	beq.n	8003f3a <SPI_EndRxTxTransaction+0x52>
 8003f54:	e000      	b.n	8003f58 <SPI_EndRxTxTransaction+0x70>
        break;
 8003f56:	bf00      	nop
  }

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000004 	.word	0x20000004
 8003f68:	165e9f81 	.word	0x165e9f81

08003f6c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003f70:	4904      	ldr	r1, [pc, #16]	; (8003f84 <MX_FATFS_Init+0x18>)
 8003f72:	4805      	ldr	r0, [pc, #20]	; (8003f88 <MX_FATFS_Init+0x1c>)
 8003f74:	f003 f9a2 	bl	80072bc <FATFS_LinkDriver>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <MX_FATFS_Init+0x20>)
 8003f7e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003f80:	bf00      	nop
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	200067a4 	.word	0x200067a4
 8003f88:	2000002c 	.word	0x2000002c
 8003f8c:	200067a0 	.word	0x200067a0

08003f90 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003f94:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fd f945 	bl	800123c <SD_disk_initialize>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fd fa22 	bl	8001414 <SD_disk_status>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	4603      	mov	r3, r0
 8003fea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003fec:	7bf8      	ldrb	r0, [r7, #15]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	f7fd fa24 	bl	8001440 <SD_disk_read>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	607a      	str	r2, [r7, #4]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4603      	mov	r3, r0
 8004012:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004014:	7bf8      	ldrb	r0, [r7, #15]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	f7fd fa7a 	bl	8001514 <SD_disk_write>
 8004020:	4603      	mov	r3, r0
 8004022:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	603a      	str	r2, [r7, #0]
 8004036:	71fb      	strb	r3, [r7, #7]
 8004038:	460b      	mov	r3, r1
 800403a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	79b9      	ldrb	r1, [r7, #6]
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7fd faea 	bl	800161c <SD_disk_ioctl>
 8004048:	4603      	mov	r3, r0
 800404a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	4a08      	ldr	r2, [pc, #32]	; (8004084 <disk_status+0x30>)
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	79fa      	ldrb	r2, [r7, #7]
 800406c:	4905      	ldr	r1, [pc, #20]	; (8004084 <disk_status+0x30>)
 800406e:	440a      	add	r2, r1
 8004070:	7a12      	ldrb	r2, [r2, #8]
 8004072:	4610      	mov	r0, r2
 8004074:	4798      	blx	r3
 8004076:	4603      	mov	r3, r0
 8004078:	73fb      	strb	r3, [r7, #15]
  return stat;
 800407a:	7bfb      	ldrb	r3, [r7, #15]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	200069d0 	.word	0x200069d0

08004088 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	4a0d      	ldr	r2, [pc, #52]	; (80040d0 <disk_initialize+0x48>)
 800409a:	5cd3      	ldrb	r3, [r2, r3]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d111      	bne.n	80040c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	4a0b      	ldr	r2, [pc, #44]	; (80040d0 <disk_initialize+0x48>)
 80040a4:	2101      	movs	r1, #1
 80040a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <disk_initialize+0x48>)
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	79fa      	ldrb	r2, [r7, #7]
 80040b6:	4906      	ldr	r1, [pc, #24]	; (80040d0 <disk_initialize+0x48>)
 80040b8:	440a      	add	r2, r1
 80040ba:	7a12      	ldrb	r2, [r2, #8]
 80040bc:	4610      	mov	r0, r2
 80040be:	4798      	blx	r3
 80040c0:	4603      	mov	r3, r0
 80040c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	200069d0 	.word	0x200069d0

080040d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	4603      	mov	r3, r0
 80040e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <disk_read+0x3c>)
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	689c      	ldr	r4, [r3, #8]
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	4a07      	ldr	r2, [pc, #28]	; (8004110 <disk_read+0x3c>)
 80040f4:	4413      	add	r3, r2
 80040f6:	7a18      	ldrb	r0, [r3, #8]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	47a0      	blx	r4
 8004100:	4603      	mov	r3, r0
 8004102:	75fb      	strb	r3, [r7, #23]
  return res;
 8004104:	7dfb      	ldrb	r3, [r7, #23]
}
 8004106:	4618      	mov	r0, r3
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	bd90      	pop	{r4, r7, pc}
 800410e:	bf00      	nop
 8004110:	200069d0 	.word	0x200069d0

08004114 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4603      	mov	r3, r0
 8004122:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	4a0a      	ldr	r2, [pc, #40]	; (8004150 <disk_write+0x3c>)
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	68dc      	ldr	r4, [r3, #12]
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	4a07      	ldr	r2, [pc, #28]	; (8004150 <disk_write+0x3c>)
 8004134:	4413      	add	r3, r2
 8004136:	7a18      	ldrb	r0, [r3, #8]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	47a0      	blx	r4
 8004140:	4603      	mov	r3, r0
 8004142:	75fb      	strb	r3, [r7, #23]
  return res;
 8004144:	7dfb      	ldrb	r3, [r7, #23]
}
 8004146:	4618      	mov	r0, r3
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	bd90      	pop	{r4, r7, pc}
 800414e:	bf00      	nop
 8004150:	200069d0 	.word	0x200069d0

08004154 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	603a      	str	r2, [r7, #0]
 800415e:	71fb      	strb	r3, [r7, #7]
 8004160:	460b      	mov	r3, r1
 8004162:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	4a09      	ldr	r2, [pc, #36]	; (800418c <disk_ioctl+0x38>)
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	79fa      	ldrb	r2, [r7, #7]
 8004172:	4906      	ldr	r1, [pc, #24]	; (800418c <disk_ioctl+0x38>)
 8004174:	440a      	add	r2, r1
 8004176:	7a10      	ldrb	r0, [r2, #8]
 8004178:	79b9      	ldrb	r1, [r7, #6]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	4798      	blx	r3
 800417e:	4603      	mov	r3, r0
 8004180:	73fb      	strb	r3, [r7, #15]
  return res;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	200069d0 	.word	0x200069d0

08004190 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3301      	adds	r3, #1
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80041a0:	89fb      	ldrh	r3, [r7, #14]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	b21a      	sxth	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	b21b      	sxth	r3, r3
 80041ac:	4313      	orrs	r3, r2
 80041ae:	b21b      	sxth	r3, r3
 80041b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80041b2:	89fb      	ldrh	r3, [r7, #14]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3303      	adds	r3, #3
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	3202      	adds	r2, #2
 80041d8:	7812      	ldrb	r2, [r2, #0]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	3201      	adds	r2, #1
 80041e6:	7812      	ldrb	r2, [r2, #0]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	021b      	lsls	r3, r3, #8
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	7812      	ldrb	r2, [r2, #0]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
	return rv;
 80041f8:	68fb      	ldr	r3, [r7, #12]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	460b      	mov	r3, r1
 8004210:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	887a      	ldrh	r2, [r7, #2]
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]
 800421e:	887b      	ldrh	r3, [r7, #2]
 8004220:	0a1b      	lsrs	r3, r3, #8
 8004222:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	607a      	str	r2, [r7, #4]
 800422a:	887a      	ldrh	r2, [r7, #2]
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	701a      	strb	r2, [r3, #0]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	0a1b      	lsrs	r3, r3, #8
 8004256:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	607a      	str	r2, [r7, #4]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	0a1b      	lsrs	r3, r3, #8
 800427a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	701a      	strb	r2, [r3, #0]
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	1c53      	adds	r3, r2, #1
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	1c59      	adds	r1, r3, #1
 80042b8:	6179      	str	r1, [r7, #20]
 80042ba:	7812      	ldrb	r2, [r2, #0]
 80042bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	607b      	str	r3, [r7, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f1      	bne.n	80042ae <mem_cpy+0x1a>
	}
}
 80042ca:	bf00      	nop
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80042d6:	b480      	push	{r7}
 80042d8:	b087      	sub	sp, #28
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	617a      	str	r2, [r7, #20]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	607b      	str	r3, [r7, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f3      	bne.n	80042e6 <mem_set+0x10>
}
 80042fe:	bf00      	nop
 8004300:	bf00      	nop
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800430c:	b480      	push	{r7}
 800430e:	b089      	sub	sp, #36	; 0x24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	61fb      	str	r3, [r7, #28]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	61fa      	str	r2, [r7, #28]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	4619      	mov	r1, r3
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	61ba      	str	r2, [r7, #24]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	1acb      	subs	r3, r1, r3
 8004338:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3b01      	subs	r3, #1
 800433e:	607b      	str	r3, [r7, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <mem_cmp+0x40>
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0eb      	beq.n	8004324 <mem_cmp+0x18>

	return r;
 800434c:	697b      	ldr	r3, [r7, #20]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3724      	adds	r7, #36	; 0x24
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004364:	e002      	b.n	800436c <chk_chr+0x12>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3301      	adds	r3, #1
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <chk_chr+0x26>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	4293      	cmp	r3, r2
 800437e:	d1f2      	bne.n	8004366 <chk_chr+0xc>
	return *str;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	781b      	ldrb	r3, [r3, #0]
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800439a:	2300      	movs	r3, #0
 800439c:	60bb      	str	r3, [r7, #8]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	e029      	b.n	80043f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80043a4:	4a27      	ldr	r2, [pc, #156]	; (8004444 <chk_lock+0xb4>)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	4413      	add	r3, r2
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d01d      	beq.n	80043ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80043b2:	4a24      	ldr	r2, [pc, #144]	; (8004444 <chk_lock+0xb4>)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	4413      	add	r3, r2
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d116      	bne.n	80043f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80043c4:	4a1f      	ldr	r2, [pc, #124]	; (8004444 <chk_lock+0xb4>)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	4413      	add	r3, r2
 80043cc:	3304      	adds	r3, #4
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d10c      	bne.n	80043f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80043d8:	4a1a      	ldr	r2, [pc, #104]	; (8004444 <chk_lock+0xb4>)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	4413      	add	r3, r2
 80043e0:	3308      	adds	r3, #8
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d102      	bne.n	80043f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80043ec:	e007      	b.n	80043fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80043ee:	2301      	movs	r3, #1
 80043f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3301      	adds	r3, #1
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d9d2      	bls.n	80043a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d109      	bne.n	8004418 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <chk_lock+0x80>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d101      	bne.n	8004414 <chk_lock+0x84>
 8004410:	2300      	movs	r3, #0
 8004412:	e010      	b.n	8004436 <chk_lock+0xa6>
 8004414:	2312      	movs	r3, #18
 8004416:	e00e      	b.n	8004436 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d108      	bne.n	8004430 <chk_lock+0xa0>
 800441e:	4a09      	ldr	r2, [pc, #36]	; (8004444 <chk_lock+0xb4>)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	4413      	add	r3, r2
 8004426:	330c      	adds	r3, #12
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800442e:	d101      	bne.n	8004434 <chk_lock+0xa4>
 8004430:	2310      	movs	r3, #16
 8004432:	e000      	b.n	8004436 <chk_lock+0xa6>
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	200067b0 	.word	0x200067b0

08004448 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800444e:	2300      	movs	r3, #0
 8004450:	607b      	str	r3, [r7, #4]
 8004452:	e002      	b.n	800445a <enq_lock+0x12>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3301      	adds	r3, #1
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d806      	bhi.n	800446e <enq_lock+0x26>
 8004460:	4a09      	ldr	r2, [pc, #36]	; (8004488 <enq_lock+0x40>)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	4413      	add	r3, r2
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f2      	bne.n	8004454 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b02      	cmp	r3, #2
 8004472:	bf14      	ite	ne
 8004474:	2301      	movne	r3, #1
 8004476:	2300      	moveq	r3, #0
 8004478:	b2db      	uxtb	r3, r3
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	200067b0 	.word	0x200067b0

0800448c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	e01f      	b.n	80044dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800449c:	4a41      	ldr	r2, [pc, #260]	; (80045a4 <inc_lock+0x118>)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	4413      	add	r3, r2
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d113      	bne.n	80044d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80044ae:	4a3d      	ldr	r2, [pc, #244]	; (80045a4 <inc_lock+0x118>)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	4413      	add	r3, r2
 80044b6:	3304      	adds	r3, #4
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80044be:	429a      	cmp	r2, r3
 80044c0:	d109      	bne.n	80044d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80044c2:	4a38      	ldr	r2, [pc, #224]	; (80045a4 <inc_lock+0x118>)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	4413      	add	r3, r2
 80044ca:	3308      	adds	r3, #8
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d006      	beq.n	80044e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3301      	adds	r3, #1
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d9dc      	bls.n	800449c <inc_lock+0x10>
 80044e2:	e000      	b.n	80044e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80044e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d132      	bne.n	8004552 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	e002      	b.n	80044f8 <inc_lock+0x6c>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3301      	adds	r3, #1
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d806      	bhi.n	800450c <inc_lock+0x80>
 80044fe:	4a29      	ldr	r2, [pc, #164]	; (80045a4 <inc_lock+0x118>)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	4413      	add	r3, r2
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f2      	bne.n	80044f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d101      	bne.n	8004516 <inc_lock+0x8a>
 8004512:	2300      	movs	r3, #0
 8004514:	e040      	b.n	8004598 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4922      	ldr	r1, [pc, #136]	; (80045a4 <inc_lock+0x118>)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	440b      	add	r3, r1
 8004522:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	491e      	ldr	r1, [pc, #120]	; (80045a4 <inc_lock+0x118>)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	440b      	add	r3, r1
 8004530:	3304      	adds	r3, #4
 8004532:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	695a      	ldr	r2, [r3, #20]
 8004538:	491a      	ldr	r1, [pc, #104]	; (80045a4 <inc_lock+0x118>)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	440b      	add	r3, r1
 8004540:	3308      	adds	r3, #8
 8004542:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004544:	4a17      	ldr	r2, [pc, #92]	; (80045a4 <inc_lock+0x118>)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	4413      	add	r3, r2
 800454c:	330c      	adds	r3, #12
 800454e:	2200      	movs	r2, #0
 8004550:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d009      	beq.n	800456c <inc_lock+0xe0>
 8004558:	4a12      	ldr	r2, [pc, #72]	; (80045a4 <inc_lock+0x118>)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	4413      	add	r3, r2
 8004560:	330c      	adds	r3, #12
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <inc_lock+0xe0>
 8004568:	2300      	movs	r3, #0
 800456a:	e015      	b.n	8004598 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d108      	bne.n	8004584 <inc_lock+0xf8>
 8004572:	4a0c      	ldr	r2, [pc, #48]	; (80045a4 <inc_lock+0x118>)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	4413      	add	r3, r2
 800457a:	330c      	adds	r3, #12
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	3301      	adds	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	e001      	b.n	8004588 <inc_lock+0xfc>
 8004584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004588:	4906      	ldr	r1, [pc, #24]	; (80045a4 <inc_lock+0x118>)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	440b      	add	r3, r1
 8004590:	330c      	adds	r3, #12
 8004592:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3301      	adds	r3, #1
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	200067b0 	.word	0x200067b0

080045a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d825      	bhi.n	8004608 <dec_lock+0x60>
		n = Files[i].ctr;
 80045bc:	4a17      	ldr	r2, [pc, #92]	; (800461c <dec_lock+0x74>)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	4413      	add	r3, r2
 80045c4:	330c      	adds	r3, #12
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80045ca:	89fb      	ldrh	r3, [r7, #14]
 80045cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d0:	d101      	bne.n	80045d6 <dec_lock+0x2e>
 80045d2:	2300      	movs	r3, #0
 80045d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80045d6:	89fb      	ldrh	r3, [r7, #14]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <dec_lock+0x3a>
 80045dc:	89fb      	ldrh	r3, [r7, #14]
 80045de:	3b01      	subs	r3, #1
 80045e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80045e2:	4a0e      	ldr	r2, [pc, #56]	; (800461c <dec_lock+0x74>)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	4413      	add	r3, r2
 80045ea:	330c      	adds	r3, #12
 80045ec:	89fa      	ldrh	r2, [r7, #14]
 80045ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80045f0:	89fb      	ldrh	r3, [r7, #14]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d105      	bne.n	8004602 <dec_lock+0x5a>
 80045f6:	4a09      	ldr	r2, [pc, #36]	; (800461c <dec_lock+0x74>)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	4413      	add	r3, r2
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	737b      	strb	r3, [r7, #13]
 8004606:	e001      	b.n	800460c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004608:	2302      	movs	r3, #2
 800460a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800460c:	7b7b      	ldrb	r3, [r7, #13]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	200067b0 	.word	0x200067b0

08004620 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	e010      	b.n	8004650 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800462e:	4a0d      	ldr	r2, [pc, #52]	; (8004664 <clear_lock+0x44>)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	4413      	add	r3, r2
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	d105      	bne.n	800464a <clear_lock+0x2a>
 800463e:	4a09      	ldr	r2, [pc, #36]	; (8004664 <clear_lock+0x44>)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	4413      	add	r3, r2
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3301      	adds	r3, #1
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d9eb      	bls.n	800462e <clear_lock+0xe>
	}
}
 8004656:	bf00      	nop
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	200067b0 	.word	0x200067b0

08004668 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	78db      	ldrb	r3, [r3, #3]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d034      	beq.n	80046e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004680:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	7858      	ldrb	r0, [r3, #1]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800468c:	2301      	movs	r3, #1
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	f7ff fd40 	bl	8004114 <disk_write>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800469a:	2301      	movs	r3, #1
 800469c:	73fb      	strb	r3, [r7, #15]
 800469e:	e022      	b.n	80046e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	1ad2      	subs	r2, r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d217      	bcs.n	80046e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	789b      	ldrb	r3, [r3, #2]
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	e010      	b.n	80046e0 <sync_window+0x78>
					wsect += fs->fsize;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4413      	add	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	7858      	ldrb	r0, [r3, #1]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80046d2:	2301      	movs	r3, #1
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	f7ff fd1d 	bl	8004114 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	3b01      	subs	r3, #1
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d8eb      	bhi.n	80046be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d01b      	beq.n	8004740 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff ffad 	bl	8004668 <sync_window>
 800470e:	4603      	mov	r3, r0
 8004710:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d113      	bne.n	8004740 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	7858      	ldrb	r0, [r3, #1]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004722:	2301      	movs	r3, #1
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	f7ff fcd5 	bl	80040d4 <disk_read>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d004      	beq.n	800473a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004730:	f04f 33ff 	mov.w	r3, #4294967295
 8004734:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004736:	2301      	movs	r3, #1
 8004738:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004740:	7bfb      	ldrb	r3, [r7, #15]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff ff87 	bl	8004668 <sync_window>
 800475a:	4603      	mov	r3, r0
 800475c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d159      	bne.n	8004818 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b03      	cmp	r3, #3
 800476a:	d149      	bne.n	8004800 <sync_fs+0xb4>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	791b      	ldrb	r3, [r3, #4]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d145      	bne.n	8004800 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	899b      	ldrh	r3, [r3, #12]
 800477e:	461a      	mov	r2, r3
 8004780:	2100      	movs	r1, #0
 8004782:	f7ff fda8 	bl	80042d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3338      	adds	r3, #56	; 0x38
 800478a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800478e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fd37 	bl	8004206 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3338      	adds	r3, #56	; 0x38
 800479c:	4921      	ldr	r1, [pc, #132]	; (8004824 <sync_fs+0xd8>)
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fd4c 	bl	800423c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3338      	adds	r3, #56	; 0x38
 80047a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80047ac:	491e      	ldr	r1, [pc, #120]	; (8004828 <sync_fs+0xdc>)
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fd44 	bl	800423c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3338      	adds	r3, #56	; 0x38
 80047b8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	4619      	mov	r1, r3
 80047c2:	4610      	mov	r0, r2
 80047c4:	f7ff fd3a 	bl	800423c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3338      	adds	r3, #56	; 0x38
 80047cc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	4619      	mov	r1, r3
 80047d6:	4610      	mov	r0, r2
 80047d8:	f7ff fd30 	bl	800423c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	7858      	ldrb	r0, [r3, #1]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047f4:	2301      	movs	r3, #1
 80047f6:	f7ff fc8d 	bl	8004114 <disk_write>
			fs->fsi_flag = 0;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	785b      	ldrb	r3, [r3, #1]
 8004804:	2200      	movs	r2, #0
 8004806:	2100      	movs	r1, #0
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff fca3 	bl	8004154 <disk_ioctl>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <sync_fs+0xcc>
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004818:	7bfb      	ldrb	r3, [r7, #15]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	41615252 	.word	0x41615252
 8004828:	61417272 	.word	0x61417272

0800482c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	3b02      	subs	r3, #2
 800483a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	3b02      	subs	r3, #2
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d301      	bcc.n	800484c <clust2sect+0x20>
 8004848:	2300      	movs	r3, #0
 800484a:	e008      	b.n	800485e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	895b      	ldrh	r3, [r3, #10]
 8004850:	461a      	mov	r2, r3
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	fb03 f202 	mul.w	r2, r3, r2
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	4413      	add	r3, r2
}
 800485e:	4618      	mov	r0, r3
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b086      	sub	sp, #24
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d904      	bls.n	800488a <get_fat+0x20>
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d302      	bcc.n	8004890 <get_fat+0x26>
		val = 1;	/* Internal error */
 800488a:	2301      	movs	r3, #1
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e0bb      	b.n	8004a08 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004890:	f04f 33ff 	mov.w	r3, #4294967295
 8004894:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b03      	cmp	r3, #3
 800489c:	f000 8083 	beq.w	80049a6 <get_fat+0x13c>
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	f300 80a7 	bgt.w	80049f4 <get_fat+0x18a>
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d002      	beq.n	80048b0 <get_fat+0x46>
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d056      	beq.n	800495c <get_fat+0xf2>
 80048ae:	e0a1      	b.n	80049f4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4413      	add	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	899b      	ldrh	r3, [r3, #12]
 80048c6:	4619      	mov	r1, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80048ce:	4413      	add	r3, r2
 80048d0:	4619      	mov	r1, r3
 80048d2:	6938      	ldr	r0, [r7, #16]
 80048d4:	f7ff ff0c 	bl	80046f0 <move_window>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f040 808d 	bne.w	80049fa <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	60fa      	str	r2, [r7, #12]
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	8992      	ldrh	r2, [r2, #12]
 80048ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80048ee:	fb01 f202 	mul.w	r2, r1, r2
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4413      	add	r3, r2
 80048f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048fc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	899b      	ldrh	r3, [r3, #12]
 8004906:	4619      	mov	r1, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	fbb3 f3f1 	udiv	r3, r3, r1
 800490e:	4413      	add	r3, r2
 8004910:	4619      	mov	r1, r3
 8004912:	6938      	ldr	r0, [r7, #16]
 8004914:	f7ff feec 	bl	80046f0 <move_window>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d16f      	bne.n	80049fe <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	899b      	ldrh	r3, [r3, #12]
 8004922:	461a      	mov	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	fbb3 f1f2 	udiv	r1, r3, r2
 800492a:	fb01 f202 	mul.w	r2, r1, r2
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4413      	add	r3, r2
 8004934:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	461a      	mov	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4313      	orrs	r3, r2
 8004940:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <get_fat+0xe8>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	091b      	lsrs	r3, r3, #4
 8004950:	e002      	b.n	8004958 <get_fat+0xee>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004958:	617b      	str	r3, [r7, #20]
			break;
 800495a:	e055      	b.n	8004a08 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	899b      	ldrh	r3, [r3, #12]
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	b29b      	uxth	r3, r3
 8004968:	4619      	mov	r1, r3
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004970:	4413      	add	r3, r2
 8004972:	4619      	mov	r1, r3
 8004974:	6938      	ldr	r0, [r7, #16]
 8004976:	f7ff febb 	bl	80046f0 <move_window>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d140      	bne.n	8004a02 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	8992      	ldrh	r2, [r2, #12]
 800498e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004992:	fb00 f202 	mul.w	r2, r0, r2
 8004996:	1a9b      	subs	r3, r3, r2
 8004998:	440b      	add	r3, r1
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff fbf8 	bl	8004190 <ld_word>
 80049a0:	4603      	mov	r3, r0
 80049a2:	617b      	str	r3, [r7, #20]
			break;
 80049a4:	e030      	b.n	8004a08 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	899b      	ldrh	r3, [r3, #12]
 80049ae:	089b      	lsrs	r3, r3, #2
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	4619      	mov	r1, r3
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80049ba:	4413      	add	r3, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	6938      	ldr	r0, [r7, #16]
 80049c0:	f7ff fe96 	bl	80046f0 <move_window>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d11d      	bne.n	8004a06 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	8992      	ldrh	r2, [r2, #12]
 80049d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80049dc:	fb00 f202 	mul.w	r2, r0, r2
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	440b      	add	r3, r1
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff fbeb 	bl	80041c0 <ld_dword>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049f0:	617b      	str	r3, [r7, #20]
			break;
 80049f2:	e009      	b.n	8004a08 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80049f4:	2301      	movs	r3, #1
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	e006      	b.n	8004a08 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80049fa:	bf00      	nop
 80049fc:	e004      	b.n	8004a08 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80049fe:	bf00      	nop
 8004a00:	e002      	b.n	8004a08 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004a02:	bf00      	nop
 8004a04:	e000      	b.n	8004a08 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004a06:	bf00      	nop
		}
	}

	return val;
 8004a08:	697b      	ldr	r3, [r7, #20]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004a12:	b590      	push	{r4, r7, lr}
 8004a14:	b089      	sub	sp, #36	; 0x24
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	f240 8102 	bls.w	8004c2e <put_fat+0x21c>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	f080 80fc 	bcs.w	8004c2e <put_fat+0x21c>
		switch (fs->fs_type) {
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	f000 80b6 	beq.w	8004bac <put_fat+0x19a>
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	f300 80fd 	bgt.w	8004c40 <put_fat+0x22e>
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d003      	beq.n	8004a52 <put_fat+0x40>
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	f000 8083 	beq.w	8004b56 <put_fat+0x144>
 8004a50:	e0f6      	b.n	8004c40 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	61bb      	str	r3, [r7, #24]
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	085b      	lsrs	r3, r3, #1
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	899b      	ldrh	r3, [r3, #12]
 8004a68:	4619      	mov	r1, r3
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a70:	4413      	add	r3, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f7ff fe3b 	bl	80046f0 <move_window>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a7e:	7ffb      	ldrb	r3, [r7, #31]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f040 80d6 	bne.w	8004c32 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	61ba      	str	r2, [r7, #24]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	8992      	ldrh	r2, [r2, #12]
 8004a96:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a9a:	fb00 f202 	mul.w	r2, r0, r2
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00d      	beq.n	8004aca <put_fat+0xb8>
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	b25b      	sxtb	r3, r3
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	b25a      	sxtb	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	b25b      	sxtb	r3, r3
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	b25b      	sxtb	r3, r3
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	e001      	b.n	8004ace <put_fat+0xbc>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	899b      	ldrh	r3, [r3, #12]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ae8:	4413      	add	r3, r2
 8004aea:	4619      	mov	r1, r3
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7ff fdff 	bl	80046f0 <move_window>
 8004af2:	4603      	mov	r3, r0
 8004af4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004af6:	7ffb      	ldrb	r3, [r7, #31]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f040 809c 	bne.w	8004c36 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	899b      	ldrh	r3, [r3, #12]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b10:	fb00 f202 	mul.w	r2, r0, r2
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	440b      	add	r3, r1
 8004b18:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <put_fat+0x11a>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	091b      	lsrs	r3, r3, #4
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	e00e      	b.n	8004b4a <put_fat+0x138>
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	b25b      	sxtb	r3, r3
 8004b32:	f023 030f 	bic.w	r3, r3, #15
 8004b36:	b25a      	sxtb	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	b25b      	sxtb	r3, r3
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	b25b      	sxtb	r3, r3
 8004b44:	4313      	orrs	r3, r2
 8004b46:	b25b      	sxtb	r3, r3
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	70da      	strb	r2, [r3, #3]
			break;
 8004b54:	e074      	b.n	8004c40 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	899b      	ldrh	r3, [r3, #12]
 8004b5e:	085b      	lsrs	r3, r3, #1
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	4619      	mov	r1, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b6a:	4413      	add	r3, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff fdbe 	bl	80046f0 <move_window>
 8004b74:	4603      	mov	r3, r0
 8004b76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b78:	7ffb      	ldrb	r3, [r7, #31]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d15d      	bne.n	8004c3a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	8992      	ldrh	r2, [r2, #12]
 8004b8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b90:	fb00 f202 	mul.w	r2, r0, r2
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	440b      	add	r3, r1
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	b292      	uxth	r2, r2
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff fb31 	bl	8004206 <st_word>
			fs->wflag = 1;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	70da      	strb	r2, [r3, #3]
			break;
 8004baa:	e049      	b.n	8004c40 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	899b      	ldrh	r3, [r3, #12]
 8004bb4:	089b      	lsrs	r3, r3, #2
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	4619      	mov	r1, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bc0:	4413      	add	r3, r2
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f7ff fd93 	bl	80046f0 <move_window>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004bce:	7ffb      	ldrb	r3, [r7, #31]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d134      	bne.n	8004c3e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	8992      	ldrh	r2, [r2, #12]
 8004be8:	fbb3 f0f2 	udiv	r0, r3, r2
 8004bec:	fb00 f202 	mul.w	r2, r0, r2
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff fae3 	bl	80041c0 <ld_dword>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004c00:	4323      	orrs	r3, r4
 8004c02:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	8992      	ldrh	r2, [r2, #12]
 8004c12:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c16:	fb00 f202 	mul.w	r2, r0, r2
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff fb0b 	bl	800423c <st_dword>
			fs->wflag = 1;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	70da      	strb	r2, [r3, #3]
			break;
 8004c2c:	e008      	b.n	8004c40 <put_fat+0x22e>
		}
	}
 8004c2e:	bf00      	nop
 8004c30:	e006      	b.n	8004c40 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004c32:	bf00      	nop
 8004c34:	e004      	b.n	8004c40 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004c36:	bf00      	nop
 8004c38:	e002      	b.n	8004c40 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004c3a:	bf00      	nop
 8004c3c:	e000      	b.n	8004c40 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004c3e:	bf00      	nop
	return res;
 8004c40:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3724      	adds	r7, #36	; 0x24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd90      	pop	{r4, r7, pc}

08004c4a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b088      	sub	sp, #32
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d904      	bls.n	8004c70 <remove_chain+0x26>
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d301      	bcc.n	8004c74 <remove_chain+0x2a>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e04b      	b.n	8004d0c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00c      	beq.n	8004c94 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	69b8      	ldr	r0, [r7, #24]
 8004c82:	f7ff fec6 	bl	8004a12 <put_fat>
 8004c86:	4603      	mov	r3, r0
 8004c88:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004c8a:	7ffb      	ldrb	r3, [r7, #31]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <remove_chain+0x4a>
 8004c90:	7ffb      	ldrb	r3, [r7, #31]
 8004c92:	e03b      	b.n	8004d0c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f7ff fde7 	bl	800486a <get_fat>
 8004c9c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d031      	beq.n	8004d08 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <remove_chain+0x64>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e02e      	b.n	8004d0c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d101      	bne.n	8004cba <remove_chain+0x70>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e028      	b.n	8004d0c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004cba:	2200      	movs	r2, #0
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	69b8      	ldr	r0, [r7, #24]
 8004cc0:	f7ff fea7 	bl	8004a12 <put_fat>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004cc8:	7ffb      	ldrb	r3, [r7, #31]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <remove_chain+0x88>
 8004cce:	7ffb      	ldrb	r3, [r7, #31]
 8004cd0:	e01c      	b.n	8004d0c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	3b02      	subs	r3, #2
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d20b      	bcs.n	8004cf8 <remove_chain+0xae>
			fs->free_clst++;
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	791b      	ldrb	r3, [r3, #4]
 8004cee:	f043 0301 	orr.w	r3, r3, #1
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d3c6      	bcc.n	8004c94 <remove_chain+0x4a>
 8004d06:	e000      	b.n	8004d0a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004d08:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3720      	adds	r7, #32
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10d      	bne.n	8004d46 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d004      	beq.n	8004d40 <create_chain+0x2c>
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d31b      	bcc.n	8004d78 <create_chain+0x64>
 8004d40:	2301      	movs	r3, #1
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	e018      	b.n	8004d78 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004d46:	6839      	ldr	r1, [r7, #0]
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff fd8e 	bl	800486a <get_fat>
 8004d4e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d801      	bhi.n	8004d5a <create_chain+0x46>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e070      	b.n	8004e3c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d60:	d101      	bne.n	8004d66 <create_chain+0x52>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	e06a      	b.n	8004e3c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d201      	bcs.n	8004d74 <create_chain+0x60>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	e063      	b.n	8004e3c <create_chain+0x128>
		scl = clst;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d307      	bcc.n	8004d9c <create_chain+0x88>
				ncl = 2;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d901      	bls.n	8004d9c <create_chain+0x88>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e04f      	b.n	8004e3c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004d9c:	69f9      	ldr	r1, [r7, #28]
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff fd63 	bl	800486a <get_fat>
 8004da4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00e      	beq.n	8004dca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d003      	beq.n	8004dba <create_chain+0xa6>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db8:	d101      	bne.n	8004dbe <create_chain+0xaa>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	e03e      	b.n	8004e3c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d1da      	bne.n	8004d7c <create_chain+0x68>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e038      	b.n	8004e3c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004dca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd0:	69f9      	ldr	r1, [r7, #28]
 8004dd2:	6938      	ldr	r0, [r7, #16]
 8004dd4:	f7ff fe1d 	bl	8004a12 <put_fat>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004ddc:	7dfb      	ldrb	r3, [r7, #23]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d109      	bne.n	8004df6 <create_chain+0xe2>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d006      	beq.n	8004df6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004de8:	69fa      	ldr	r2, [r7, #28]
 8004dea:	6839      	ldr	r1, [r7, #0]
 8004dec:	6938      	ldr	r0, [r7, #16]
 8004dee:	f7ff fe10 	bl	8004a12 <put_fat>
 8004df2:	4603      	mov	r3, r0
 8004df4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d116      	bne.n	8004e2a <create_chain+0x116>
		fs->last_clst = ncl;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	69fa      	ldr	r2, [r7, #28]
 8004e00:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	3b02      	subs	r3, #2
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d804      	bhi.n	8004e1a <create_chain+0x106>
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	1e5a      	subs	r2, r3, #1
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	791b      	ldrb	r3, [r3, #4]
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	711a      	strb	r2, [r3, #4]
 8004e28:	e007      	b.n	8004e3a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004e2a:	7dfb      	ldrb	r3, [r7, #23]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d102      	bne.n	8004e36 <create_chain+0x122>
 8004e30:	f04f 33ff 	mov.w	r3, #4294967295
 8004e34:	e000      	b.n	8004e38 <create_chain+0x124>
 8004e36:	2301      	movs	r3, #1
 8004e38:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004e3a:	69fb      	ldr	r3, [r7, #28]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	3304      	adds	r3, #4
 8004e5a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	899b      	ldrh	r3, [r3, #12]
 8004e60:	461a      	mov	r2, r3
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	8952      	ldrh	r2, [r2, #10]
 8004e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e70:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1d1a      	adds	r2, r3, #4
 8004e76:	613a      	str	r2, [r7, #16]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <clmt_clust+0x42>
 8004e82:	2300      	movs	r3, #0
 8004e84:	e010      	b.n	8004ea8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d307      	bcc.n	8004e9e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	617b      	str	r3, [r7, #20]
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e9c:	e7e9      	b.n	8004e72 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004e9e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	4413      	add	r3, r2
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eca:	d204      	bcs.n	8004ed6 <dir_sdi+0x22>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <dir_sdi+0x26>
		return FR_INT_ERR;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e071      	b.n	8004fbe <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <dir_sdi+0x46>
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d902      	bls.n	8004efa <dir_sdi+0x46>
		clst = fs->dirbase;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10c      	bne.n	8004f1a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	8912      	ldrh	r2, [r2, #8]
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d301      	bcc.n	8004f10 <dir_sdi+0x5c>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e056      	b.n	8004fbe <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	61da      	str	r2, [r3, #28]
 8004f18:	e02d      	b.n	8004f76 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	895b      	ldrh	r3, [r3, #10]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	899b      	ldrh	r3, [r3, #12]
 8004f24:	fb02 f303 	mul.w	r3, r2, r3
 8004f28:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004f2a:	e019      	b.n	8004f60 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6979      	ldr	r1, [r7, #20]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff fc9a 	bl	800486a <get_fat>
 8004f36:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3e:	d101      	bne.n	8004f44 <dir_sdi+0x90>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e03c      	b.n	8004fbe <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d904      	bls.n	8004f54 <dir_sdi+0xa0>
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d301      	bcc.n	8004f58 <dir_sdi+0xa4>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e032      	b.n	8004fbe <dir_sdi+0x10a>
			ofs -= csz;
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d2e1      	bcs.n	8004f2c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004f68:	6979      	ldr	r1, [r7, #20]
 8004f6a:	6938      	ldr	r0, [r7, #16]
 8004f6c:	f7ff fc5e 	bl	800482c <clust2sect>
 8004f70:	4602      	mov	r2, r0
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <dir_sdi+0xd4>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e01a      	b.n	8004fbe <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69da      	ldr	r2, [r3, #28]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	899b      	ldrh	r3, [r3, #12]
 8004f90:	4619      	mov	r1, r3
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f98:	441a      	add	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	899b      	ldrh	r3, [r3, #12]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	fbb3 f0f2 	udiv	r0, r3, r2
 8004fb0:	fb00 f202 	mul.w	r2, r0, r2
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	18ca      	adds	r2, r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b086      	sub	sp, #24
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	3320      	adds	r3, #32
 8004fdc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <dir_next+0x28>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fec:	d301      	bcc.n	8004ff2 <dir_next+0x2c>
 8004fee:	2304      	movs	r3, #4
 8004ff0:	e0bb      	b.n	800516a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	899b      	ldrh	r3, [r3, #12]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ffe:	fb01 f202 	mul.w	r2, r1, r2
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	2b00      	cmp	r3, #0
 8005006:	f040 809d 	bne.w	8005144 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10b      	bne.n	8005034 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	8912      	ldrh	r2, [r2, #8]
 8005024:	4293      	cmp	r3, r2
 8005026:	f0c0 808d 	bcc.w	8005144 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	61da      	str	r2, [r3, #28]
 8005030:	2304      	movs	r3, #4
 8005032:	e09a      	b.n	800516a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	899b      	ldrh	r3, [r3, #12]
 8005038:	461a      	mov	r2, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	8952      	ldrh	r2, [r2, #10]
 8005044:	3a01      	subs	r2, #1
 8005046:	4013      	ands	r3, r2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d17b      	bne.n	8005144 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f7ff fc08 	bl	800486a <get_fat>
 800505a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d801      	bhi.n	8005066 <dir_next+0xa0>
 8005062:	2302      	movs	r3, #2
 8005064:	e081      	b.n	800516a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506c:	d101      	bne.n	8005072 <dir_next+0xac>
 800506e:	2301      	movs	r3, #1
 8005070:	e07b      	b.n	800516a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	429a      	cmp	r2, r3
 800507a:	d359      	bcc.n	8005130 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d104      	bne.n	800508c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	61da      	str	r2, [r3, #28]
 8005088:	2304      	movs	r3, #4
 800508a:	e06e      	b.n	800516a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	4619      	mov	r1, r3
 8005094:	4610      	mov	r0, r2
 8005096:	f7ff fe3d 	bl	8004d14 <create_chain>
 800509a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <dir_next+0xe0>
 80050a2:	2307      	movs	r3, #7
 80050a4:	e061      	b.n	800516a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <dir_next+0xea>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e05c      	b.n	800516a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b6:	d101      	bne.n	80050bc <dir_next+0xf6>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e056      	b.n	800516a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7ff fad3 	bl	8004668 <sync_window>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <dir_next+0x106>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e04e      	b.n	800516a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	899b      	ldrh	r3, [r3, #12]
 80050d6:	461a      	mov	r2, r3
 80050d8:	2100      	movs	r1, #0
 80050da:	f7ff f8fc 	bl	80042d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80050de:	2300      	movs	r3, #0
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	6979      	ldr	r1, [r7, #20]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7ff fba1 	bl	800482c <clust2sect>
 80050ea:	4602      	mov	r2, r0
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	635a      	str	r2, [r3, #52]	; 0x34
 80050f0:	e012      	b.n	8005118 <dir_next+0x152>
						fs->wflag = 1;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7ff fab5 	bl	8004668 <sync_window>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <dir_next+0x142>
 8005104:	2301      	movs	r3, #1
 8005106:	e030      	b.n	800516a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	3301      	adds	r3, #1
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	635a      	str	r2, [r3, #52]	; 0x34
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	895b      	ldrh	r3, [r3, #10]
 800511c:	461a      	mov	r2, r3
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4293      	cmp	r3, r2
 8005122:	d3e6      	bcc.n	80050f2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad2      	subs	r2, r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005136:	6979      	ldr	r1, [r7, #20]
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f7ff fb77 	bl	800482c <clust2sect>
 800513e:	4602      	mov	r2, r0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	899b      	ldrh	r3, [r3, #12]
 8005154:	461a      	mov	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	fbb3 f0f2 	udiv	r0, r3, r2
 800515c:	fb00 f202 	mul.w	r2, r0, r2
 8005160:	1a9b      	subs	r3, r3, r2
 8005162:	18ca      	adds	r2, r1, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b086      	sub	sp, #24
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005182:	2100      	movs	r1, #0
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff fe95 	bl	8004eb4 <dir_sdi>
 800518a:	4603      	mov	r3, r0
 800518c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d12b      	bne.n	80051ec <dir_alloc+0x7a>
		n = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	4619      	mov	r1, r3
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff faa6 	bl	80046f0 <move_window>
 80051a4:	4603      	mov	r3, r0
 80051a6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d11d      	bne.n	80051ea <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2be5      	cmp	r3, #229	; 0xe5
 80051b6:	d004      	beq.n	80051c2 <dir_alloc+0x50>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d107      	bne.n	80051d2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	3301      	adds	r3, #1
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d102      	bne.n	80051d6 <dir_alloc+0x64>
 80051d0:	e00c      	b.n	80051ec <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80051d2:	2300      	movs	r3, #0
 80051d4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80051d6:	2101      	movs	r1, #1
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff fef4 	bl	8004fc6 <dir_next>
 80051de:	4603      	mov	r3, r0
 80051e0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0d7      	beq.n	8005198 <dir_alloc+0x26>
 80051e8:	e000      	b.n	80051ec <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80051ea:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80051ec:	7dfb      	ldrb	r3, [r7, #23]
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d101      	bne.n	80051f6 <dir_alloc+0x84>
 80051f2:	2307      	movs	r3, #7
 80051f4:	75fb      	strb	r3, [r7, #23]
	return res;
 80051f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	331a      	adds	r3, #26
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe ffbe 	bl	8004190 <ld_word>
 8005214:	4603      	mov	r3, r0
 8005216:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b03      	cmp	r3, #3
 800521e:	d109      	bne.n	8005234 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	3314      	adds	r3, #20
 8005224:	4618      	mov	r0, r3
 8005226:	f7fe ffb3 	bl	8004190 <ld_word>
 800522a:	4603      	mov	r3, r0
 800522c:	041b      	lsls	r3, r3, #16
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005234:	68fb      	ldr	r3, [r7, #12]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	331a      	adds	r3, #26
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	b292      	uxth	r2, r2
 8005252:	4611      	mov	r1, r2
 8005254:	4618      	mov	r0, r3
 8005256:	f7fe ffd6 	bl	8004206 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b03      	cmp	r3, #3
 8005260:	d109      	bne.n	8005276 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f103 0214 	add.w	r2, r3, #20
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	0c1b      	lsrs	r3, r3, #16
 800526c:	b29b      	uxth	r3, r3
 800526e:	4619      	mov	r1, r3
 8005270:	4610      	mov	r0, r2
 8005272:	f7fe ffc8 	bl	8004206 <st_word>
	}
}
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	331a      	adds	r3, #26
 800528e:	4618      	mov	r0, r3
 8005290:	f7fe ff7e 	bl	8004190 <ld_word>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <cmp_lfn+0x1e>
 800529a:	2300      	movs	r3, #0
 800529c:	e059      	b.n	8005352 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052a6:	1e5a      	subs	r2, r3, #1
 80052a8:	4613      	mov	r3, r2
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80052b4:	2301      	movs	r3, #1
 80052b6:	81fb      	strh	r3, [r7, #14]
 80052b8:	2300      	movs	r3, #0
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	e033      	b.n	8005326 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80052be:	4a27      	ldr	r2, [pc, #156]	; (800535c <cmp_lfn+0xdc>)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	4413      	add	r3, r2
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	4413      	add	r3, r2
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fe ff5f 	bl	8004190 <ld_word>
 80052d2:	4603      	mov	r3, r0
 80052d4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80052d6:	89fb      	ldrh	r3, [r7, #14]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01a      	beq.n	8005312 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2bfe      	cmp	r3, #254	; 0xfe
 80052e0:	d812      	bhi.n	8005308 <cmp_lfn+0x88>
 80052e2:	89bb      	ldrh	r3, [r7, #12]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f002 f835 	bl	8007354 <ff_wtoupper>
 80052ea:	4603      	mov	r3, r0
 80052ec:	461c      	mov	r4, r3
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	617a      	str	r2, [r7, #20]
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	4413      	add	r3, r2
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f002 f829 	bl	8007354 <ff_wtoupper>
 8005302:	4603      	mov	r3, r0
 8005304:	429c      	cmp	r4, r3
 8005306:	d001      	beq.n	800530c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005308:	2300      	movs	r3, #0
 800530a:	e022      	b.n	8005352 <cmp_lfn+0xd2>
			}
			wc = uc;
 800530c:	89bb      	ldrh	r3, [r7, #12]
 800530e:	81fb      	strh	r3, [r7, #14]
 8005310:	e006      	b.n	8005320 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005312:	89bb      	ldrh	r3, [r7, #12]
 8005314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005318:	4293      	cmp	r3, r2
 800531a:	d001      	beq.n	8005320 <cmp_lfn+0xa0>
 800531c:	2300      	movs	r3, #0
 800531e:	e018      	b.n	8005352 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	3301      	adds	r3, #1
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	2b0c      	cmp	r3, #12
 800532a:	d9c8      	bls.n	80052be <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00b      	beq.n	8005350 <cmp_lfn+0xd0>
 8005338:	89fb      	ldrh	r3, [r7, #14]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d008      	beq.n	8005350 <cmp_lfn+0xd0>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	4413      	add	r3, r2
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <cmp_lfn+0xd0>
 800534c:	2300      	movs	r3, #0
 800534e:	e000      	b.n	8005352 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005350:	2301      	movs	r3, #1
}
 8005352:	4618      	mov	r0, r3
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	bd90      	pop	{r4, r7, pc}
 800535a:	bf00      	nop
 800535c:	08008650 	.word	0x08008650

08005360 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	4611      	mov	r1, r2
 800536c:	461a      	mov	r2, r3
 800536e:	460b      	mov	r3, r1
 8005370:	71fb      	strb	r3, [r7, #7]
 8005372:	4613      	mov	r3, r2
 8005374:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	330d      	adds	r3, #13
 800537a:	79ba      	ldrb	r2, [r7, #6]
 800537c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	330b      	adds	r3, #11
 8005382:	220f      	movs	r2, #15
 8005384:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	330c      	adds	r3, #12
 800538a:	2200      	movs	r2, #0
 800538c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	331a      	adds	r3, #26
 8005392:	2100      	movs	r1, #0
 8005394:	4618      	mov	r0, r3
 8005396:	f7fe ff36 	bl	8004206 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	1e5a      	subs	r2, r3, #1
 800539e:	4613      	mov	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	82fb      	strh	r3, [r7, #22]
 80053ae:	2300      	movs	r3, #0
 80053b0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80053b2:	8afb      	ldrh	r3, [r7, #22]
 80053b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d007      	beq.n	80053cc <put_lfn+0x6c>
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	61fa      	str	r2, [r7, #28]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80053cc:	4a17      	ldr	r2, [pc, #92]	; (800542c <put_lfn+0xcc>)
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	4413      	add	r3, r2
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	4413      	add	r3, r2
 80053da:	8afa      	ldrh	r2, [r7, #22]
 80053dc:	4611      	mov	r1, r2
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fe ff11 	bl	8004206 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80053e4:	8afb      	ldrh	r3, [r7, #22]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d102      	bne.n	80053f0 <put_lfn+0x90>
 80053ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053ee:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	3301      	adds	r3, #1
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b0c      	cmp	r3, #12
 80053fa:	d9da      	bls.n	80053b2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80053fc:	8afb      	ldrh	r3, [r7, #22]
 80053fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005402:	4293      	cmp	r3, r2
 8005404:	d006      	beq.n	8005414 <put_lfn+0xb4>
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d103      	bne.n	800541c <put_lfn+0xbc>
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800541a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	79fa      	ldrb	r2, [r7, #7]
 8005420:	701a      	strb	r2, [r3, #0]
}
 8005422:	bf00      	nop
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	08008650 	.word	0x08008650

08005430 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08c      	sub	sp, #48	; 0x30
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800543e:	220b      	movs	r2, #11
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7fe ff26 	bl	8004294 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b05      	cmp	r3, #5
 800544c:	d92b      	bls.n	80054a6 <gen_numname+0x76>
		sr = seq;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005452:	e022      	b.n	800549a <gen_numname+0x6a>
			wc = *lfn++;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	1c9a      	adds	r2, r3, #2
 8005458:	607a      	str	r2, [r7, #4]
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800545e:	2300      	movs	r3, #0
 8005460:	62bb      	str	r3, [r7, #40]	; 0x28
 8005462:	e017      	b.n	8005494 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	005a      	lsls	r2, r3, #1
 8005468:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	4413      	add	r3, r2
 8005470:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005472:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005474:	085b      	lsrs	r3, r3, #1
 8005476:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <gen_numname+0x5e>
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005488:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800548c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005490:	3301      	adds	r3, #1
 8005492:	62bb      	str	r3, [r7, #40]	; 0x28
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	2b0f      	cmp	r3, #15
 8005498:	d9e4      	bls.n	8005464 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1d8      	bne.n	8005454 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80054a6:	2307      	movs	r3, #7
 80054a8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	3330      	adds	r3, #48	; 0x30
 80054b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80054ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054be:	2b39      	cmp	r3, #57	; 0x39
 80054c0:	d904      	bls.n	80054cc <gen_numname+0x9c>
 80054c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054c6:	3307      	adds	r3, #7
 80054c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	1e5a      	subs	r2, r3, #1
 80054d0:	62ba      	str	r2, [r7, #40]	; 0x28
 80054d2:	3330      	adds	r3, #48	; 0x30
 80054d4:	443b      	add	r3, r7
 80054d6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80054da:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	091b      	lsrs	r3, r3, #4
 80054e2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1df      	bne.n	80054aa <gen_numname+0x7a>
	ns[i] = '~';
 80054ea:	f107 0214 	add.w	r2, r7, #20
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	4413      	add	r3, r2
 80054f2:	227e      	movs	r2, #126	; 0x7e
 80054f4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80054f6:	2300      	movs	r3, #0
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
 80054fa:	e002      	b.n	8005502 <gen_numname+0xd2>
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	3301      	adds	r3, #1
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
 8005502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	429a      	cmp	r2, r3
 8005508:	d205      	bcs.n	8005516 <gen_numname+0xe6>
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	4413      	add	r3, r2
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b20      	cmp	r3, #32
 8005514:	d1f2      	bne.n	80054fc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	2b07      	cmp	r3, #7
 800551a:	d807      	bhi.n	800552c <gen_numname+0xfc>
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	62ba      	str	r2, [r7, #40]	; 0x28
 8005522:	3330      	adds	r3, #48	; 0x30
 8005524:	443b      	add	r3, r7
 8005526:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800552a:	e000      	b.n	800552e <gen_numname+0xfe>
 800552c:	2120      	movs	r1, #32
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	627a      	str	r2, [r7, #36]	; 0x24
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	460a      	mov	r2, r1
 800553a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	2b07      	cmp	r3, #7
 8005540:	d9e9      	bls.n	8005516 <gen_numname+0xe6>
}
 8005542:	bf00      	nop
 8005544:	bf00      	nop
 8005546:	3730      	adds	r7, #48	; 0x30
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005558:	230b      	movs	r3, #11
 800555a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	b2da      	uxtb	r2, r3
 8005560:	0852      	lsrs	r2, r2, #1
 8005562:	01db      	lsls	r3, r3, #7
 8005564:	4313      	orrs	r3, r2
 8005566:	b2da      	uxtb	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	1c59      	adds	r1, r3, #1
 800556c:	6079      	str	r1, [r7, #4]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	4413      	add	r3, r2
 8005572:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	3b01      	subs	r3, #1
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1ed      	bne.n	800555c <sum_sfn+0x10>
	return sum;
 8005580:	7bfb      	ldrb	r3, [r7, #15]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b086      	sub	sp, #24
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800559c:	2100      	movs	r1, #0
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff fc88 	bl	8004eb4 <dir_sdi>
 80055a4:	4603      	mov	r3, r0
 80055a6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <dir_find+0x24>
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
 80055b0:	e0a9      	b.n	8005706 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80055b2:	23ff      	movs	r3, #255	; 0xff
 80055b4:	753b      	strb	r3, [r7, #20]
 80055b6:	7d3b      	ldrb	r3, [r7, #20]
 80055b8:	757b      	strb	r3, [r7, #21]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f04f 32ff 	mov.w	r2, #4294967295
 80055c0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	4619      	mov	r1, r3
 80055c8:	6938      	ldr	r0, [r7, #16]
 80055ca:	f7ff f891 	bl	80046f0 <move_window>
 80055ce:	4603      	mov	r3, r0
 80055d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80055d2:	7dfb      	ldrb	r3, [r7, #23]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f040 8090 	bne.w	80056fa <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80055e2:	7dbb      	ldrb	r3, [r7, #22]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d102      	bne.n	80055ee <dir_find+0x60>
 80055e8:	2304      	movs	r3, #4
 80055ea:	75fb      	strb	r3, [r7, #23]
 80055ec:	e08a      	b.n	8005704 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	330b      	adds	r3, #11
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055fa:	73fb      	strb	r3, [r7, #15]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	7bfa      	ldrb	r2, [r7, #15]
 8005600:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005602:	7dbb      	ldrb	r3, [r7, #22]
 8005604:	2be5      	cmp	r3, #229	; 0xe5
 8005606:	d007      	beq.n	8005618 <dir_find+0x8a>
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <dir_find+0x98>
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	2b0f      	cmp	r3, #15
 8005616:	d006      	beq.n	8005626 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005618:	23ff      	movs	r3, #255	; 0xff
 800561a:	757b      	strb	r3, [r7, #21]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f04f 32ff 	mov.w	r2, #4294967295
 8005622:	631a      	str	r2, [r3, #48]	; 0x30
 8005624:	e05e      	b.n	80056e4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005626:	7bfb      	ldrb	r3, [r7, #15]
 8005628:	2b0f      	cmp	r3, #15
 800562a:	d136      	bne.n	800569a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d154      	bne.n	80056e4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800563a:	7dbb      	ldrb	r3, [r7, #22]
 800563c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00d      	beq.n	8005660 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	7b5b      	ldrb	r3, [r3, #13]
 800564a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800564c:	7dbb      	ldrb	r3, [r7, #22]
 800564e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005652:	75bb      	strb	r3, [r7, #22]
 8005654:	7dbb      	ldrb	r3, [r7, #22]
 8005656:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695a      	ldr	r2, [r3, #20]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005660:	7dba      	ldrb	r2, [r7, #22]
 8005662:	7d7b      	ldrb	r3, [r7, #21]
 8005664:	429a      	cmp	r2, r3
 8005666:	d115      	bne.n	8005694 <dir_find+0x106>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	330d      	adds	r3, #13
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	7d3a      	ldrb	r2, [r7, #20]
 8005672:	429a      	cmp	r2, r3
 8005674:	d10e      	bne.n	8005694 <dir_find+0x106>
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	4619      	mov	r1, r3
 8005680:	4610      	mov	r0, r2
 8005682:	f7ff fdfd 	bl	8005280 <cmp_lfn>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <dir_find+0x106>
 800568c:	7d7b      	ldrb	r3, [r7, #21]
 800568e:	3b01      	subs	r3, #1
 8005690:	b2db      	uxtb	r3, r3
 8005692:	e000      	b.n	8005696 <dir_find+0x108>
 8005694:	23ff      	movs	r3, #255	; 0xff
 8005696:	757b      	strb	r3, [r7, #21]
 8005698:	e024      	b.n	80056e4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800569a:	7d7b      	ldrb	r3, [r7, #21]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <dir_find+0x126>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff ff51 	bl	800554c <sum_sfn>
 80056aa:	4603      	mov	r3, r0
 80056ac:	461a      	mov	r2, r3
 80056ae:	7d3b      	ldrb	r3, [r7, #20]
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d024      	beq.n	80056fe <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10a      	bne.n	80056d8 <dir_find+0x14a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a18      	ldr	r0, [r3, #32]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3324      	adds	r3, #36	; 0x24
 80056ca:	220b      	movs	r2, #11
 80056cc:	4619      	mov	r1, r3
 80056ce:	f7fe fe1d 	bl	800430c <mem_cmp>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d014      	beq.n	8005702 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80056d8:	23ff      	movs	r3, #255	; 0xff
 80056da:	757b      	strb	r3, [r7, #21]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f04f 32ff 	mov.w	r2, #4294967295
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80056e4:	2100      	movs	r1, #0
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff fc6d 	bl	8004fc6 <dir_next>
 80056ec:	4603      	mov	r3, r0
 80056ee:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f43f af65 	beq.w	80055c2 <dir_find+0x34>
 80056f8:	e004      	b.n	8005704 <dir_find+0x176>
		if (res != FR_OK) break;
 80056fa:	bf00      	nop
 80056fc:	e002      	b.n	8005704 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80056fe:	bf00      	nop
 8005700:	e000      	b.n	8005704 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005702:	bf00      	nop

	return res;
 8005704:	7dfb      	ldrb	r3, [r7, #23]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08c      	sub	sp, #48	; 0x30
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005724:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <dir_register+0x20>
 800572c:	2306      	movs	r3, #6
 800572e:	e0e0      	b.n	80058f2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005730:	2300      	movs	r3, #0
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
 8005734:	e002      	b.n	800573c <dir_register+0x2c>
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	3301      	adds	r3, #1
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	4413      	add	r3, r2
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f4      	bne.n	8005736 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005752:	f107 030c 	add.w	r3, r7, #12
 8005756:	220c      	movs	r2, #12
 8005758:	4618      	mov	r0, r3
 800575a:	f7fe fd9b 	bl	8004294 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800575e:	7dfb      	ldrb	r3, [r7, #23]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d032      	beq.n	80057ce <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2240      	movs	r2, #64	; 0x40
 800576c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005770:	2301      	movs	r3, #1
 8005772:	62bb      	str	r3, [r7, #40]	; 0x28
 8005774:	e016      	b.n	80057a4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	f107 010c 	add.w	r1, r7, #12
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	f7ff fe53 	bl	8005430 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff feff 	bl	800558e <dir_find>
 8005790:	4603      	mov	r3, r0
 8005792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a0:	3301      	adds	r3, #1
 80057a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	2b63      	cmp	r3, #99	; 0x63
 80057a8:	d9e5      	bls.n	8005776 <dir_register+0x66>
 80057aa:	e000      	b.n	80057ae <dir_register+0x9e>
			if (res != FR_OK) break;
 80057ac:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b0:	2b64      	cmp	r3, #100	; 0x64
 80057b2:	d101      	bne.n	80057b8 <dir_register+0xa8>
 80057b4:	2307      	movs	r3, #7
 80057b6:	e09c      	b.n	80058f2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80057b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d002      	beq.n	80057c6 <dir_register+0xb6>
 80057c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057c4:	e095      	b.n	80058f2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80057c6:	7dfa      	ldrb	r2, [r7, #23]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d007      	beq.n	80057e8 <dir_register+0xd8>
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	330c      	adds	r3, #12
 80057dc:	4a47      	ldr	r2, [pc, #284]	; (80058fc <dir_register+0x1ec>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	089b      	lsrs	r3, r3, #2
 80057e4:	3301      	adds	r3, #1
 80057e6:	e000      	b.n	80057ea <dir_register+0xda>
 80057e8:	2301      	movs	r3, #1
 80057ea:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80057ec:	6a39      	ldr	r1, [r7, #32]
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff fcbf 	bl	8005172 <dir_alloc>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80057fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d148      	bne.n	8005894 <dir_register+0x184>
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	3b01      	subs	r3, #1
 8005806:	623b      	str	r3, [r7, #32]
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d042      	beq.n	8005894 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695a      	ldr	r2, [r3, #20]
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	015b      	lsls	r3, r3, #5
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff fb4a 	bl	8004eb4 <dir_sdi>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800582a:	2b00      	cmp	r3, #0
 800582c:	d132      	bne.n	8005894 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	3324      	adds	r3, #36	; 0x24
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff fe8a 	bl	800554c <sum_sfn>
 8005838:	4603      	mov	r3, r0
 800583a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	4619      	mov	r1, r3
 8005842:	69f8      	ldr	r0, [r7, #28]
 8005844:	f7fe ff54 	bl	80046f0 <move_window>
 8005848:	4603      	mov	r3, r0
 800584a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800584e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005852:	2b00      	cmp	r3, #0
 8005854:	d11d      	bne.n	8005892 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	6918      	ldr	r0, [r3, #16]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a19      	ldr	r1, [r3, #32]
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	7efb      	ldrb	r3, [r7, #27]
 8005864:	f7ff fd7c 	bl	8005360 <put_lfn>
				fs->wflag = 1;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	2201      	movs	r2, #1
 800586c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800586e:	2100      	movs	r1, #0
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7ff fba8 	bl	8004fc6 <dir_next>
 8005876:	4603      	mov	r3, r0
 8005878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800587c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005880:	2b00      	cmp	r3, #0
 8005882:	d107      	bne.n	8005894 <dir_register+0x184>
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	3b01      	subs	r3, #1
 8005888:	623b      	str	r3, [r7, #32]
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1d5      	bne.n	800583c <dir_register+0x12c>
 8005890:	e000      	b.n	8005894 <dir_register+0x184>
				if (res != FR_OK) break;
 8005892:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005894:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005898:	2b00      	cmp	r3, #0
 800589a:	d128      	bne.n	80058ee <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	4619      	mov	r1, r3
 80058a2:	69f8      	ldr	r0, [r7, #28]
 80058a4:	f7fe ff24 	bl	80046f0 <move_window>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80058ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d11b      	bne.n	80058ee <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	2220      	movs	r2, #32
 80058bc:	2100      	movs	r1, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fe fd09 	bl	80042d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a18      	ldr	r0, [r3, #32]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3324      	adds	r3, #36	; 0x24
 80058cc:	220b      	movs	r2, #11
 80058ce:	4619      	mov	r1, r3
 80058d0:	f7fe fce0 	bl	8004294 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	330c      	adds	r3, #12
 80058e0:	f002 0218 	and.w	r2, r2, #24
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2201      	movs	r2, #1
 80058ec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80058ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3730      	adds	r7, #48	; 0x30
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	4ec4ec4f 	.word	0x4ec4ec4f

08005900 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	61ba      	str	r2, [r7, #24]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4413      	add	r3, r2
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800592e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005930:	2b1f      	cmp	r3, #31
 8005932:	d940      	bls.n	80059b6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005936:	2b2f      	cmp	r3, #47	; 0x2f
 8005938:	d006      	beq.n	8005948 <create_name+0x48>
 800593a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800593c:	2b5c      	cmp	r3, #92	; 0x5c
 800593e:	d110      	bne.n	8005962 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005940:	e002      	b.n	8005948 <create_name+0x48>
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	3301      	adds	r3, #1
 8005946:	61bb      	str	r3, [r7, #24]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	4413      	add	r3, r2
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b2f      	cmp	r3, #47	; 0x2f
 8005952:	d0f6      	beq.n	8005942 <create_name+0x42>
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	4413      	add	r3, r2
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b5c      	cmp	r3, #92	; 0x5c
 800595e:	d0f0      	beq.n	8005942 <create_name+0x42>
			break;
 8005960:	e02a      	b.n	80059b8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2bfe      	cmp	r3, #254	; 0xfe
 8005966:	d901      	bls.n	800596c <create_name+0x6c>
 8005968:	2306      	movs	r3, #6
 800596a:	e17d      	b.n	8005c68 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800596c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800596e:	b2db      	uxtb	r3, r3
 8005970:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005974:	2101      	movs	r1, #1
 8005976:	4618      	mov	r0, r3
 8005978:	f001 fcb0 	bl	80072dc <ff_convert>
 800597c:	4603      	mov	r3, r0
 800597e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <create_name+0x8a>
 8005986:	2306      	movs	r3, #6
 8005988:	e16e      	b.n	8005c68 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800598a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800598c:	2b7f      	cmp	r3, #127	; 0x7f
 800598e:	d809      	bhi.n	80059a4 <create_name+0xa4>
 8005990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005992:	4619      	mov	r1, r3
 8005994:	488d      	ldr	r0, [pc, #564]	; (8005bcc <create_name+0x2cc>)
 8005996:	f7fe fce0 	bl	800435a <chk_chr>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <create_name+0xa4>
 80059a0:	2306      	movs	r3, #6
 80059a2:	e161      	b.n	8005c68 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	617a      	str	r2, [r7, #20]
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80059b2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80059b4:	e7b4      	b.n	8005920 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80059b6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	441a      	add	r2, r3
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80059c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059c4:	2b1f      	cmp	r3, #31
 80059c6:	d801      	bhi.n	80059cc <create_name+0xcc>
 80059c8:	2304      	movs	r3, #4
 80059ca:	e000      	b.n	80059ce <create_name+0xce>
 80059cc:	2300      	movs	r3, #0
 80059ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80059d2:	e011      	b.n	80059f8 <create_name+0xf8>
		w = lfn[di - 1];
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80059da:	3b01      	subs	r3, #1
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80059e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d002      	beq.n	80059f2 <create_name+0xf2>
 80059ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ee:	2b2e      	cmp	r3, #46	; 0x2e
 80059f0:	d106      	bne.n	8005a00 <create_name+0x100>
		di--;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1ea      	bne.n	80059d4 <create_name+0xd4>
 80059fe:	e000      	b.n	8005a02 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005a00:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <create_name+0x118>
 8005a14:	2306      	movs	r3, #6
 8005a16:	e127      	b.n	8005c68 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3324      	adds	r3, #36	; 0x24
 8005a1c:	220b      	movs	r2, #11
 8005a1e:	2120      	movs	r1, #32
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe fc58 	bl	80042d6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005a26:	2300      	movs	r3, #0
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	e002      	b.n	8005a32 <create_name+0x132>
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d0f5      	beq.n	8005a2c <create_name+0x12c>
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a4c:	d0ee      	beq.n	8005a2c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d009      	beq.n	8005a68 <create_name+0x168>
 8005a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a58:	f043 0303 	orr.w	r3, r3, #3
 8005a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005a60:	e002      	b.n	8005a68 <create_name+0x168>
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d009      	beq.n	8005a82 <create_name+0x182>
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a74:	3b01      	subs	r3, #1
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a80:	d1ef      	bne.n	8005a62 <create_name+0x162>

	i = b = 0; ni = 8;
 8005a82:	2300      	movs	r3, #0
 8005a84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a88:	2300      	movs	r3, #0
 8005a8a:	623b      	str	r3, [r7, #32]
 8005a8c:	2308      	movs	r3, #8
 8005a8e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	61ba      	str	r2, [r7, #24]
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005aa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 8090 	beq.w	8005bc8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005aa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d006      	beq.n	8005abc <create_name+0x1bc>
 8005aae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab2:	d10a      	bne.n	8005aca <create_name+0x1ca>
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d006      	beq.n	8005aca <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ac0:	f043 0303 	orr.w	r3, r3, #3
 8005ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ac8:	e07d      	b.n	8005bc6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005aca:	6a3a      	ldr	r2, [r7, #32]
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d203      	bcs.n	8005ada <create_name+0x1da>
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d123      	bne.n	8005b22 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	2b0b      	cmp	r3, #11
 8005ade:	d106      	bne.n	8005aee <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ae4:	f043 0303 	orr.w	r3, r3, #3
 8005ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005aec:	e075      	b.n	8005bda <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d005      	beq.n	8005b02 <create_name+0x202>
 8005af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005afa:	f043 0303 	orr.w	r3, r3, #3
 8005afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d866      	bhi.n	8005bd8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	2308      	movs	r3, #8
 8005b10:	623b      	str	r3, [r7, #32]
 8005b12:	230b      	movs	r3, #11
 8005b14:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005b16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005b20:	e051      	b.n	8005bc6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005b22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b24:	2b7f      	cmp	r3, #127	; 0x7f
 8005b26:	d914      	bls.n	8005b52 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005b28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f001 fbd5 	bl	80072dc <ff_convert>
 8005b32:	4603      	mov	r3, r0
 8005b34:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d004      	beq.n	8005b46 <create_name+0x246>
 8005b3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b3e:	3b80      	subs	r3, #128	; 0x80
 8005b40:	4a23      	ldr	r2, [pc, #140]	; (8005bd0 <create_name+0x2d0>)
 8005b42:	5cd3      	ldrb	r3, [r2, r3]
 8005b44:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005b46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b4a:	f043 0302 	orr.w	r3, r3, #2
 8005b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005b52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <create_name+0x268>
 8005b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	481d      	ldr	r0, [pc, #116]	; (8005bd4 <create_name+0x2d4>)
 8005b5e:	f7fe fbfc 	bl	800435a <chk_chr>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d008      	beq.n	8005b7a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005b68:	235f      	movs	r3, #95	; 0x5f
 8005b6a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b70:	f043 0303 	orr.w	r3, r3, #3
 8005b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b78:	e01b      	b.n	8005bb2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005b7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b7c:	2b40      	cmp	r3, #64	; 0x40
 8005b7e:	d909      	bls.n	8005b94 <create_name+0x294>
 8005b80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b82:	2b5a      	cmp	r3, #90	; 0x5a
 8005b84:	d806      	bhi.n	8005b94 <create_name+0x294>
					b |= 2;
 8005b86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b8a:	f043 0302 	orr.w	r3, r3, #2
 8005b8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005b92:	e00e      	b.n	8005bb2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005b94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b96:	2b60      	cmp	r3, #96	; 0x60
 8005b98:	d90b      	bls.n	8005bb2 <create_name+0x2b2>
 8005b9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b9c:	2b7a      	cmp	r3, #122	; 0x7a
 8005b9e:	d808      	bhi.n	8005bb2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005ba0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ba4:	f043 0301 	orr.w	r3, r3, #1
 8005ba8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005bac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bae:	3b20      	subs	r3, #32
 8005bb0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	623a      	str	r2, [r7, #32]
 8005bb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bba:	b2d1      	uxtb	r1, r2
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	460a      	mov	r2, r1
 8005bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005bc6:	e763      	b.n	8005a90 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005bc8:	bf00      	nop
 8005bca:	e006      	b.n	8005bda <create_name+0x2da>
 8005bcc:	08008588 	.word	0x08008588
 8005bd0:	080085d0 	.word	0x080085d0
 8005bd4:	08008594 	.word	0x08008594
			if (si > di) break;			/* No extension */
 8005bd8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005be0:	2be5      	cmp	r3, #229	; 0xe5
 8005be2:	d103      	bne.n	8005bec <create_name+0x2ec>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2205      	movs	r2, #5
 8005be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d104      	bne.n	8005bfc <create_name+0x2fc>
 8005bf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005bfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c00:	f003 030c 	and.w	r3, r3, #12
 8005c04:	2b0c      	cmp	r3, #12
 8005c06:	d005      	beq.n	8005c14 <create_name+0x314>
 8005c08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c0c:	f003 0303 	and.w	r3, r3, #3
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	d105      	bne.n	8005c20 <create_name+0x320>
 8005c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c18:	f043 0302 	orr.w	r3, r3, #2
 8005c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d117      	bne.n	8005c5c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005c2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d105      	bne.n	8005c44 <create_name+0x344>
 8005c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c3c:	f043 0310 	orr.w	r3, r3, #16
 8005c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005c44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c48:	f003 030c 	and.w	r3, r3, #12
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	d105      	bne.n	8005c5c <create_name+0x35c>
 8005c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c54:	f043 0308 	orr.w	r3, r3, #8
 8005c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005c62:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005c66:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3728      	adds	r7, #40	; 0x28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005c84:	e002      	b.n	8005c8c <follow_path+0x1c>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b2f      	cmp	r3, #47	; 0x2f
 8005c92:	d0f8      	beq.n	8005c86 <follow_path+0x16>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b5c      	cmp	r3, #92	; 0x5c
 8005c9a:	d0f4      	beq.n	8005c86 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b1f      	cmp	r3, #31
 8005ca8:	d80a      	bhi.n	8005cc0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2280      	movs	r2, #128	; 0x80
 8005cae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff f8fd 	bl	8004eb4 <dir_sdi>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	75fb      	strb	r3, [r7, #23]
 8005cbe:	e048      	b.n	8005d52 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005cc0:	463b      	mov	r3, r7
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff fe1b 	bl	8005900 <create_name>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d139      	bne.n	8005d48 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff fc5a 	bl	800558e <dir_find>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005ce4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005ce6:	7dfb      	ldrb	r3, [r7, #23]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005cec:	7dfb      	ldrb	r3, [r7, #23]
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d12c      	bne.n	8005d4c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005cf2:	7afb      	ldrb	r3, [r7, #11]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d127      	bne.n	8005d4c <follow_path+0xdc>
 8005cfc:	2305      	movs	r3, #5
 8005cfe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005d00:	e024      	b.n	8005d4c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005d02:	7afb      	ldrb	r3, [r7, #11]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d121      	bne.n	8005d50 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	799b      	ldrb	r3, [r3, #6]
 8005d10:	f003 0310 	and.w	r3, r3, #16
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d102      	bne.n	8005d1e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005d18:	2305      	movs	r3, #5
 8005d1a:	75fb      	strb	r3, [r7, #23]
 8005d1c:	e019      	b.n	8005d52 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	8992      	ldrh	r2, [r2, #12]
 8005d2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d30:	fb00 f202 	mul.w	r2, r0, r2
 8005d34:	1a9b      	subs	r3, r3, r2
 8005d36:	440b      	add	r3, r1
 8005d38:	4619      	mov	r1, r3
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f7ff fa60 	bl	8005200 <ld_clust>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005d46:	e7bb      	b.n	8005cc0 <follow_path+0x50>
			if (res != FR_OK) break;
 8005d48:	bf00      	nop
 8005d4a:	e002      	b.n	8005d52 <follow_path+0xe2>
				break;
 8005d4c:	bf00      	nop
 8005d4e:	e000      	b.n	8005d52 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005d50:	bf00      	nop
			}
		}
	}

	return res;
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005d64:	f04f 33ff 	mov.w	r3, #4294967295
 8005d68:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d031      	beq.n	8005dd6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	e002      	b.n	8005d80 <get_ldnumber+0x24>
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b1f      	cmp	r3, #31
 8005d86:	d903      	bls.n	8005d90 <get_ldnumber+0x34>
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b3a      	cmp	r3, #58	; 0x3a
 8005d8e:	d1f4      	bne.n	8005d7a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b3a      	cmp	r3, #58	; 0x3a
 8005d96:	d11c      	bne.n	8005dd2 <get_ldnumber+0x76>
			tp = *path;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	60fa      	str	r2, [r7, #12]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	3b30      	subs	r3, #48	; 0x30
 8005da8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2b09      	cmp	r3, #9
 8005dae:	d80e      	bhi.n	8005dce <get_ldnumber+0x72>
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d10a      	bne.n	8005dce <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d107      	bne.n	8005dce <get_ldnumber+0x72>
					vol = (int)i;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	e002      	b.n	8005dd8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005dd6:	693b      	ldr	r3, [r7, #16]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	371c      	adds	r7, #28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	70da      	strb	r2, [r3, #3]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfa:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005dfc:	6839      	ldr	r1, [r7, #0]
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fe fc76 	bl	80046f0 <move_window>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <check_fs+0x2a>
 8005e0a:	2304      	movs	r3, #4
 8005e0c:	e038      	b.n	8005e80 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3338      	adds	r3, #56	; 0x38
 8005e12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fe f9ba 	bl	8004190 <ld_word>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d001      	beq.n	8005e2c <check_fs+0x48>
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e029      	b.n	8005e80 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e32:	2be9      	cmp	r3, #233	; 0xe9
 8005e34:	d009      	beq.n	8005e4a <check_fs+0x66>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e3c:	2beb      	cmp	r3, #235	; 0xeb
 8005e3e:	d11e      	bne.n	8005e7e <check_fs+0x9a>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005e46:	2b90      	cmp	r3, #144	; 0x90
 8005e48:	d119      	bne.n	8005e7e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3338      	adds	r3, #56	; 0x38
 8005e4e:	3336      	adds	r3, #54	; 0x36
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fe f9b5 	bl	80041c0 <ld_dword>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e5c:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <check_fs+0xa4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d101      	bne.n	8005e66 <check_fs+0x82>
 8005e62:	2300      	movs	r3, #0
 8005e64:	e00c      	b.n	8005e80 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3338      	adds	r3, #56	; 0x38
 8005e6a:	3352      	adds	r3, #82	; 0x52
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fe f9a7 	bl	80041c0 <ld_dword>
 8005e72:	4603      	mov	r3, r0
 8005e74:	4a05      	ldr	r2, [pc, #20]	; (8005e8c <check_fs+0xa8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d101      	bne.n	8005e7e <check_fs+0x9a>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e000      	b.n	8005e80 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005e7e:	2302      	movs	r3, #2
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	00544146 	.word	0x00544146
 8005e8c:	33544146 	.word	0x33544146

08005e90 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b096      	sub	sp, #88	; 0x58
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7ff ff59 	bl	8005d5c <get_ldnumber>
 8005eaa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	da01      	bge.n	8005eb6 <find_volume+0x26>
 8005eb2:	230b      	movs	r3, #11
 8005eb4:	e265      	b.n	8006382 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005eb6:	4a9f      	ldr	r2, [pc, #636]	; (8006134 <find_volume+0x2a4>)
 8005eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ebe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <find_volume+0x3a>
 8005ec6:	230c      	movs	r3, #12
 8005ec8:	e25b      	b.n	8006382 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ece:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005ed0:	79fb      	ldrb	r3, [r7, #7]
 8005ed2:	f023 0301 	bic.w	r3, r3, #1
 8005ed6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d01a      	beq.n	8005f16 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe f8b5 	bl	8004054 <disk_status>
 8005eea:	4603      	mov	r3, r0
 8005eec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005ef0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10c      	bne.n	8005f16 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005efc:	79fb      	ldrb	r3, [r7, #7]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d007      	beq.n	8005f12 <find_volume+0x82>
 8005f02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005f0e:	230a      	movs	r3, #10
 8005f10:	e237      	b.n	8006382 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005f12:	2300      	movs	r3, #0
 8005f14:	e235      	b.n	8006382 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	2200      	movs	r2, #0
 8005f1a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f26:	785b      	ldrb	r3, [r3, #1]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fe f8ad 	bl	8004088 <disk_initialize>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005f34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005f40:	2303      	movs	r3, #3
 8005f42:	e21e      	b.n	8006382 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d007      	beq.n	8005f5a <find_volume+0xca>
 8005f4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005f56:	230a      	movs	r3, #10
 8005f58:	e213      	b.n	8006382 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5c:	7858      	ldrb	r0, [r3, #1]
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	330c      	adds	r3, #12
 8005f62:	461a      	mov	r2, r3
 8005f64:	2102      	movs	r1, #2
 8005f66:	f7fe f8f5 	bl	8004154 <disk_ioctl>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <find_volume+0xe4>
 8005f70:	2301      	movs	r3, #1
 8005f72:	e206      	b.n	8006382 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	899b      	ldrh	r3, [r3, #12]
 8005f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7c:	d80d      	bhi.n	8005f9a <find_volume+0x10a>
 8005f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f80:	899b      	ldrh	r3, [r3, #12]
 8005f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f86:	d308      	bcc.n	8005f9a <find_volume+0x10a>
 8005f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8a:	899b      	ldrh	r3, [r3, #12]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f90:	899b      	ldrh	r3, [r3, #12]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	4013      	ands	r3, r2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <find_volume+0x10e>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e1f1      	b.n	8006382 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005fa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fa6:	f7ff ff1d 	bl	8005de4 <check_fs>
 8005faa:	4603      	mov	r3, r0
 8005fac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005fb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d149      	bne.n	800604c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005fb8:	2300      	movs	r3, #0
 8005fba:	643b      	str	r3, [r7, #64]	; 0x40
 8005fbc:	e01e      	b.n	8005ffc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005fcc:	4413      	add	r3, r2
 8005fce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d006      	beq.n	8005fe8 <find_volume+0x158>
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	3308      	adds	r3, #8
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe f8ee 	bl	80041c0 <ld_dword>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	e000      	b.n	8005fea <find_volume+0x15a>
 8005fe8:	2200      	movs	r2, #0
 8005fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	3358      	adds	r3, #88	; 0x58
 8005ff0:	443b      	add	r3, r7
 8005ff2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8005ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d9dd      	bls.n	8005fbe <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006002:	2300      	movs	r3, #0
 8006004:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <find_volume+0x182>
 800600c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800600e:	3b01      	subs	r3, #1
 8006010:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	3358      	adds	r3, #88	; 0x58
 8006018:	443b      	add	r3, r7
 800601a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800601e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <find_volume+0x1a2>
 8006026:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006028:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800602a:	f7ff fedb 	bl	8005de4 <check_fs>
 800602e:	4603      	mov	r3, r0
 8006030:	e000      	b.n	8006034 <find_volume+0x1a4>
 8006032:	2303      	movs	r3, #3
 8006034:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800603c:	2b01      	cmp	r3, #1
 800603e:	d905      	bls.n	800604c <find_volume+0x1bc>
 8006040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006042:	3301      	adds	r3, #1
 8006044:	643b      	str	r3, [r7, #64]	; 0x40
 8006046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006048:	2b03      	cmp	r3, #3
 800604a:	d9e2      	bls.n	8006012 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800604c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006050:	2b04      	cmp	r3, #4
 8006052:	d101      	bne.n	8006058 <find_volume+0x1c8>
 8006054:	2301      	movs	r3, #1
 8006056:	e194      	b.n	8006382 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006058:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800605c:	2b01      	cmp	r3, #1
 800605e:	d901      	bls.n	8006064 <find_volume+0x1d4>
 8006060:	230d      	movs	r3, #13
 8006062:	e18e      	b.n	8006382 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006066:	3338      	adds	r3, #56	; 0x38
 8006068:	330b      	adds	r3, #11
 800606a:	4618      	mov	r0, r3
 800606c:	f7fe f890 	bl	8004190 <ld_word>
 8006070:	4603      	mov	r3, r0
 8006072:	461a      	mov	r2, r3
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	899b      	ldrh	r3, [r3, #12]
 8006078:	429a      	cmp	r2, r3
 800607a:	d001      	beq.n	8006080 <find_volume+0x1f0>
 800607c:	230d      	movs	r3, #13
 800607e:	e180      	b.n	8006382 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	3338      	adds	r3, #56	; 0x38
 8006084:	3316      	adds	r3, #22
 8006086:	4618      	mov	r0, r3
 8006088:	f7fe f882 	bl	8004190 <ld_word>
 800608c:	4603      	mov	r3, r0
 800608e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d106      	bne.n	80060a4 <find_volume+0x214>
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	3338      	adds	r3, #56	; 0x38
 800609a:	3324      	adds	r3, #36	; 0x24
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe f88f 	bl	80041c0 <ld_dword>
 80060a2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80060a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060a8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80060aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ac:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80060b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80060b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b6:	789b      	ldrb	r3, [r3, #2]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d005      	beq.n	80060c8 <find_volume+0x238>
 80060bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060be:	789b      	ldrb	r3, [r3, #2]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d001      	beq.n	80060c8 <find_volume+0x238>
 80060c4:	230d      	movs	r3, #13
 80060c6:	e15c      	b.n	8006382 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	789b      	ldrb	r3, [r3, #2]
 80060cc:	461a      	mov	r2, r3
 80060ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d0:	fb02 f303 	mul.w	r3, r2, r3
 80060d4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80060d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060dc:	b29a      	uxth	r2, r3
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	895b      	ldrh	r3, [r3, #10]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d008      	beq.n	80060fc <find_volume+0x26c>
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	895b      	ldrh	r3, [r3, #10]
 80060ee:	461a      	mov	r2, r3
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	895b      	ldrh	r3, [r3, #10]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	4013      	ands	r3, r2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <find_volume+0x270>
 80060fc:	230d      	movs	r3, #13
 80060fe:	e140      	b.n	8006382 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006102:	3338      	adds	r3, #56	; 0x38
 8006104:	3311      	adds	r3, #17
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe f842 	bl	8004190 <ld_word>
 800610c:	4603      	mov	r3, r0
 800610e:	461a      	mov	r2, r3
 8006110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006112:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	891b      	ldrh	r3, [r3, #8]
 8006118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800611a:	8992      	ldrh	r2, [r2, #12]
 800611c:	0952      	lsrs	r2, r2, #5
 800611e:	b292      	uxth	r2, r2
 8006120:	fbb3 f1f2 	udiv	r1, r3, r2
 8006124:	fb01 f202 	mul.w	r2, r1, r2
 8006128:	1a9b      	subs	r3, r3, r2
 800612a:	b29b      	uxth	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <find_volume+0x2a8>
 8006130:	230d      	movs	r3, #13
 8006132:	e126      	b.n	8006382 <find_volume+0x4f2>
 8006134:	200067a8 	.word	0x200067a8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	3338      	adds	r3, #56	; 0x38
 800613c:	3313      	adds	r3, #19
 800613e:	4618      	mov	r0, r3
 8006140:	f7fe f826 	bl	8004190 <ld_word>
 8006144:	4603      	mov	r3, r0
 8006146:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <find_volume+0x2cc>
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	3338      	adds	r3, #56	; 0x38
 8006152:	3320      	adds	r3, #32
 8006154:	4618      	mov	r0, r3
 8006156:	f7fe f833 	bl	80041c0 <ld_dword>
 800615a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	3338      	adds	r3, #56	; 0x38
 8006160:	330e      	adds	r3, #14
 8006162:	4618      	mov	r0, r3
 8006164:	f7fe f814 	bl	8004190 <ld_word>
 8006168:	4603      	mov	r3, r0
 800616a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800616c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <find_volume+0x2e6>
 8006172:	230d      	movs	r3, #13
 8006174:	e105      	b.n	8006382 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006176:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800617a:	4413      	add	r3, r2
 800617c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800617e:	8911      	ldrh	r1, [r2, #8]
 8006180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006182:	8992      	ldrh	r2, [r2, #12]
 8006184:	0952      	lsrs	r2, r2, #5
 8006186:	b292      	uxth	r2, r2
 8006188:	fbb1 f2f2 	udiv	r2, r1, r2
 800618c:	b292      	uxth	r2, r2
 800618e:	4413      	add	r3, r2
 8006190:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	429a      	cmp	r2, r3
 8006198:	d201      	bcs.n	800619e <find_volume+0x30e>
 800619a:	230d      	movs	r3, #13
 800619c:	e0f1      	b.n	8006382 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800619e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061a6:	8952      	ldrh	r2, [r2, #10]
 80061a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <find_volume+0x328>
 80061b4:	230d      	movs	r3, #13
 80061b6:	e0e4      	b.n	8006382 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80061b8:	2303      	movs	r3, #3
 80061ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d802      	bhi.n	80061ce <find_volume+0x33e>
 80061c8:	2302      	movs	r3, #2
 80061ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d802      	bhi.n	80061de <find_volume+0x34e>
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	1c9a      	adds	r2, r3, #2
 80061e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061ea:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80061ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f0:	441a      	add	r2, r3
 80061f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80061f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	441a      	add	r2, r3
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006200:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006204:	2b03      	cmp	r3, #3
 8006206:	d11e      	bne.n	8006246 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	3338      	adds	r3, #56	; 0x38
 800620c:	332a      	adds	r3, #42	; 0x2a
 800620e:	4618      	mov	r0, r3
 8006210:	f7fd ffbe 	bl	8004190 <ld_word>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <find_volume+0x38e>
 800621a:	230d      	movs	r3, #13
 800621c:	e0b1      	b.n	8006382 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	891b      	ldrh	r3, [r3, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <find_volume+0x39a>
 8006226:	230d      	movs	r3, #13
 8006228:	e0ab      	b.n	8006382 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	3338      	adds	r3, #56	; 0x38
 800622e:	332c      	adds	r3, #44	; 0x2c
 8006230:	4618      	mov	r0, r3
 8006232:	f7fd ffc5 	bl	80041c0 <ld_dword>
 8006236:	4602      	mov	r2, r0
 8006238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	647b      	str	r3, [r7, #68]	; 0x44
 8006244:	e01f      	b.n	8006286 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006248:	891b      	ldrh	r3, [r3, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <find_volume+0x3c2>
 800624e:	230d      	movs	r3, #13
 8006250:	e097      	b.n	8006382 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006258:	441a      	add	r2, r3
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800625e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006262:	2b02      	cmp	r3, #2
 8006264:	d103      	bne.n	800626e <find_volume+0x3de>
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	e00a      	b.n	8006284 <find_volume+0x3f4>
 800626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006270:	69da      	ldr	r2, [r3, #28]
 8006272:	4613      	mov	r3, r2
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	4413      	add	r3, r2
 8006278:	085a      	lsrs	r2, r3, #1
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006284:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006288:	6a1a      	ldr	r2, [r3, #32]
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	899b      	ldrh	r3, [r3, #12]
 800628e:	4619      	mov	r1, r3
 8006290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006292:	440b      	add	r3, r1
 8006294:	3b01      	subs	r3, #1
 8006296:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006298:	8989      	ldrh	r1, [r1, #12]
 800629a:	fbb3 f3f1 	udiv	r3, r3, r1
 800629e:	429a      	cmp	r2, r3
 80062a0:	d201      	bcs.n	80062a6 <find_volume+0x416>
 80062a2:	230d      	movs	r3, #13
 80062a4:	e06d      	b.n	8006382 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80062a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a8:	f04f 32ff 	mov.w	r2, #4294967295
 80062ac:	619a      	str	r2, [r3, #24]
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80062b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b8:	2280      	movs	r2, #128	; 0x80
 80062ba:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80062bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d149      	bne.n	8006358 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	3338      	adds	r3, #56	; 0x38
 80062c8:	3330      	adds	r3, #48	; 0x30
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fd ff60 	bl	8004190 <ld_word>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d140      	bne.n	8006358 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80062d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d8:	3301      	adds	r3, #1
 80062da:	4619      	mov	r1, r3
 80062dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062de:	f7fe fa07 	bl	80046f0 <move_window>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d137      	bne.n	8006358 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80062e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ea:	2200      	movs	r2, #0
 80062ec:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80062ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f0:	3338      	adds	r3, #56	; 0x38
 80062f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fd ff4a 	bl	8004190 <ld_word>
 80062fc:	4603      	mov	r3, r0
 80062fe:	461a      	mov	r2, r3
 8006300:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006304:	429a      	cmp	r2, r3
 8006306:	d127      	bne.n	8006358 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	3338      	adds	r3, #56	; 0x38
 800630c:	4618      	mov	r0, r3
 800630e:	f7fd ff57 	bl	80041c0 <ld_dword>
 8006312:	4603      	mov	r3, r0
 8006314:	4a1d      	ldr	r2, [pc, #116]	; (800638c <find_volume+0x4fc>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d11e      	bne.n	8006358 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800631a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631c:	3338      	adds	r3, #56	; 0x38
 800631e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006322:	4618      	mov	r0, r3
 8006324:	f7fd ff4c 	bl	80041c0 <ld_dword>
 8006328:	4603      	mov	r3, r0
 800632a:	4a19      	ldr	r2, [pc, #100]	; (8006390 <find_volume+0x500>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d113      	bne.n	8006358 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006332:	3338      	adds	r3, #56	; 0x38
 8006334:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006338:	4618      	mov	r0, r3
 800633a:	f7fd ff41 	bl	80041c0 <ld_dword>
 800633e:	4602      	mov	r2, r0
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	3338      	adds	r3, #56	; 0x38
 8006348:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800634c:	4618      	mov	r0, r3
 800634e:	f7fd ff37 	bl	80041c0 <ld_dword>
 8006352:	4602      	mov	r2, r0
 8006354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006356:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800635e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006360:	4b0c      	ldr	r3, [pc, #48]	; (8006394 <find_volume+0x504>)
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	3301      	adds	r3, #1
 8006366:	b29a      	uxth	r2, r3
 8006368:	4b0a      	ldr	r3, [pc, #40]	; (8006394 <find_volume+0x504>)
 800636a:	801a      	strh	r2, [r3, #0]
 800636c:	4b09      	ldr	r3, [pc, #36]	; (8006394 <find_volume+0x504>)
 800636e:	881a      	ldrh	r2, [r3, #0]
 8006370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006372:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	4a08      	ldr	r2, [pc, #32]	; (8006398 <find_volume+0x508>)
 8006378:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800637a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800637c:	f7fe f950 	bl	8004620 <clear_lock>
#endif
	return FR_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3758      	adds	r7, #88	; 0x58
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	41615252 	.word	0x41615252
 8006390:	61417272 	.word	0x61417272
 8006394:	200067ac 	.word	0x200067ac
 8006398:	200067d0 	.word	0x200067d0

0800639c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80063a6:	2309      	movs	r3, #9
 80063a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01c      	beq.n	80063ea <validate+0x4e>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d018      	beq.n	80063ea <validate+0x4e>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d013      	beq.n	80063ea <validate+0x4e>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	889a      	ldrh	r2, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	88db      	ldrh	r3, [r3, #6]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d10c      	bne.n	80063ea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	785b      	ldrb	r3, [r3, #1]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fd fe3c 	bl	8004054 <disk_status>
 80063dc:	4603      	mov	r3, r0
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <validate+0x4e>
			res = FR_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d102      	bne.n	80063f6 <validate+0x5a>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	e000      	b.n	80063f8 <validate+0x5c>
 80063f6:	2300      	movs	r3, #0
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	6013      	str	r3, [r2, #0]
	return res;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b088      	sub	sp, #32
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	4613      	mov	r3, r2
 8006414:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800641a:	f107 0310 	add.w	r3, r7, #16
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff fc9c 	bl	8005d5c <get_ldnumber>
 8006424:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	2b00      	cmp	r3, #0
 800642a:	da01      	bge.n	8006430 <f_mount+0x28>
 800642c:	230b      	movs	r3, #11
 800642e:	e02b      	b.n	8006488 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006430:	4a17      	ldr	r2, [pc, #92]	; (8006490 <f_mount+0x88>)
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006438:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006440:	69b8      	ldr	r0, [r7, #24]
 8006442:	f7fe f8ed 	bl	8004620 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2200      	movs	r2, #0
 800644a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	490d      	ldr	r1, [pc, #52]	; (8006490 <f_mount+0x88>)
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <f_mount+0x66>
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d001      	beq.n	8006472 <f_mount+0x6a>
 800646e:	2300      	movs	r3, #0
 8006470:	e00a      	b.n	8006488 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006472:	f107 010c 	add.w	r1, r7, #12
 8006476:	f107 0308 	add.w	r3, r7, #8
 800647a:	2200      	movs	r2, #0
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fd07 	bl	8005e90 <find_volume>
 8006482:	4603      	mov	r3, r0
 8006484:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006486:	7dfb      	ldrb	r3, [r7, #23]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3720      	adds	r7, #32
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	200067a8 	.word	0x200067a8

08006494 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b09a      	sub	sp, #104	; 0x68
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	4613      	mov	r3, r2
 80064a0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <f_open+0x18>
 80064a8:	2309      	movs	r3, #9
 80064aa:	e1bb      	b.n	8006824 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064b2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80064b4:	79fa      	ldrb	r2, [r7, #7]
 80064b6:	f107 0114 	add.w	r1, r7, #20
 80064ba:	f107 0308 	add.w	r3, r7, #8
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff fce6 	bl	8005e90 <find_volume>
 80064c4:	4603      	mov	r3, r0
 80064c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80064ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f040 819f 	bne.w	8006812 <f_open+0x37e>
		dj.obj.fs = fs;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	f107 0318 	add.w	r3, r7, #24
 80064de:	4611      	mov	r1, r2
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff fbc5 	bl	8005c70 <follow_path>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80064ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d11a      	bne.n	800652a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80064f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80064f8:	b25b      	sxtb	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	da03      	bge.n	8006506 <f_open+0x72>
				res = FR_INVALID_NAME;
 80064fe:	2306      	movs	r3, #6
 8006500:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006504:	e011      	b.n	800652a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006506:	79fb      	ldrb	r3, [r7, #7]
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	bf14      	ite	ne
 8006510:	2301      	movne	r3, #1
 8006512:	2300      	moveq	r3, #0
 8006514:	b2db      	uxtb	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	f107 0318 	add.w	r3, r7, #24
 800651c:	4611      	mov	r1, r2
 800651e:	4618      	mov	r0, r3
 8006520:	f7fd ff36 	bl	8004390 <chk_lock>
 8006524:	4603      	mov	r3, r0
 8006526:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	f003 031c 	and.w	r3, r3, #28
 8006530:	2b00      	cmp	r3, #0
 8006532:	d07f      	beq.n	8006634 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006534:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006538:	2b00      	cmp	r3, #0
 800653a:	d017      	beq.n	800656c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800653c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006540:	2b04      	cmp	r3, #4
 8006542:	d10e      	bne.n	8006562 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006544:	f7fd ff80 	bl	8004448 <enq_lock>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d006      	beq.n	800655c <f_open+0xc8>
 800654e:	f107 0318 	add.w	r3, r7, #24
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff f8dc 	bl	8005710 <dir_register>
 8006558:	4603      	mov	r3, r0
 800655a:	e000      	b.n	800655e <f_open+0xca>
 800655c:	2312      	movs	r3, #18
 800655e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	f043 0308 	orr.w	r3, r3, #8
 8006568:	71fb      	strb	r3, [r7, #7]
 800656a:	e010      	b.n	800658e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800656c:	7fbb      	ldrb	r3, [r7, #30]
 800656e:	f003 0311 	and.w	r3, r3, #17
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <f_open+0xea>
					res = FR_DENIED;
 8006576:	2307      	movs	r3, #7
 8006578:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800657c:	e007      	b.n	800658e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800657e:	79fb      	ldrb	r3, [r7, #7]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <f_open+0xfa>
 8006588:	2308      	movs	r3, #8
 800658a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800658e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006592:	2b00      	cmp	r3, #0
 8006594:	d168      	bne.n	8006668 <f_open+0x1d4>
 8006596:	79fb      	ldrb	r3, [r7, #7]
 8006598:	f003 0308 	and.w	r3, r3, #8
 800659c:	2b00      	cmp	r3, #0
 800659e:	d063      	beq.n	8006668 <f_open+0x1d4>
				dw = GET_FATTIME();
 80065a0:	f7fd fcf6 	bl	8003f90 <get_fattime>
 80065a4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80065a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a8:	330e      	adds	r3, #14
 80065aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fd fe45 	bl	800423c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	3316      	adds	r3, #22
 80065b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fd fe3f 	bl	800423c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	330b      	adds	r3, #11
 80065c2:	2220      	movs	r2, #32
 80065c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065ca:	4611      	mov	r1, r2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fe fe17 	bl	8005200 <ld_clust>
 80065d2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065d8:	2200      	movs	r2, #0
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fe fe2f 	bl	800523e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	331c      	adds	r3, #28
 80065e4:	2100      	movs	r1, #0
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fd fe28 	bl	800423c <st_dword>
					fs->wflag = 1;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2201      	movs	r2, #1
 80065f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80065f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d037      	beq.n	8006668 <f_open+0x1d4>
						dw = fs->winsect;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80065fe:	f107 0318 	add.w	r3, r7, #24
 8006602:	2200      	movs	r2, #0
 8006604:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006606:	4618      	mov	r0, r3
 8006608:	f7fe fb1f 	bl	8004c4a <remove_chain>
 800660c:	4603      	mov	r3, r0
 800660e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006612:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006616:	2b00      	cmp	r3, #0
 8006618:	d126      	bne.n	8006668 <f_open+0x1d4>
							res = move_window(fs, dw);
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe f866 	bl	80046f0 <move_window>
 8006624:	4603      	mov	r3, r0
 8006626:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800662e:	3a01      	subs	r2, #1
 8006630:	615a      	str	r2, [r3, #20]
 8006632:	e019      	b.n	8006668 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006634:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006638:	2b00      	cmp	r3, #0
 800663a:	d115      	bne.n	8006668 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800663c:	7fbb      	ldrb	r3, [r7, #30]
 800663e:	f003 0310 	and.w	r3, r3, #16
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <f_open+0x1ba>
					res = FR_NO_FILE;
 8006646:	2304      	movs	r3, #4
 8006648:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800664c:	e00c      	b.n	8006668 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d007      	beq.n	8006668 <f_open+0x1d4>
 8006658:	7fbb      	ldrb	r3, [r7, #30]
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <f_open+0x1d4>
						res = FR_DENIED;
 8006662:	2307      	movs	r3, #7
 8006664:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006668:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800666c:	2b00      	cmp	r3, #0
 800666e:	d128      	bne.n	80066c2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	f003 0308 	and.w	r3, r3, #8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800667a:	79fb      	ldrb	r3, [r7, #7]
 800667c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006680:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800668a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006690:	79fb      	ldrb	r3, [r7, #7]
 8006692:	f023 0301 	bic.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	bf14      	ite	ne
 800669a:	2301      	movne	r3, #1
 800669c:	2300      	moveq	r3, #0
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	f107 0318 	add.w	r3, r7, #24
 80066a6:	4611      	mov	r1, r2
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fd feef 	bl	800448c <inc_lock>
 80066ae:	4602      	mov	r2, r0
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d102      	bne.n	80066c2 <f_open+0x22e>
 80066bc:	2302      	movs	r3, #2
 80066be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80066c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f040 80a3 	bne.w	8006812 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066d0:	4611      	mov	r1, r2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fe fd94 	bl	8005200 <ld_clust>
 80066d8:	4602      	mov	r2, r0
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	331c      	adds	r3, #28
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fd fd6c 	bl	80041c0 <ld_dword>
 80066e8:	4602      	mov	r2, r0
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	88da      	ldrh	r2, [r3, #6]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	79fa      	ldrb	r2, [r7, #7]
 8006706:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3330      	adds	r3, #48	; 0x30
 800671e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006722:	2100      	movs	r1, #0
 8006724:	4618      	mov	r0, r3
 8006726:	f7fd fdd6 	bl	80042d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800672a:	79fb      	ldrb	r3, [r7, #7]
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	2b00      	cmp	r3, #0
 8006732:	d06e      	beq.n	8006812 <f_open+0x37e>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d06a      	beq.n	8006812 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	895b      	ldrh	r3, [r3, #10]
 8006748:	461a      	mov	r2, r3
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	899b      	ldrh	r3, [r3, #12]
 800674e:	fb02 f303 	mul.w	r3, r2, r3
 8006752:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006760:	e016      	b.n	8006790 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006766:	4618      	mov	r0, r3
 8006768:	f7fe f87f 	bl	800486a <get_fat>
 800676c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800676e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006770:	2b01      	cmp	r3, #1
 8006772:	d802      	bhi.n	800677a <f_open+0x2e6>
 8006774:	2302      	movs	r3, #2
 8006776:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800677a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006780:	d102      	bne.n	8006788 <f_open+0x2f4>
 8006782:	2301      	movs	r3, #1
 8006784:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800678a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006790:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006794:	2b00      	cmp	r3, #0
 8006796:	d103      	bne.n	80067a0 <f_open+0x30c>
 8006798:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800679a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800679c:	429a      	cmp	r2, r3
 800679e:	d8e0      	bhi.n	8006762 <f_open+0x2ce>
				}
				fp->clust = clst;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80067a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d131      	bne.n	8006812 <f_open+0x37e>
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	899b      	ldrh	r3, [r3, #12]
 80067b2:	461a      	mov	r2, r3
 80067b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80067ba:	fb01 f202 	mul.w	r2, r1, r2
 80067be:	1a9b      	subs	r3, r3, r2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d026      	beq.n	8006812 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fe f82f 	bl	800482c <clust2sect>
 80067ce:	64f8      	str	r0, [r7, #76]	; 0x4c
 80067d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d103      	bne.n	80067de <f_open+0x34a>
						res = FR_INT_ERR;
 80067d6:	2302      	movs	r3, #2
 80067d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80067dc:	e019      	b.n	8006812 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	899b      	ldrh	r3, [r3, #12]
 80067e2:	461a      	mov	r2, r3
 80067e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80067ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ec:	441a      	add	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	7858      	ldrb	r0, [r3, #1]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a1a      	ldr	r2, [r3, #32]
 8006800:	2301      	movs	r3, #1
 8006802:	f7fd fc67 	bl	80040d4 <disk_read>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <f_open+0x37e>
 800680c:	2301      	movs	r3, #1
 800680e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006812:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <f_open+0x38c>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006820:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006824:	4618      	mov	r0, r3
 8006826:	3768      	adds	r7, #104	; 0x68
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08c      	sub	sp, #48	; 0x30
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f107 0210 	add.w	r2, r7, #16
 800684a:	4611      	mov	r1, r2
 800684c:	4618      	mov	r0, r3
 800684e:	f7ff fda5 	bl	800639c <validate>
 8006852:	4603      	mov	r3, r0
 8006854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006858:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800685c:	2b00      	cmp	r3, #0
 800685e:	d107      	bne.n	8006870 <f_write+0x44>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	7d5b      	ldrb	r3, [r3, #21]
 8006864:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006868:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <f_write+0x4a>
 8006870:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006874:	e16a      	b.n	8006b4c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	7d1b      	ldrb	r3, [r3, #20]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <f_write+0x5a>
 8006882:	2307      	movs	r3, #7
 8006884:	e162      	b.n	8006b4c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	441a      	add	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	429a      	cmp	r2, r3
 8006894:	f080 814c 	bcs.w	8006b30 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	43db      	mvns	r3, r3
 800689e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80068a0:	e146      	b.n	8006b30 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	8992      	ldrh	r2, [r2, #12]
 80068aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80068ae:	fb01 f202 	mul.w	r2, r1, r2
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f040 80f1 	bne.w	8006a9c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	8992      	ldrh	r2, [r2, #12]
 80068c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	8952      	ldrh	r2, [r2, #10]
 80068ca:	3a01      	subs	r2, #1
 80068cc:	4013      	ands	r3, r2
 80068ce:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d143      	bne.n	800695e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10c      	bne.n	80068f8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d11a      	bne.n	8006920 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2100      	movs	r1, #0
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe fa10 	bl	8004d14 <create_chain>
 80068f4:	62b8      	str	r0, [r7, #40]	; 0x28
 80068f6:	e013      	b.n	8006920 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d007      	beq.n	8006910 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	4619      	mov	r1, r3
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7fe fa9c 	bl	8004e44 <clmt_clust>
 800690c:	62b8      	str	r0, [r7, #40]	; 0x28
 800690e:	e007      	b.n	8006920 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	4619      	mov	r1, r3
 8006918:	4610      	mov	r0, r2
 800691a:	f7fe f9fb 	bl	8004d14 <create_chain>
 800691e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 8109 	beq.w	8006b3a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	2b01      	cmp	r3, #1
 800692c:	d104      	bne.n	8006938 <f_write+0x10c>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2202      	movs	r2, #2
 8006932:	755a      	strb	r2, [r3, #21]
 8006934:	2302      	movs	r3, #2
 8006936:	e109      	b.n	8006b4c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693e:	d104      	bne.n	800694a <f_write+0x11e>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2201      	movs	r2, #1
 8006944:	755a      	strb	r2, [r3, #21]
 8006946:	2301      	movs	r3, #1
 8006948:	e100      	b.n	8006b4c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800694e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d102      	bne.n	800695e <f_write+0x132>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800695c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	7d1b      	ldrb	r3, [r3, #20]
 8006962:	b25b      	sxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	da18      	bge.n	800699a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	7858      	ldrb	r0, [r3, #1]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a1a      	ldr	r2, [r3, #32]
 8006976:	2301      	movs	r3, #1
 8006978:	f7fd fbcc 	bl	8004114 <disk_write>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d004      	beq.n	800698c <f_write+0x160>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2201      	movs	r2, #1
 8006986:	755a      	strb	r2, [r3, #21]
 8006988:	2301      	movs	r3, #1
 800698a:	e0df      	b.n	8006b4c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	7d1b      	ldrb	r3, [r3, #20]
 8006990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006994:	b2da      	uxtb	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f7fd ff42 	bl	800482c <clust2sect>
 80069a8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d104      	bne.n	80069ba <f_write+0x18e>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2202      	movs	r2, #2
 80069b4:	755a      	strb	r2, [r3, #21]
 80069b6:	2302      	movs	r3, #2
 80069b8:	e0c8      	b.n	8006b4c <f_write+0x320>
			sect += csect;
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	4413      	add	r3, r2
 80069c0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	899b      	ldrh	r3, [r3, #12]
 80069c6:	461a      	mov	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80069ce:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d043      	beq.n	8006a5e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	4413      	add	r3, r2
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	8952      	ldrh	r2, [r2, #10]
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d905      	bls.n	80069f0 <f_write+0x1c4>
					cc = fs->csize - csect;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	895b      	ldrh	r3, [r3, #10]
 80069e8:	461a      	mov	r2, r3
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	7858      	ldrb	r0, [r3, #1]
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	69f9      	ldr	r1, [r7, #28]
 80069fa:	f7fd fb8b 	bl	8004114 <disk_write>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d004      	beq.n	8006a0e <f_write+0x1e2>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2201      	movs	r2, #1
 8006a08:	755a      	strb	r2, [r3, #21]
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e09e      	b.n	8006b4c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a1a      	ldr	r2, [r3, #32]
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	6a3a      	ldr	r2, [r7, #32]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d918      	bls.n	8006a4e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a1a      	ldr	r2, [r3, #32]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	8992      	ldrh	r2, [r2, #12]
 8006a2e:	fb02 f303 	mul.w	r3, r2, r3
 8006a32:	69fa      	ldr	r2, [r7, #28]
 8006a34:	18d1      	adds	r1, r2, r3
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	899b      	ldrh	r3, [r3, #12]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f7fd fc2a 	bl	8004294 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	7d1b      	ldrb	r3, [r3, #20]
 8006a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	899b      	ldrh	r3, [r3, #12]
 8006a52:	461a      	mov	r2, r3
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	fb02 f303 	mul.w	r3, r2, r3
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006a5c:	e04b      	b.n	8006af6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d016      	beq.n	8006a96 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	699a      	ldr	r2, [r3, #24]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d210      	bcs.n	8006a96 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	7858      	ldrb	r0, [r3, #1]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a7e:	2301      	movs	r3, #1
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	f7fd fb27 	bl	80040d4 <disk_read>
 8006a86:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d004      	beq.n	8006a96 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	755a      	strb	r2, [r3, #21]
 8006a92:	2301      	movs	r3, #1
 8006a94:	e05a      	b.n	8006b4c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	899b      	ldrh	r3, [r3, #12]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	8992      	ldrh	r2, [r2, #12]
 8006aaa:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aae:	fb01 f202 	mul.w	r2, r1, r2
 8006ab2:	1a9b      	subs	r3, r3, r2
 8006ab4:	1ac3      	subs	r3, r0, r3
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d901      	bls.n	8006ac4 <f_write+0x298>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	8992      	ldrh	r2, [r2, #12]
 8006ad2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ad6:	fb00 f202 	mul.w	r2, r0, r2
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	440b      	add	r3, r1
 8006ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae0:	69f9      	ldr	r1, [r7, #28]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fd fbd6 	bl	8004294 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	7d1b      	ldrb	r3, [r3, #20]
 8006aec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006af6:	69fa      	ldr	r2, [r7, #28]
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	4413      	add	r3, r2
 8006afc:	61fb      	str	r3, [r7, #28]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	441a      	add	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	619a      	str	r2, [r3, #24]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	bf38      	it	cc
 8006b16:	461a      	movcc	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	60da      	str	r2, [r3, #12]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	441a      	add	r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f47f aeb5 	bne.w	80068a2 <f_write+0x76>
 8006b38:	e000      	b.n	8006b3c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006b3a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	7d1b      	ldrb	r3, [r3, #20]
 8006b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3730      	adds	r7, #48	; 0x30
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f107 0208 	add.w	r2, r7, #8
 8006b62:	4611      	mov	r1, r2
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7ff fc19 	bl	800639c <validate>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d168      	bne.n	8006c46 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	7d1b      	ldrb	r3, [r3, #20]
 8006b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d062      	beq.n	8006c46 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	7d1b      	ldrb	r3, [r3, #20]
 8006b84:	b25b      	sxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	da15      	bge.n	8006bb6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	7858      	ldrb	r0, [r3, #1]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a1a      	ldr	r2, [r3, #32]
 8006b98:	2301      	movs	r3, #1
 8006b9a:	f7fd fabb 	bl	8004114 <disk_write>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <f_sync+0x54>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e04f      	b.n	8006c48 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	7d1b      	ldrb	r3, [r3, #20]
 8006bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006bb6:	f7fd f9eb 	bl	8003f90 <get_fattime>
 8006bba:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	f7fd fd93 	bl	80046f0 <move_window>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d138      	bne.n	8006c46 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	330b      	adds	r3, #11
 8006bde:	781a      	ldrb	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	330b      	adds	r3, #11
 8006be4:	f042 0220 	orr.w	r2, r2, #32
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	68f9      	ldr	r1, [r7, #12]
 8006bf8:	f7fe fb21 	bl	800523e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f103 021c 	add.w	r2, r3, #28
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	4619      	mov	r1, r3
 8006c08:	4610      	mov	r0, r2
 8006c0a:	f7fd fb17 	bl	800423c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3316      	adds	r3, #22
 8006c12:	6939      	ldr	r1, [r7, #16]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fd fb11 	bl	800423c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3312      	adds	r3, #18
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fd faf0 	bl	8004206 <st_word>
					fs->wflag = 1;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fd fd8c 	bl	800474c <sync_fs>
 8006c34:	4603      	mov	r3, r0
 8006c36:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	7d1b      	ldrb	r3, [r3, #20]
 8006c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff ff7b 	bl	8006b54 <f_sync>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d118      	bne.n	8006c9a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f107 0208 	add.w	r2, r7, #8
 8006c6e:	4611      	mov	r1, r2
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7ff fb93 	bl	800639c <validate>
 8006c76:	4603      	mov	r3, r0
 8006c78:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10c      	bne.n	8006c9a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fd fc8f 	bl	80045a8 <dec_lock>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d102      	bne.n	8006c9a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b090      	sub	sp, #64	; 0x40
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f107 0208 	add.w	r2, r7, #8
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff fb70 	bl	800639c <validate>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006cc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d103      	bne.n	8006cd2 <f_lseek+0x2e>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	7d5b      	ldrb	r3, [r3, #21]
 8006cce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006cd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <f_lseek+0x3c>
 8006cda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006cde:	e201      	b.n	80070e4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 80d9 	beq.w	8006e9c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf0:	d15a      	bne.n	8006da8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	1d1a      	adds	r2, r3, #4
 8006cfc:	627a      	str	r2, [r7, #36]	; 0x24
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	2302      	movs	r3, #2
 8006d04:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d03a      	beq.n	8006d88 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	2300      	movs	r3, #0
 8006d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	3302      	adds	r3, #2
 8006d1e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	3301      	adds	r3, #1
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fd fd9b 	bl	800486a <get_fat>
 8006d34:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d804      	bhi.n	8006d46 <f_lseek+0xa2>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	755a      	strb	r2, [r3, #21]
 8006d42:	2302      	movs	r3, #2
 8006d44:	e1ce      	b.n	80070e4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4c:	d104      	bne.n	8006d58 <f_lseek+0xb4>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	755a      	strb	r2, [r3, #21]
 8006d54:	2301      	movs	r3, #1
 8006d56:	e1c5      	b.n	80070e4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d0de      	beq.n	8006d20 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d809      	bhi.n	8006d7e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	1d1a      	adds	r2, r3, #4
 8006d6e:	627a      	str	r2, [r7, #36]	; 0x24
 8006d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	1d1a      	adds	r2, r3, #4
 8006d78:	627a      	str	r2, [r7, #36]	; 0x24
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d3c4      	bcc.n	8006d12 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d8e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d803      	bhi.n	8006da0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	e19f      	b.n	80070e0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006da0:	2311      	movs	r3, #17
 8006da2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006da6:	e19b      	b.n	80070e0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d902      	bls.n	8006db8 <f_lseek+0x114>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 818d 	beq.w	80070e0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7fe f839 	bl	8004e44 <clmt_clust>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	4619      	mov	r1, r3
 8006de0:	4610      	mov	r0, r2
 8006de2:	f7fd fd23 	bl	800482c <clust2sect>
 8006de6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d104      	bne.n	8006df8 <f_lseek+0x154>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2202      	movs	r2, #2
 8006df2:	755a      	strb	r2, [r3, #21]
 8006df4:	2302      	movs	r3, #2
 8006df6:	e175      	b.n	80070e4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	8992      	ldrh	r2, [r2, #12]
 8006e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	8952      	ldrh	r2, [r2, #10]
 8006e08:	3a01      	subs	r2, #1
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	4413      	add	r3, r2
 8006e10:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	8992      	ldrh	r2, [r2, #12]
 8006e1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e1e:	fb01 f202 	mul.w	r2, r1, r2
 8006e22:	1a9b      	subs	r3, r3, r2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 815b 	beq.w	80070e0 <f_lseek+0x43c>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	f000 8155 	beq.w	80070e0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	7d1b      	ldrb	r3, [r3, #20]
 8006e3a:	b25b      	sxtb	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	da18      	bge.n	8006e72 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	7858      	ldrb	r0, [r3, #1]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1a      	ldr	r2, [r3, #32]
 8006e4e:	2301      	movs	r3, #1
 8006e50:	f7fd f960 	bl	8004114 <disk_write>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d004      	beq.n	8006e64 <f_lseek+0x1c0>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	755a      	strb	r2, [r3, #21]
 8006e60:	2301      	movs	r3, #1
 8006e62:	e13f      	b.n	80070e4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	7d1b      	ldrb	r3, [r3, #20]
 8006e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	7858      	ldrb	r0, [r3, #1]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	f7fd f928 	bl	80040d4 <disk_read>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d004      	beq.n	8006e94 <f_lseek+0x1f0>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	755a      	strb	r2, [r3, #21]
 8006e90:	2301      	movs	r3, #1
 8006e92:	e127      	b.n	80070e4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	621a      	str	r2, [r3, #32]
 8006e9a:	e121      	b.n	80070e0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d908      	bls.n	8006eb8 <f_lseek+0x214>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	7d1b      	ldrb	r3, [r3, #20]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d102      	bne.n	8006eb8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ec6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 80b5 	beq.w	800703a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	895b      	ldrh	r3, [r3, #10]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	899b      	ldrh	r3, [r3, #12]
 8006eda:	fb02 f303 	mul.w	r3, r2, r3
 8006ede:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d01b      	beq.n	8006f1e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	1e5a      	subs	r2, r3, #1
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	1e59      	subs	r1, r3, #1
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d30f      	bcc.n	8006f1e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	1e5a      	subs	r2, r3, #1
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	425b      	negs	r3, r3
 8006f06:	401a      	ands	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f1c:	e022      	b.n	8006f64 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d119      	bne.n	8006f5e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fd fef0 	bl	8004d14 <create_chain>
 8006f34:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d104      	bne.n	8006f46 <f_lseek+0x2a2>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	755a      	strb	r2, [r3, #21]
 8006f42:	2302      	movs	r3, #2
 8006f44:	e0ce      	b.n	80070e4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4c:	d104      	bne.n	8006f58 <f_lseek+0x2b4>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	755a      	strb	r2, [r3, #21]
 8006f54:	2301      	movs	r3, #1
 8006f56:	e0c5      	b.n	80070e4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f5c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f62:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d067      	beq.n	800703a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8006f6a:	e03a      	b.n	8006fe2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699a      	ldr	r2, [r3, #24]
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	441a      	add	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	7d1b      	ldrb	r3, [r3, #20]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fd febf 	bl	8004d14 <create_chain>
 8006f96:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8006f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d108      	bne.n	8006fb0 <f_lseek+0x30c>
							ofs = 0; break;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	603b      	str	r3, [r7, #0]
 8006fa2:	e022      	b.n	8006fea <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fd fc5e 	bl	800486a <get_fat>
 8006fae:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb6:	d104      	bne.n	8006fc2 <f_lseek+0x31e>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	755a      	strb	r2, [r3, #21]
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e090      	b.n	80070e4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d904      	bls.n	8006fd2 <f_lseek+0x32e>
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d304      	bcc.n	8006fdc <f_lseek+0x338>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	755a      	strb	r2, [r3, #21]
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e083      	b.n	80070e4 <f_lseek+0x440>
					fp->clust = clst;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fe0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d8c0      	bhi.n	8006f6c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	441a      	add	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	899b      	ldrh	r3, [r3, #12]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007002:	fb01 f202 	mul.w	r2, r1, r2
 8007006:	1a9b      	subs	r3, r3, r2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d016      	beq.n	800703a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007010:	4618      	mov	r0, r3
 8007012:	f7fd fc0b 	bl	800482c <clust2sect>
 8007016:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701a:	2b00      	cmp	r3, #0
 800701c:	d104      	bne.n	8007028 <f_lseek+0x384>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	755a      	strb	r2, [r3, #21]
 8007024:	2302      	movs	r3, #2
 8007026:	e05d      	b.n	80070e4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	899b      	ldrh	r3, [r3, #12]
 800702c:	461a      	mov	r2, r3
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	fbb3 f3f2 	udiv	r3, r3, r2
 8007034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007036:	4413      	add	r3, r2
 8007038:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699a      	ldr	r2, [r3, #24]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	429a      	cmp	r2, r3
 8007044:	d90a      	bls.n	800705c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699a      	ldr	r2, [r3, #24]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	7d1b      	ldrb	r3, [r3, #20]
 8007052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007056:	b2da      	uxtb	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	8992      	ldrh	r2, [r2, #12]
 8007064:	fbb3 f1f2 	udiv	r1, r3, r2
 8007068:	fb01 f202 	mul.w	r2, r1, r2
 800706c:	1a9b      	subs	r3, r3, r2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d036      	beq.n	80070e0 <f_lseek+0x43c>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007078:	429a      	cmp	r2, r3
 800707a:	d031      	beq.n	80070e0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	7d1b      	ldrb	r3, [r3, #20]
 8007080:	b25b      	sxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	da18      	bge.n	80070b8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	7858      	ldrb	r0, [r3, #1]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a1a      	ldr	r2, [r3, #32]
 8007094:	2301      	movs	r3, #1
 8007096:	f7fd f83d 	bl	8004114 <disk_write>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d004      	beq.n	80070aa <f_lseek+0x406>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	755a      	strb	r2, [r3, #21]
 80070a6:	2301      	movs	r3, #1
 80070a8:	e01c      	b.n	80070e4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	7d1b      	ldrb	r3, [r3, #20]
 80070ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	7858      	ldrb	r0, [r3, #1]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070c2:	2301      	movs	r3, #1
 80070c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070c6:	f7fd f805 	bl	80040d4 <disk_read>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d004      	beq.n	80070da <f_lseek+0x436>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	755a      	strb	r2, [r3, #21]
 80070d6:	2301      	movs	r3, #1
 80070d8:	e004      	b.n	80070e4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070de:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80070e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3740      	adds	r7, #64	; 0x40
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	460b      	mov	r3, r1
 80070f6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	2b0a      	cmp	r3, #10
 80070fc:	d103      	bne.n	8007106 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80070fe:	210d      	movs	r1, #13
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7ff fff3 	bl	80070ec <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	db25      	blt.n	800715e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	60fa      	str	r2, [r7, #12]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	4413      	add	r3, r2
 800711c:	78fa      	ldrb	r2, [r7, #3]
 800711e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b3c      	cmp	r3, #60	; 0x3c
 8007124:	dd12      	ble.n	800714c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f103 010c 	add.w	r1, r3, #12
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	f107 0308 	add.w	r3, r7, #8
 8007136:	f7ff fb79 	bl	800682c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	429a      	cmp	r2, r3
 8007140:	d101      	bne.n	8007146 <putc_bfd+0x5a>
 8007142:	2300      	movs	r3, #0
 8007144:	e001      	b.n	800714a <putc_bfd+0x5e>
 8007146:	f04f 33ff 	mov.w	r3, #4294967295
 800714a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	609a      	str	r2, [r3, #8]
 800715c:	e000      	b.n	8007160 <putc_bfd+0x74>
	if (i < 0) return;
 800715e:	bf00      	nop
}
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	db16      	blt.n	80071a4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f103 010c 	add.w	r1, r3, #12
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	461a      	mov	r2, r3
 8007186:	f107 030c 	add.w	r3, r7, #12
 800718a:	f7ff fb4f 	bl	800682c <f_write>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d107      	bne.n	80071a4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	4293      	cmp	r3, r2
 800719c:	d102      	bne.n	80071a4 <putc_flush+0x3e>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	e001      	b.n	80071a8 <putc_flush+0x42>
	return EOF;
 80071a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	605a      	str	r2, [r3, #4]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	609a      	str	r2, [r3, #8]
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b096      	sub	sp, #88	; 0x58
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80071e4:	f107 030c 	add.w	r3, r7, #12
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff ffe0 	bl	80071b0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80071f0:	e009      	b.n	8007206 <f_puts+0x2c>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	781a      	ldrb	r2, [r3, #0]
 80071fa:	f107 030c 	add.w	r3, r7, #12
 80071fe:	4611      	mov	r1, r2
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff ff73 	bl	80070ec <putc_bfd>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1f1      	bne.n	80071f2 <f_puts+0x18>
	return putc_flush(&pb);
 800720e:	f107 030c 	add.w	r3, r7, #12
 8007212:	4618      	mov	r0, r3
 8007214:	f7ff ffa7 	bl	8007166 <putc_flush>
 8007218:	4603      	mov	r3, r0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3758      	adds	r7, #88	; 0x58
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	4613      	mov	r3, r2
 8007230:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007232:	2301      	movs	r3, #1
 8007234:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800723a:	4b1f      	ldr	r3, [pc, #124]	; (80072b8 <FATFS_LinkDriverEx+0x94>)
 800723c:	7a5b      	ldrb	r3, [r3, #9]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	d131      	bne.n	80072a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007244:	4b1c      	ldr	r3, [pc, #112]	; (80072b8 <FATFS_LinkDriverEx+0x94>)
 8007246:	7a5b      	ldrb	r3, [r3, #9]
 8007248:	b2db      	uxtb	r3, r3
 800724a:	461a      	mov	r2, r3
 800724c:	4b1a      	ldr	r3, [pc, #104]	; (80072b8 <FATFS_LinkDriverEx+0x94>)
 800724e:	2100      	movs	r1, #0
 8007250:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007252:	4b19      	ldr	r3, [pc, #100]	; (80072b8 <FATFS_LinkDriverEx+0x94>)
 8007254:	7a5b      	ldrb	r3, [r3, #9]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	4a17      	ldr	r2, [pc, #92]	; (80072b8 <FATFS_LinkDriverEx+0x94>)
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007262:	4b15      	ldr	r3, [pc, #84]	; (80072b8 <FATFS_LinkDriverEx+0x94>)
 8007264:	7a5b      	ldrb	r3, [r3, #9]
 8007266:	b2db      	uxtb	r3, r3
 8007268:	461a      	mov	r2, r3
 800726a:	4b13      	ldr	r3, [pc, #76]	; (80072b8 <FATFS_LinkDriverEx+0x94>)
 800726c:	4413      	add	r3, r2
 800726e:	79fa      	ldrb	r2, [r7, #7]
 8007270:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007272:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <FATFS_LinkDriverEx+0x94>)
 8007274:	7a5b      	ldrb	r3, [r3, #9]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	b2d1      	uxtb	r1, r2
 800727c:	4a0e      	ldr	r2, [pc, #56]	; (80072b8 <FATFS_LinkDriverEx+0x94>)
 800727e:	7251      	strb	r1, [r2, #9]
 8007280:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007282:	7dbb      	ldrb	r3, [r7, #22]
 8007284:	3330      	adds	r3, #48	; 0x30
 8007286:	b2da      	uxtb	r2, r3
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	3301      	adds	r3, #1
 8007290:	223a      	movs	r2, #58	; 0x3a
 8007292:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	3302      	adds	r3, #2
 8007298:	222f      	movs	r2, #47	; 0x2f
 800729a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	3303      	adds	r3, #3
 80072a0:	2200      	movs	r2, #0
 80072a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80072a4:	2300      	movs	r3, #0
 80072a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	200069d0 	.word	0x200069d0

080072bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80072c6:	2200      	movs	r2, #0
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff ffaa 	bl	8007224 <FATFS_LinkDriverEx>
 80072d0:	4603      	mov	r3, r0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
	...

080072dc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	6039      	str	r1, [r7, #0]
 80072e6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80072e8:	88fb      	ldrh	r3, [r7, #6]
 80072ea:	2b7f      	cmp	r3, #127	; 0x7f
 80072ec:	d802      	bhi.n	80072f4 <ff_convert+0x18>
		c = chr;
 80072ee:	88fb      	ldrh	r3, [r7, #6]
 80072f0:	81fb      	strh	r3, [r7, #14]
 80072f2:	e025      	b.n	8007340 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00b      	beq.n	8007312 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80072fa:	88fb      	ldrh	r3, [r7, #6]
 80072fc:	2bff      	cmp	r3, #255	; 0xff
 80072fe:	d805      	bhi.n	800730c <ff_convert+0x30>
 8007300:	88fb      	ldrh	r3, [r7, #6]
 8007302:	3b80      	subs	r3, #128	; 0x80
 8007304:	4a12      	ldr	r2, [pc, #72]	; (8007350 <ff_convert+0x74>)
 8007306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800730a:	e000      	b.n	800730e <ff_convert+0x32>
 800730c:	2300      	movs	r3, #0
 800730e:	81fb      	strh	r3, [r7, #14]
 8007310:	e016      	b.n	8007340 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007312:	2300      	movs	r3, #0
 8007314:	81fb      	strh	r3, [r7, #14]
 8007316:	e009      	b.n	800732c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007318:	89fb      	ldrh	r3, [r7, #14]
 800731a:	4a0d      	ldr	r2, [pc, #52]	; (8007350 <ff_convert+0x74>)
 800731c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007320:	88fa      	ldrh	r2, [r7, #6]
 8007322:	429a      	cmp	r2, r3
 8007324:	d006      	beq.n	8007334 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007326:	89fb      	ldrh	r3, [r7, #14]
 8007328:	3301      	adds	r3, #1
 800732a:	81fb      	strh	r3, [r7, #14]
 800732c:	89fb      	ldrh	r3, [r7, #14]
 800732e:	2b7f      	cmp	r3, #127	; 0x7f
 8007330:	d9f2      	bls.n	8007318 <ff_convert+0x3c>
 8007332:	e000      	b.n	8007336 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007334:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007336:	89fb      	ldrh	r3, [r7, #14]
 8007338:	3380      	adds	r3, #128	; 0x80
 800733a:	b29b      	uxth	r3, r3
 800733c:	b2db      	uxtb	r3, r3
 800733e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007340:	89fb      	ldrh	r3, [r7, #14]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	08008660 	.word	0x08008660

08007354 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	4603      	mov	r3, r0
 800735c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800735e:	88fb      	ldrh	r3, [r7, #6]
 8007360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007364:	d201      	bcs.n	800736a <ff_wtoupper+0x16>
 8007366:	4b3e      	ldr	r3, [pc, #248]	; (8007460 <ff_wtoupper+0x10c>)
 8007368:	e000      	b.n	800736c <ff_wtoupper+0x18>
 800736a:	4b3e      	ldr	r3, [pc, #248]	; (8007464 <ff_wtoupper+0x110>)
 800736c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	1c9a      	adds	r2, r3, #2
 8007372:	617a      	str	r2, [r7, #20]
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007378:	8a7b      	ldrh	r3, [r7, #18]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d068      	beq.n	8007450 <ff_wtoupper+0xfc>
 800737e:	88fa      	ldrh	r2, [r7, #6]
 8007380:	8a7b      	ldrh	r3, [r7, #18]
 8007382:	429a      	cmp	r2, r3
 8007384:	d364      	bcc.n	8007450 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	1c9a      	adds	r2, r3, #2
 800738a:	617a      	str	r2, [r7, #20]
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	823b      	strh	r3, [r7, #16]
 8007390:	8a3b      	ldrh	r3, [r7, #16]
 8007392:	0a1b      	lsrs	r3, r3, #8
 8007394:	81fb      	strh	r3, [r7, #14]
 8007396:	8a3b      	ldrh	r3, [r7, #16]
 8007398:	b2db      	uxtb	r3, r3
 800739a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800739c:	88fa      	ldrh	r2, [r7, #6]
 800739e:	8a79      	ldrh	r1, [r7, #18]
 80073a0:	8a3b      	ldrh	r3, [r7, #16]
 80073a2:	440b      	add	r3, r1
 80073a4:	429a      	cmp	r2, r3
 80073a6:	da49      	bge.n	800743c <ff_wtoupper+0xe8>
			switch (cmd) {
 80073a8:	89fb      	ldrh	r3, [r7, #14]
 80073aa:	2b08      	cmp	r3, #8
 80073ac:	d84f      	bhi.n	800744e <ff_wtoupper+0xfa>
 80073ae:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <ff_wtoupper+0x60>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	080073d9 	.word	0x080073d9
 80073b8:	080073eb 	.word	0x080073eb
 80073bc:	08007401 	.word	0x08007401
 80073c0:	08007409 	.word	0x08007409
 80073c4:	08007411 	.word	0x08007411
 80073c8:	08007419 	.word	0x08007419
 80073cc:	08007421 	.word	0x08007421
 80073d0:	08007429 	.word	0x08007429
 80073d4:	08007431 	.word	0x08007431
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80073d8:	88fa      	ldrh	r2, [r7, #6]
 80073da:	8a7b      	ldrh	r3, [r7, #18]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	4413      	add	r3, r2
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	80fb      	strh	r3, [r7, #6]
 80073e8:	e027      	b.n	800743a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80073ea:	88fa      	ldrh	r2, [r7, #6]
 80073ec:	8a7b      	ldrh	r3, [r7, #18]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	88fa      	ldrh	r2, [r7, #6]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	80fb      	strh	r3, [r7, #6]
 80073fe:	e01c      	b.n	800743a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007400:	88fb      	ldrh	r3, [r7, #6]
 8007402:	3b10      	subs	r3, #16
 8007404:	80fb      	strh	r3, [r7, #6]
 8007406:	e018      	b.n	800743a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007408:	88fb      	ldrh	r3, [r7, #6]
 800740a:	3b20      	subs	r3, #32
 800740c:	80fb      	strh	r3, [r7, #6]
 800740e:	e014      	b.n	800743a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007410:	88fb      	ldrh	r3, [r7, #6]
 8007412:	3b30      	subs	r3, #48	; 0x30
 8007414:	80fb      	strh	r3, [r7, #6]
 8007416:	e010      	b.n	800743a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007418:	88fb      	ldrh	r3, [r7, #6]
 800741a:	3b1a      	subs	r3, #26
 800741c:	80fb      	strh	r3, [r7, #6]
 800741e:	e00c      	b.n	800743a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007420:	88fb      	ldrh	r3, [r7, #6]
 8007422:	3308      	adds	r3, #8
 8007424:	80fb      	strh	r3, [r7, #6]
 8007426:	e008      	b.n	800743a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007428:	88fb      	ldrh	r3, [r7, #6]
 800742a:	3b50      	subs	r3, #80	; 0x50
 800742c:	80fb      	strh	r3, [r7, #6]
 800742e:	e004      	b.n	800743a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007430:	88fb      	ldrh	r3, [r7, #6]
 8007432:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007436:	80fb      	strh	r3, [r7, #6]
 8007438:	bf00      	nop
			}
			break;
 800743a:	e008      	b.n	800744e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800743c:	89fb      	ldrh	r3, [r7, #14]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d195      	bne.n	800736e <ff_wtoupper+0x1a>
 8007442:	8a3b      	ldrh	r3, [r7, #16]
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	4413      	add	r3, r2
 800744a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800744c:	e78f      	b.n	800736e <ff_wtoupper+0x1a>
			break;
 800744e:	bf00      	nop
	}

	return chr;
 8007450:	88fb      	ldrh	r3, [r7, #6]
}
 8007452:	4618      	mov	r0, r3
 8007454:	371c      	adds	r7, #28
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	08008760 	.word	0x08008760
 8007464:	08008954 	.word	0x08008954

08007468 <atoi>:
 8007468:	220a      	movs	r2, #10
 800746a:	2100      	movs	r1, #0
 800746c:	f000 b8ac 	b.w	80075c8 <strtol>

08007470 <__errno>:
 8007470:	4b01      	ldr	r3, [pc, #4]	; (8007478 <__errno+0x8>)
 8007472:	6818      	ldr	r0, [r3, #0]
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20000040 	.word	0x20000040

0800747c <__libc_init_array>:
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	4d0d      	ldr	r5, [pc, #52]	; (80074b4 <__libc_init_array+0x38>)
 8007480:	4c0d      	ldr	r4, [pc, #52]	; (80074b8 <__libc_init_array+0x3c>)
 8007482:	1b64      	subs	r4, r4, r5
 8007484:	10a4      	asrs	r4, r4, #2
 8007486:	2600      	movs	r6, #0
 8007488:	42a6      	cmp	r6, r4
 800748a:	d109      	bne.n	80074a0 <__libc_init_array+0x24>
 800748c:	4d0b      	ldr	r5, [pc, #44]	; (80074bc <__libc_init_array+0x40>)
 800748e:	4c0c      	ldr	r4, [pc, #48]	; (80074c0 <__libc_init_array+0x44>)
 8007490:	f000 ffc0 	bl	8008414 <_init>
 8007494:	1b64      	subs	r4, r4, r5
 8007496:	10a4      	asrs	r4, r4, #2
 8007498:	2600      	movs	r6, #0
 800749a:	42a6      	cmp	r6, r4
 800749c:	d105      	bne.n	80074aa <__libc_init_array+0x2e>
 800749e:	bd70      	pop	{r4, r5, r6, pc}
 80074a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074a4:	4798      	blx	r3
 80074a6:	3601      	adds	r6, #1
 80074a8:	e7ee      	b.n	8007488 <__libc_init_array+0xc>
 80074aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ae:	4798      	blx	r3
 80074b0:	3601      	adds	r6, #1
 80074b2:	e7f2      	b.n	800749a <__libc_init_array+0x1e>
 80074b4:	08008b48 	.word	0x08008b48
 80074b8:	08008b48 	.word	0x08008b48
 80074bc:	08008b48 	.word	0x08008b48
 80074c0:	08008b4c 	.word	0x08008b4c

080074c4 <_strtol_l.constprop.0>:
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ca:	d001      	beq.n	80074d0 <_strtol_l.constprop.0+0xc>
 80074cc:	2b24      	cmp	r3, #36	; 0x24
 80074ce:	d906      	bls.n	80074de <_strtol_l.constprop.0+0x1a>
 80074d0:	f7ff ffce 	bl	8007470 <__errno>
 80074d4:	2316      	movs	r3, #22
 80074d6:	6003      	str	r3, [r0, #0]
 80074d8:	2000      	movs	r0, #0
 80074da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80075c4 <_strtol_l.constprop.0+0x100>
 80074e2:	460d      	mov	r5, r1
 80074e4:	462e      	mov	r6, r5
 80074e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074ea:	f814 700c 	ldrb.w	r7, [r4, ip]
 80074ee:	f017 0708 	ands.w	r7, r7, #8
 80074f2:	d1f7      	bne.n	80074e4 <_strtol_l.constprop.0+0x20>
 80074f4:	2c2d      	cmp	r4, #45	; 0x2d
 80074f6:	d132      	bne.n	800755e <_strtol_l.constprop.0+0x9a>
 80074f8:	782c      	ldrb	r4, [r5, #0]
 80074fa:	2701      	movs	r7, #1
 80074fc:	1cb5      	adds	r5, r6, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d05b      	beq.n	80075ba <_strtol_l.constprop.0+0xf6>
 8007502:	2b10      	cmp	r3, #16
 8007504:	d109      	bne.n	800751a <_strtol_l.constprop.0+0x56>
 8007506:	2c30      	cmp	r4, #48	; 0x30
 8007508:	d107      	bne.n	800751a <_strtol_l.constprop.0+0x56>
 800750a:	782c      	ldrb	r4, [r5, #0]
 800750c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007510:	2c58      	cmp	r4, #88	; 0x58
 8007512:	d14d      	bne.n	80075b0 <_strtol_l.constprop.0+0xec>
 8007514:	786c      	ldrb	r4, [r5, #1]
 8007516:	2310      	movs	r3, #16
 8007518:	3502      	adds	r5, #2
 800751a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800751e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007522:	f04f 0c00 	mov.w	ip, #0
 8007526:	fbb8 f9f3 	udiv	r9, r8, r3
 800752a:	4666      	mov	r6, ip
 800752c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007530:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007534:	f1be 0f09 	cmp.w	lr, #9
 8007538:	d816      	bhi.n	8007568 <_strtol_l.constprop.0+0xa4>
 800753a:	4674      	mov	r4, lr
 800753c:	42a3      	cmp	r3, r4
 800753e:	dd24      	ble.n	800758a <_strtol_l.constprop.0+0xc6>
 8007540:	f1bc 0f00 	cmp.w	ip, #0
 8007544:	db1e      	blt.n	8007584 <_strtol_l.constprop.0+0xc0>
 8007546:	45b1      	cmp	r9, r6
 8007548:	d31c      	bcc.n	8007584 <_strtol_l.constprop.0+0xc0>
 800754a:	d101      	bne.n	8007550 <_strtol_l.constprop.0+0x8c>
 800754c:	45a2      	cmp	sl, r4
 800754e:	db19      	blt.n	8007584 <_strtol_l.constprop.0+0xc0>
 8007550:	fb06 4603 	mla	r6, r6, r3, r4
 8007554:	f04f 0c01 	mov.w	ip, #1
 8007558:	f815 4b01 	ldrb.w	r4, [r5], #1
 800755c:	e7e8      	b.n	8007530 <_strtol_l.constprop.0+0x6c>
 800755e:	2c2b      	cmp	r4, #43	; 0x2b
 8007560:	bf04      	itt	eq
 8007562:	782c      	ldrbeq	r4, [r5, #0]
 8007564:	1cb5      	addeq	r5, r6, #2
 8007566:	e7ca      	b.n	80074fe <_strtol_l.constprop.0+0x3a>
 8007568:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800756c:	f1be 0f19 	cmp.w	lr, #25
 8007570:	d801      	bhi.n	8007576 <_strtol_l.constprop.0+0xb2>
 8007572:	3c37      	subs	r4, #55	; 0x37
 8007574:	e7e2      	b.n	800753c <_strtol_l.constprop.0+0x78>
 8007576:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800757a:	f1be 0f19 	cmp.w	lr, #25
 800757e:	d804      	bhi.n	800758a <_strtol_l.constprop.0+0xc6>
 8007580:	3c57      	subs	r4, #87	; 0x57
 8007582:	e7db      	b.n	800753c <_strtol_l.constprop.0+0x78>
 8007584:	f04f 3cff 	mov.w	ip, #4294967295
 8007588:	e7e6      	b.n	8007558 <_strtol_l.constprop.0+0x94>
 800758a:	f1bc 0f00 	cmp.w	ip, #0
 800758e:	da05      	bge.n	800759c <_strtol_l.constprop.0+0xd8>
 8007590:	2322      	movs	r3, #34	; 0x22
 8007592:	6003      	str	r3, [r0, #0]
 8007594:	4646      	mov	r6, r8
 8007596:	b942      	cbnz	r2, 80075aa <_strtol_l.constprop.0+0xe6>
 8007598:	4630      	mov	r0, r6
 800759a:	e79e      	b.n	80074da <_strtol_l.constprop.0+0x16>
 800759c:	b107      	cbz	r7, 80075a0 <_strtol_l.constprop.0+0xdc>
 800759e:	4276      	negs	r6, r6
 80075a0:	2a00      	cmp	r2, #0
 80075a2:	d0f9      	beq.n	8007598 <_strtol_l.constprop.0+0xd4>
 80075a4:	f1bc 0f00 	cmp.w	ip, #0
 80075a8:	d000      	beq.n	80075ac <_strtol_l.constprop.0+0xe8>
 80075aa:	1e69      	subs	r1, r5, #1
 80075ac:	6011      	str	r1, [r2, #0]
 80075ae:	e7f3      	b.n	8007598 <_strtol_l.constprop.0+0xd4>
 80075b0:	2430      	movs	r4, #48	; 0x30
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1b1      	bne.n	800751a <_strtol_l.constprop.0+0x56>
 80075b6:	2308      	movs	r3, #8
 80075b8:	e7af      	b.n	800751a <_strtol_l.constprop.0+0x56>
 80075ba:	2c30      	cmp	r4, #48	; 0x30
 80075bc:	d0a5      	beq.n	800750a <_strtol_l.constprop.0+0x46>
 80075be:	230a      	movs	r3, #10
 80075c0:	e7ab      	b.n	800751a <_strtol_l.constprop.0+0x56>
 80075c2:	bf00      	nop
 80075c4:	08008a11 	.word	0x08008a11

080075c8 <strtol>:
 80075c8:	4613      	mov	r3, r2
 80075ca:	460a      	mov	r2, r1
 80075cc:	4601      	mov	r1, r0
 80075ce:	4802      	ldr	r0, [pc, #8]	; (80075d8 <strtol+0x10>)
 80075d0:	6800      	ldr	r0, [r0, #0]
 80075d2:	f7ff bf77 	b.w	80074c4 <_strtol_l.constprop.0>
 80075d6:	bf00      	nop
 80075d8:	20000040 	.word	0x20000040

080075dc <pow>:
 80075dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075de:	ed2d 8b02 	vpush	{d8}
 80075e2:	eeb0 8a40 	vmov.f32	s16, s0
 80075e6:	eef0 8a60 	vmov.f32	s17, s1
 80075ea:	ec55 4b11 	vmov	r4, r5, d1
 80075ee:	f000 f867 	bl	80076c0 <__ieee754_pow>
 80075f2:	4622      	mov	r2, r4
 80075f4:	462b      	mov	r3, r5
 80075f6:	4620      	mov	r0, r4
 80075f8:	4629      	mov	r1, r5
 80075fa:	ec57 6b10 	vmov	r6, r7, d0
 80075fe:	f7f9 fa41 	bl	8000a84 <__aeabi_dcmpun>
 8007602:	2800      	cmp	r0, #0
 8007604:	d13b      	bne.n	800767e <pow+0xa2>
 8007606:	ec51 0b18 	vmov	r0, r1, d8
 800760a:	2200      	movs	r2, #0
 800760c:	2300      	movs	r3, #0
 800760e:	f7f9 fa07 	bl	8000a20 <__aeabi_dcmpeq>
 8007612:	b1b8      	cbz	r0, 8007644 <pow+0x68>
 8007614:	2200      	movs	r2, #0
 8007616:	2300      	movs	r3, #0
 8007618:	4620      	mov	r0, r4
 800761a:	4629      	mov	r1, r5
 800761c:	f7f9 fa00 	bl	8000a20 <__aeabi_dcmpeq>
 8007620:	2800      	cmp	r0, #0
 8007622:	d146      	bne.n	80076b2 <pow+0xd6>
 8007624:	ec45 4b10 	vmov	d0, r4, r5
 8007628:	f000 fe63 	bl	80082f2 <finite>
 800762c:	b338      	cbz	r0, 800767e <pow+0xa2>
 800762e:	2200      	movs	r2, #0
 8007630:	2300      	movs	r3, #0
 8007632:	4620      	mov	r0, r4
 8007634:	4629      	mov	r1, r5
 8007636:	f7f9 f9fd 	bl	8000a34 <__aeabi_dcmplt>
 800763a:	b300      	cbz	r0, 800767e <pow+0xa2>
 800763c:	f7ff ff18 	bl	8007470 <__errno>
 8007640:	2322      	movs	r3, #34	; 0x22
 8007642:	e01b      	b.n	800767c <pow+0xa0>
 8007644:	ec47 6b10 	vmov	d0, r6, r7
 8007648:	f000 fe53 	bl	80082f2 <finite>
 800764c:	b9e0      	cbnz	r0, 8007688 <pow+0xac>
 800764e:	eeb0 0a48 	vmov.f32	s0, s16
 8007652:	eef0 0a68 	vmov.f32	s1, s17
 8007656:	f000 fe4c 	bl	80082f2 <finite>
 800765a:	b1a8      	cbz	r0, 8007688 <pow+0xac>
 800765c:	ec45 4b10 	vmov	d0, r4, r5
 8007660:	f000 fe47 	bl	80082f2 <finite>
 8007664:	b180      	cbz	r0, 8007688 <pow+0xac>
 8007666:	4632      	mov	r2, r6
 8007668:	463b      	mov	r3, r7
 800766a:	4630      	mov	r0, r6
 800766c:	4639      	mov	r1, r7
 800766e:	f7f9 fa09 	bl	8000a84 <__aeabi_dcmpun>
 8007672:	2800      	cmp	r0, #0
 8007674:	d0e2      	beq.n	800763c <pow+0x60>
 8007676:	f7ff fefb 	bl	8007470 <__errno>
 800767a:	2321      	movs	r3, #33	; 0x21
 800767c:	6003      	str	r3, [r0, #0]
 800767e:	ecbd 8b02 	vpop	{d8}
 8007682:	ec47 6b10 	vmov	d0, r6, r7
 8007686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007688:	2200      	movs	r2, #0
 800768a:	2300      	movs	r3, #0
 800768c:	4630      	mov	r0, r6
 800768e:	4639      	mov	r1, r7
 8007690:	f7f9 f9c6 	bl	8000a20 <__aeabi_dcmpeq>
 8007694:	2800      	cmp	r0, #0
 8007696:	d0f2      	beq.n	800767e <pow+0xa2>
 8007698:	eeb0 0a48 	vmov.f32	s0, s16
 800769c:	eef0 0a68 	vmov.f32	s1, s17
 80076a0:	f000 fe27 	bl	80082f2 <finite>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d0ea      	beq.n	800767e <pow+0xa2>
 80076a8:	ec45 4b10 	vmov	d0, r4, r5
 80076ac:	f000 fe21 	bl	80082f2 <finite>
 80076b0:	e7c3      	b.n	800763a <pow+0x5e>
 80076b2:	4f01      	ldr	r7, [pc, #4]	; (80076b8 <pow+0xdc>)
 80076b4:	2600      	movs	r6, #0
 80076b6:	e7e2      	b.n	800767e <pow+0xa2>
 80076b8:	3ff00000 	.word	0x3ff00000
 80076bc:	00000000 	.word	0x00000000

080076c0 <__ieee754_pow>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	ed2d 8b06 	vpush	{d8-d10}
 80076c8:	b089      	sub	sp, #36	; 0x24
 80076ca:	ed8d 1b00 	vstr	d1, [sp]
 80076ce:	e9dd 2900 	ldrd	r2, r9, [sp]
 80076d2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80076d6:	ea58 0102 	orrs.w	r1, r8, r2
 80076da:	ec57 6b10 	vmov	r6, r7, d0
 80076de:	d115      	bne.n	800770c <__ieee754_pow+0x4c>
 80076e0:	19b3      	adds	r3, r6, r6
 80076e2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80076e6:	4152      	adcs	r2, r2
 80076e8:	4299      	cmp	r1, r3
 80076ea:	4b89      	ldr	r3, [pc, #548]	; (8007910 <__ieee754_pow+0x250>)
 80076ec:	4193      	sbcs	r3, r2
 80076ee:	f080 84d2 	bcs.w	8008096 <__ieee754_pow+0x9d6>
 80076f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076f6:	4630      	mov	r0, r6
 80076f8:	4639      	mov	r1, r7
 80076fa:	f7f8 fd73 	bl	80001e4 <__adddf3>
 80076fe:	ec41 0b10 	vmov	d0, r0, r1
 8007702:	b009      	add	sp, #36	; 0x24
 8007704:	ecbd 8b06 	vpop	{d8-d10}
 8007708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770c:	4b81      	ldr	r3, [pc, #516]	; (8007914 <__ieee754_pow+0x254>)
 800770e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007712:	429c      	cmp	r4, r3
 8007714:	ee10 aa10 	vmov	sl, s0
 8007718:	463d      	mov	r5, r7
 800771a:	dc06      	bgt.n	800772a <__ieee754_pow+0x6a>
 800771c:	d101      	bne.n	8007722 <__ieee754_pow+0x62>
 800771e:	2e00      	cmp	r6, #0
 8007720:	d1e7      	bne.n	80076f2 <__ieee754_pow+0x32>
 8007722:	4598      	cmp	r8, r3
 8007724:	dc01      	bgt.n	800772a <__ieee754_pow+0x6a>
 8007726:	d10f      	bne.n	8007748 <__ieee754_pow+0x88>
 8007728:	b172      	cbz	r2, 8007748 <__ieee754_pow+0x88>
 800772a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800772e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007732:	ea55 050a 	orrs.w	r5, r5, sl
 8007736:	d1dc      	bne.n	80076f2 <__ieee754_pow+0x32>
 8007738:	e9dd 3200 	ldrd	r3, r2, [sp]
 800773c:	18db      	adds	r3, r3, r3
 800773e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007742:	4152      	adcs	r2, r2
 8007744:	429d      	cmp	r5, r3
 8007746:	e7d0      	b.n	80076ea <__ieee754_pow+0x2a>
 8007748:	2d00      	cmp	r5, #0
 800774a:	da3b      	bge.n	80077c4 <__ieee754_pow+0x104>
 800774c:	4b72      	ldr	r3, [pc, #456]	; (8007918 <__ieee754_pow+0x258>)
 800774e:	4598      	cmp	r8, r3
 8007750:	dc51      	bgt.n	80077f6 <__ieee754_pow+0x136>
 8007752:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007756:	4598      	cmp	r8, r3
 8007758:	f340 84ac 	ble.w	80080b4 <__ieee754_pow+0x9f4>
 800775c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007760:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007764:	2b14      	cmp	r3, #20
 8007766:	dd0f      	ble.n	8007788 <__ieee754_pow+0xc8>
 8007768:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800776c:	fa22 f103 	lsr.w	r1, r2, r3
 8007770:	fa01 f303 	lsl.w	r3, r1, r3
 8007774:	4293      	cmp	r3, r2
 8007776:	f040 849d 	bne.w	80080b4 <__ieee754_pow+0x9f4>
 800777a:	f001 0101 	and.w	r1, r1, #1
 800777e:	f1c1 0302 	rsb	r3, r1, #2
 8007782:	9304      	str	r3, [sp, #16]
 8007784:	b182      	cbz	r2, 80077a8 <__ieee754_pow+0xe8>
 8007786:	e05f      	b.n	8007848 <__ieee754_pow+0x188>
 8007788:	2a00      	cmp	r2, #0
 800778a:	d15b      	bne.n	8007844 <__ieee754_pow+0x184>
 800778c:	f1c3 0314 	rsb	r3, r3, #20
 8007790:	fa48 f103 	asr.w	r1, r8, r3
 8007794:	fa01 f303 	lsl.w	r3, r1, r3
 8007798:	4543      	cmp	r3, r8
 800779a:	f040 8488 	bne.w	80080ae <__ieee754_pow+0x9ee>
 800779e:	f001 0101 	and.w	r1, r1, #1
 80077a2:	f1c1 0302 	rsb	r3, r1, #2
 80077a6:	9304      	str	r3, [sp, #16]
 80077a8:	4b5c      	ldr	r3, [pc, #368]	; (800791c <__ieee754_pow+0x25c>)
 80077aa:	4598      	cmp	r8, r3
 80077ac:	d132      	bne.n	8007814 <__ieee754_pow+0x154>
 80077ae:	f1b9 0f00 	cmp.w	r9, #0
 80077b2:	f280 8478 	bge.w	80080a6 <__ieee754_pow+0x9e6>
 80077b6:	4959      	ldr	r1, [pc, #356]	; (800791c <__ieee754_pow+0x25c>)
 80077b8:	4632      	mov	r2, r6
 80077ba:	463b      	mov	r3, r7
 80077bc:	2000      	movs	r0, #0
 80077be:	f7f8 fff1 	bl	80007a4 <__aeabi_ddiv>
 80077c2:	e79c      	b.n	80076fe <__ieee754_pow+0x3e>
 80077c4:	2300      	movs	r3, #0
 80077c6:	9304      	str	r3, [sp, #16]
 80077c8:	2a00      	cmp	r2, #0
 80077ca:	d13d      	bne.n	8007848 <__ieee754_pow+0x188>
 80077cc:	4b51      	ldr	r3, [pc, #324]	; (8007914 <__ieee754_pow+0x254>)
 80077ce:	4598      	cmp	r8, r3
 80077d0:	d1ea      	bne.n	80077a8 <__ieee754_pow+0xe8>
 80077d2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80077d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80077da:	ea53 030a 	orrs.w	r3, r3, sl
 80077de:	f000 845a 	beq.w	8008096 <__ieee754_pow+0x9d6>
 80077e2:	4b4f      	ldr	r3, [pc, #316]	; (8007920 <__ieee754_pow+0x260>)
 80077e4:	429c      	cmp	r4, r3
 80077e6:	dd08      	ble.n	80077fa <__ieee754_pow+0x13a>
 80077e8:	f1b9 0f00 	cmp.w	r9, #0
 80077ec:	f2c0 8457 	blt.w	800809e <__ieee754_pow+0x9de>
 80077f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077f4:	e783      	b.n	80076fe <__ieee754_pow+0x3e>
 80077f6:	2302      	movs	r3, #2
 80077f8:	e7e5      	b.n	80077c6 <__ieee754_pow+0x106>
 80077fa:	f1b9 0f00 	cmp.w	r9, #0
 80077fe:	f04f 0000 	mov.w	r0, #0
 8007802:	f04f 0100 	mov.w	r1, #0
 8007806:	f6bf af7a 	bge.w	80076fe <__ieee754_pow+0x3e>
 800780a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800780e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007812:	e774      	b.n	80076fe <__ieee754_pow+0x3e>
 8007814:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007818:	d106      	bne.n	8007828 <__ieee754_pow+0x168>
 800781a:	4632      	mov	r2, r6
 800781c:	463b      	mov	r3, r7
 800781e:	4630      	mov	r0, r6
 8007820:	4639      	mov	r1, r7
 8007822:	f7f8 fe95 	bl	8000550 <__aeabi_dmul>
 8007826:	e76a      	b.n	80076fe <__ieee754_pow+0x3e>
 8007828:	4b3e      	ldr	r3, [pc, #248]	; (8007924 <__ieee754_pow+0x264>)
 800782a:	4599      	cmp	r9, r3
 800782c:	d10c      	bne.n	8007848 <__ieee754_pow+0x188>
 800782e:	2d00      	cmp	r5, #0
 8007830:	db0a      	blt.n	8007848 <__ieee754_pow+0x188>
 8007832:	ec47 6b10 	vmov	d0, r6, r7
 8007836:	b009      	add	sp, #36	; 0x24
 8007838:	ecbd 8b06 	vpop	{d8-d10}
 800783c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007840:	f000 bc6c 	b.w	800811c <__ieee754_sqrt>
 8007844:	2300      	movs	r3, #0
 8007846:	9304      	str	r3, [sp, #16]
 8007848:	ec47 6b10 	vmov	d0, r6, r7
 800784c:	f000 fd48 	bl	80082e0 <fabs>
 8007850:	ec51 0b10 	vmov	r0, r1, d0
 8007854:	f1ba 0f00 	cmp.w	sl, #0
 8007858:	d129      	bne.n	80078ae <__ieee754_pow+0x1ee>
 800785a:	b124      	cbz	r4, 8007866 <__ieee754_pow+0x1a6>
 800785c:	4b2f      	ldr	r3, [pc, #188]	; (800791c <__ieee754_pow+0x25c>)
 800785e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007862:	429a      	cmp	r2, r3
 8007864:	d123      	bne.n	80078ae <__ieee754_pow+0x1ee>
 8007866:	f1b9 0f00 	cmp.w	r9, #0
 800786a:	da05      	bge.n	8007878 <__ieee754_pow+0x1b8>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	2000      	movs	r0, #0
 8007872:	492a      	ldr	r1, [pc, #168]	; (800791c <__ieee754_pow+0x25c>)
 8007874:	f7f8 ff96 	bl	80007a4 <__aeabi_ddiv>
 8007878:	2d00      	cmp	r5, #0
 800787a:	f6bf af40 	bge.w	80076fe <__ieee754_pow+0x3e>
 800787e:	9b04      	ldr	r3, [sp, #16]
 8007880:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007884:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007888:	4323      	orrs	r3, r4
 800788a:	d108      	bne.n	800789e <__ieee754_pow+0x1de>
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	4610      	mov	r0, r2
 8007892:	4619      	mov	r1, r3
 8007894:	f7f8 fca4 	bl	80001e0 <__aeabi_dsub>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	e78f      	b.n	80077be <__ieee754_pow+0xfe>
 800789e:	9b04      	ldr	r3, [sp, #16]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	f47f af2c 	bne.w	80076fe <__ieee754_pow+0x3e>
 80078a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078aa:	4619      	mov	r1, r3
 80078ac:	e727      	b.n	80076fe <__ieee754_pow+0x3e>
 80078ae:	0feb      	lsrs	r3, r5, #31
 80078b0:	3b01      	subs	r3, #1
 80078b2:	9306      	str	r3, [sp, #24]
 80078b4:	9a06      	ldr	r2, [sp, #24]
 80078b6:	9b04      	ldr	r3, [sp, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	d102      	bne.n	80078c2 <__ieee754_pow+0x202>
 80078bc:	4632      	mov	r2, r6
 80078be:	463b      	mov	r3, r7
 80078c0:	e7e6      	b.n	8007890 <__ieee754_pow+0x1d0>
 80078c2:	4b19      	ldr	r3, [pc, #100]	; (8007928 <__ieee754_pow+0x268>)
 80078c4:	4598      	cmp	r8, r3
 80078c6:	f340 80fb 	ble.w	8007ac0 <__ieee754_pow+0x400>
 80078ca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80078ce:	4598      	cmp	r8, r3
 80078d0:	4b13      	ldr	r3, [pc, #76]	; (8007920 <__ieee754_pow+0x260>)
 80078d2:	dd0c      	ble.n	80078ee <__ieee754_pow+0x22e>
 80078d4:	429c      	cmp	r4, r3
 80078d6:	dc0f      	bgt.n	80078f8 <__ieee754_pow+0x238>
 80078d8:	f1b9 0f00 	cmp.w	r9, #0
 80078dc:	da0f      	bge.n	80078fe <__ieee754_pow+0x23e>
 80078de:	2000      	movs	r0, #0
 80078e0:	b009      	add	sp, #36	; 0x24
 80078e2:	ecbd 8b06 	vpop	{d8-d10}
 80078e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ea:	f000 bcf0 	b.w	80082ce <__math_oflow>
 80078ee:	429c      	cmp	r4, r3
 80078f0:	dbf2      	blt.n	80078d8 <__ieee754_pow+0x218>
 80078f2:	4b0a      	ldr	r3, [pc, #40]	; (800791c <__ieee754_pow+0x25c>)
 80078f4:	429c      	cmp	r4, r3
 80078f6:	dd19      	ble.n	800792c <__ieee754_pow+0x26c>
 80078f8:	f1b9 0f00 	cmp.w	r9, #0
 80078fc:	dcef      	bgt.n	80078de <__ieee754_pow+0x21e>
 80078fe:	2000      	movs	r0, #0
 8007900:	b009      	add	sp, #36	; 0x24
 8007902:	ecbd 8b06 	vpop	{d8-d10}
 8007906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790a:	f000 bcd7 	b.w	80082bc <__math_uflow>
 800790e:	bf00      	nop
 8007910:	fff00000 	.word	0xfff00000
 8007914:	7ff00000 	.word	0x7ff00000
 8007918:	433fffff 	.word	0x433fffff
 800791c:	3ff00000 	.word	0x3ff00000
 8007920:	3fefffff 	.word	0x3fefffff
 8007924:	3fe00000 	.word	0x3fe00000
 8007928:	41e00000 	.word	0x41e00000
 800792c:	4b60      	ldr	r3, [pc, #384]	; (8007ab0 <__ieee754_pow+0x3f0>)
 800792e:	2200      	movs	r2, #0
 8007930:	f7f8 fc56 	bl	80001e0 <__aeabi_dsub>
 8007934:	a354      	add	r3, pc, #336	; (adr r3, 8007a88 <__ieee754_pow+0x3c8>)
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	4604      	mov	r4, r0
 800793c:	460d      	mov	r5, r1
 800793e:	f7f8 fe07 	bl	8000550 <__aeabi_dmul>
 8007942:	a353      	add	r3, pc, #332	; (adr r3, 8007a90 <__ieee754_pow+0x3d0>)
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	4606      	mov	r6, r0
 800794a:	460f      	mov	r7, r1
 800794c:	4620      	mov	r0, r4
 800794e:	4629      	mov	r1, r5
 8007950:	f7f8 fdfe 	bl	8000550 <__aeabi_dmul>
 8007954:	4b57      	ldr	r3, [pc, #348]	; (8007ab4 <__ieee754_pow+0x3f4>)
 8007956:	4682      	mov	sl, r0
 8007958:	468b      	mov	fp, r1
 800795a:	2200      	movs	r2, #0
 800795c:	4620      	mov	r0, r4
 800795e:	4629      	mov	r1, r5
 8007960:	f7f8 fdf6 	bl	8000550 <__aeabi_dmul>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	a14b      	add	r1, pc, #300	; (adr r1, 8007a98 <__ieee754_pow+0x3d8>)
 800796a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800796e:	f7f8 fc37 	bl	80001e0 <__aeabi_dsub>
 8007972:	4622      	mov	r2, r4
 8007974:	462b      	mov	r3, r5
 8007976:	f7f8 fdeb 	bl	8000550 <__aeabi_dmul>
 800797a:	4602      	mov	r2, r0
 800797c:	460b      	mov	r3, r1
 800797e:	2000      	movs	r0, #0
 8007980:	494d      	ldr	r1, [pc, #308]	; (8007ab8 <__ieee754_pow+0x3f8>)
 8007982:	f7f8 fc2d 	bl	80001e0 <__aeabi_dsub>
 8007986:	4622      	mov	r2, r4
 8007988:	4680      	mov	r8, r0
 800798a:	4689      	mov	r9, r1
 800798c:	462b      	mov	r3, r5
 800798e:	4620      	mov	r0, r4
 8007990:	4629      	mov	r1, r5
 8007992:	f7f8 fddd 	bl	8000550 <__aeabi_dmul>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4640      	mov	r0, r8
 800799c:	4649      	mov	r1, r9
 800799e:	f7f8 fdd7 	bl	8000550 <__aeabi_dmul>
 80079a2:	a33f      	add	r3, pc, #252	; (adr r3, 8007aa0 <__ieee754_pow+0x3e0>)
 80079a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a8:	f7f8 fdd2 	bl	8000550 <__aeabi_dmul>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4650      	mov	r0, sl
 80079b2:	4659      	mov	r1, fp
 80079b4:	f7f8 fc14 	bl	80001e0 <__aeabi_dsub>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4680      	mov	r8, r0
 80079be:	4689      	mov	r9, r1
 80079c0:	4630      	mov	r0, r6
 80079c2:	4639      	mov	r1, r7
 80079c4:	f7f8 fc0e 	bl	80001e4 <__adddf3>
 80079c8:	2000      	movs	r0, #0
 80079ca:	4632      	mov	r2, r6
 80079cc:	463b      	mov	r3, r7
 80079ce:	4604      	mov	r4, r0
 80079d0:	460d      	mov	r5, r1
 80079d2:	f7f8 fc05 	bl	80001e0 <__aeabi_dsub>
 80079d6:	4602      	mov	r2, r0
 80079d8:	460b      	mov	r3, r1
 80079da:	4640      	mov	r0, r8
 80079dc:	4649      	mov	r1, r9
 80079de:	f7f8 fbff 	bl	80001e0 <__aeabi_dsub>
 80079e2:	9b04      	ldr	r3, [sp, #16]
 80079e4:	9a06      	ldr	r2, [sp, #24]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	4313      	orrs	r3, r2
 80079ea:	4682      	mov	sl, r0
 80079ec:	468b      	mov	fp, r1
 80079ee:	f040 81e7 	bne.w	8007dc0 <__ieee754_pow+0x700>
 80079f2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007aa8 <__ieee754_pow+0x3e8>
 80079f6:	eeb0 8a47 	vmov.f32	s16, s14
 80079fa:	eef0 8a67 	vmov.f32	s17, s15
 80079fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007a02:	2600      	movs	r6, #0
 8007a04:	4632      	mov	r2, r6
 8007a06:	463b      	mov	r3, r7
 8007a08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a0c:	f7f8 fbe8 	bl	80001e0 <__aeabi_dsub>
 8007a10:	4622      	mov	r2, r4
 8007a12:	462b      	mov	r3, r5
 8007a14:	f7f8 fd9c 	bl	8000550 <__aeabi_dmul>
 8007a18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a1c:	4680      	mov	r8, r0
 8007a1e:	4689      	mov	r9, r1
 8007a20:	4650      	mov	r0, sl
 8007a22:	4659      	mov	r1, fp
 8007a24:	f7f8 fd94 	bl	8000550 <__aeabi_dmul>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	4649      	mov	r1, r9
 8007a30:	f7f8 fbd8 	bl	80001e4 <__adddf3>
 8007a34:	4632      	mov	r2, r6
 8007a36:	463b      	mov	r3, r7
 8007a38:	4680      	mov	r8, r0
 8007a3a:	4689      	mov	r9, r1
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	4629      	mov	r1, r5
 8007a40:	f7f8 fd86 	bl	8000550 <__aeabi_dmul>
 8007a44:	460b      	mov	r3, r1
 8007a46:	4604      	mov	r4, r0
 8007a48:	460d      	mov	r5, r1
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	4640      	mov	r0, r8
 8007a50:	f7f8 fbc8 	bl	80001e4 <__adddf3>
 8007a54:	4b19      	ldr	r3, [pc, #100]	; (8007abc <__ieee754_pow+0x3fc>)
 8007a56:	4299      	cmp	r1, r3
 8007a58:	ec45 4b19 	vmov	d9, r4, r5
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	460f      	mov	r7, r1
 8007a60:	468b      	mov	fp, r1
 8007a62:	f340 82f1 	ble.w	8008048 <__ieee754_pow+0x988>
 8007a66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007a6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007a6e:	4303      	orrs	r3, r0
 8007a70:	f000 81e4 	beq.w	8007e3c <__ieee754_pow+0x77c>
 8007a74:	ec51 0b18 	vmov	r0, r1, d8
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f7f8 ffda 	bl	8000a34 <__aeabi_dcmplt>
 8007a80:	3800      	subs	r0, #0
 8007a82:	bf18      	it	ne
 8007a84:	2001      	movne	r0, #1
 8007a86:	e72b      	b.n	80078e0 <__ieee754_pow+0x220>
 8007a88:	60000000 	.word	0x60000000
 8007a8c:	3ff71547 	.word	0x3ff71547
 8007a90:	f85ddf44 	.word	0xf85ddf44
 8007a94:	3e54ae0b 	.word	0x3e54ae0b
 8007a98:	55555555 	.word	0x55555555
 8007a9c:	3fd55555 	.word	0x3fd55555
 8007aa0:	652b82fe 	.word	0x652b82fe
 8007aa4:	3ff71547 	.word	0x3ff71547
 8007aa8:	00000000 	.word	0x00000000
 8007aac:	bff00000 	.word	0xbff00000
 8007ab0:	3ff00000 	.word	0x3ff00000
 8007ab4:	3fd00000 	.word	0x3fd00000
 8007ab8:	3fe00000 	.word	0x3fe00000
 8007abc:	408fffff 	.word	0x408fffff
 8007ac0:	4bd5      	ldr	r3, [pc, #852]	; (8007e18 <__ieee754_pow+0x758>)
 8007ac2:	402b      	ands	r3, r5
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	b92b      	cbnz	r3, 8007ad4 <__ieee754_pow+0x414>
 8007ac8:	4bd4      	ldr	r3, [pc, #848]	; (8007e1c <__ieee754_pow+0x75c>)
 8007aca:	f7f8 fd41 	bl	8000550 <__aeabi_dmul>
 8007ace:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	1523      	asrs	r3, r4, #20
 8007ad6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007ada:	4413      	add	r3, r2
 8007adc:	9305      	str	r3, [sp, #20]
 8007ade:	4bd0      	ldr	r3, [pc, #832]	; (8007e20 <__ieee754_pow+0x760>)
 8007ae0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007ae4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007ae8:	429c      	cmp	r4, r3
 8007aea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007aee:	dd08      	ble.n	8007b02 <__ieee754_pow+0x442>
 8007af0:	4bcc      	ldr	r3, [pc, #816]	; (8007e24 <__ieee754_pow+0x764>)
 8007af2:	429c      	cmp	r4, r3
 8007af4:	f340 8162 	ble.w	8007dbc <__ieee754_pow+0x6fc>
 8007af8:	9b05      	ldr	r3, [sp, #20]
 8007afa:	3301      	adds	r3, #1
 8007afc:	9305      	str	r3, [sp, #20]
 8007afe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007b02:	2400      	movs	r4, #0
 8007b04:	00e3      	lsls	r3, r4, #3
 8007b06:	9307      	str	r3, [sp, #28]
 8007b08:	4bc7      	ldr	r3, [pc, #796]	; (8007e28 <__ieee754_pow+0x768>)
 8007b0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b0e:	ed93 7b00 	vldr	d7, [r3]
 8007b12:	4629      	mov	r1, r5
 8007b14:	ec53 2b17 	vmov	r2, r3, d7
 8007b18:	eeb0 9a47 	vmov.f32	s18, s14
 8007b1c:	eef0 9a67 	vmov.f32	s19, s15
 8007b20:	4682      	mov	sl, r0
 8007b22:	f7f8 fb5d 	bl	80001e0 <__aeabi_dsub>
 8007b26:	4652      	mov	r2, sl
 8007b28:	4606      	mov	r6, r0
 8007b2a:	460f      	mov	r7, r1
 8007b2c:	462b      	mov	r3, r5
 8007b2e:	ec51 0b19 	vmov	r0, r1, d9
 8007b32:	f7f8 fb57 	bl	80001e4 <__adddf3>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	49bb      	ldr	r1, [pc, #748]	; (8007e2c <__ieee754_pow+0x76c>)
 8007b3e:	f7f8 fe31 	bl	80007a4 <__aeabi_ddiv>
 8007b42:	ec41 0b1a 	vmov	d10, r0, r1
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	4639      	mov	r1, r7
 8007b4e:	f7f8 fcff 	bl	8000550 <__aeabi_dmul>
 8007b52:	2300      	movs	r3, #0
 8007b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b58:	9302      	str	r3, [sp, #8]
 8007b5a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b5e:	46ab      	mov	fp, r5
 8007b60:	106d      	asrs	r5, r5, #1
 8007b62:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007b66:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007b6a:	ec41 0b18 	vmov	d8, r0, r1
 8007b6e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007b72:	2200      	movs	r2, #0
 8007b74:	4640      	mov	r0, r8
 8007b76:	4649      	mov	r1, r9
 8007b78:	4614      	mov	r4, r2
 8007b7a:	461d      	mov	r5, r3
 8007b7c:	f7f8 fce8 	bl	8000550 <__aeabi_dmul>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4630      	mov	r0, r6
 8007b86:	4639      	mov	r1, r7
 8007b88:	f7f8 fb2a 	bl	80001e0 <__aeabi_dsub>
 8007b8c:	ec53 2b19 	vmov	r2, r3, d9
 8007b90:	4606      	mov	r6, r0
 8007b92:	460f      	mov	r7, r1
 8007b94:	4620      	mov	r0, r4
 8007b96:	4629      	mov	r1, r5
 8007b98:	f7f8 fb22 	bl	80001e0 <__aeabi_dsub>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4650      	mov	r0, sl
 8007ba2:	4659      	mov	r1, fp
 8007ba4:	f7f8 fb1c 	bl	80001e0 <__aeabi_dsub>
 8007ba8:	4642      	mov	r2, r8
 8007baa:	464b      	mov	r3, r9
 8007bac:	f7f8 fcd0 	bl	8000550 <__aeabi_dmul>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	4639      	mov	r1, r7
 8007bb8:	f7f8 fb12 	bl	80001e0 <__aeabi_dsub>
 8007bbc:	ec53 2b1a 	vmov	r2, r3, d10
 8007bc0:	f7f8 fcc6 	bl	8000550 <__aeabi_dmul>
 8007bc4:	ec53 2b18 	vmov	r2, r3, d8
 8007bc8:	ec41 0b19 	vmov	d9, r0, r1
 8007bcc:	ec51 0b18 	vmov	r0, r1, d8
 8007bd0:	f7f8 fcbe 	bl	8000550 <__aeabi_dmul>
 8007bd4:	a37c      	add	r3, pc, #496	; (adr r3, 8007dc8 <__ieee754_pow+0x708>)
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	4604      	mov	r4, r0
 8007bdc:	460d      	mov	r5, r1
 8007bde:	f7f8 fcb7 	bl	8000550 <__aeabi_dmul>
 8007be2:	a37b      	add	r3, pc, #492	; (adr r3, 8007dd0 <__ieee754_pow+0x710>)
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f7f8 fafc 	bl	80001e4 <__adddf3>
 8007bec:	4622      	mov	r2, r4
 8007bee:	462b      	mov	r3, r5
 8007bf0:	f7f8 fcae 	bl	8000550 <__aeabi_dmul>
 8007bf4:	a378      	add	r3, pc, #480	; (adr r3, 8007dd8 <__ieee754_pow+0x718>)
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	f7f8 faf3 	bl	80001e4 <__adddf3>
 8007bfe:	4622      	mov	r2, r4
 8007c00:	462b      	mov	r3, r5
 8007c02:	f7f8 fca5 	bl	8000550 <__aeabi_dmul>
 8007c06:	a376      	add	r3, pc, #472	; (adr r3, 8007de0 <__ieee754_pow+0x720>)
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	f7f8 faea 	bl	80001e4 <__adddf3>
 8007c10:	4622      	mov	r2, r4
 8007c12:	462b      	mov	r3, r5
 8007c14:	f7f8 fc9c 	bl	8000550 <__aeabi_dmul>
 8007c18:	a373      	add	r3, pc, #460	; (adr r3, 8007de8 <__ieee754_pow+0x728>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f7f8 fae1 	bl	80001e4 <__adddf3>
 8007c22:	4622      	mov	r2, r4
 8007c24:	462b      	mov	r3, r5
 8007c26:	f7f8 fc93 	bl	8000550 <__aeabi_dmul>
 8007c2a:	a371      	add	r3, pc, #452	; (adr r3, 8007df0 <__ieee754_pow+0x730>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	f7f8 fad8 	bl	80001e4 <__adddf3>
 8007c34:	4622      	mov	r2, r4
 8007c36:	4606      	mov	r6, r0
 8007c38:	460f      	mov	r7, r1
 8007c3a:	462b      	mov	r3, r5
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	4629      	mov	r1, r5
 8007c40:	f7f8 fc86 	bl	8000550 <__aeabi_dmul>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4630      	mov	r0, r6
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	f7f8 fc80 	bl	8000550 <__aeabi_dmul>
 8007c50:	4642      	mov	r2, r8
 8007c52:	4604      	mov	r4, r0
 8007c54:	460d      	mov	r5, r1
 8007c56:	464b      	mov	r3, r9
 8007c58:	ec51 0b18 	vmov	r0, r1, d8
 8007c5c:	f7f8 fac2 	bl	80001e4 <__adddf3>
 8007c60:	ec53 2b19 	vmov	r2, r3, d9
 8007c64:	f7f8 fc74 	bl	8000550 <__aeabi_dmul>
 8007c68:	4622      	mov	r2, r4
 8007c6a:	462b      	mov	r3, r5
 8007c6c:	f7f8 faba 	bl	80001e4 <__adddf3>
 8007c70:	4642      	mov	r2, r8
 8007c72:	4682      	mov	sl, r0
 8007c74:	468b      	mov	fp, r1
 8007c76:	464b      	mov	r3, r9
 8007c78:	4640      	mov	r0, r8
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	f7f8 fc68 	bl	8000550 <__aeabi_dmul>
 8007c80:	4b6b      	ldr	r3, [pc, #428]	; (8007e30 <__ieee754_pow+0x770>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	4606      	mov	r6, r0
 8007c86:	460f      	mov	r7, r1
 8007c88:	f7f8 faac 	bl	80001e4 <__adddf3>
 8007c8c:	4652      	mov	r2, sl
 8007c8e:	465b      	mov	r3, fp
 8007c90:	f7f8 faa8 	bl	80001e4 <__adddf3>
 8007c94:	2000      	movs	r0, #0
 8007c96:	4604      	mov	r4, r0
 8007c98:	460d      	mov	r5, r1
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	4649      	mov	r1, r9
 8007ca2:	f7f8 fc55 	bl	8000550 <__aeabi_dmul>
 8007ca6:	4b62      	ldr	r3, [pc, #392]	; (8007e30 <__ieee754_pow+0x770>)
 8007ca8:	4680      	mov	r8, r0
 8007caa:	4689      	mov	r9, r1
 8007cac:	2200      	movs	r2, #0
 8007cae:	4620      	mov	r0, r4
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	f7f8 fa95 	bl	80001e0 <__aeabi_dsub>
 8007cb6:	4632      	mov	r2, r6
 8007cb8:	463b      	mov	r3, r7
 8007cba:	f7f8 fa91 	bl	80001e0 <__aeabi_dsub>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4650      	mov	r0, sl
 8007cc4:	4659      	mov	r1, fp
 8007cc6:	f7f8 fa8b 	bl	80001e0 <__aeabi_dsub>
 8007cca:	ec53 2b18 	vmov	r2, r3, d8
 8007cce:	f7f8 fc3f 	bl	8000550 <__aeabi_dmul>
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	4606      	mov	r6, r0
 8007cd6:	460f      	mov	r7, r1
 8007cd8:	462b      	mov	r3, r5
 8007cda:	ec51 0b19 	vmov	r0, r1, d9
 8007cde:	f7f8 fc37 	bl	8000550 <__aeabi_dmul>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	4639      	mov	r1, r7
 8007cea:	f7f8 fa7b 	bl	80001e4 <__adddf3>
 8007cee:	4606      	mov	r6, r0
 8007cf0:	460f      	mov	r7, r1
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	4640      	mov	r0, r8
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	f7f8 fa73 	bl	80001e4 <__adddf3>
 8007cfe:	a33e      	add	r3, pc, #248	; (adr r3, 8007df8 <__ieee754_pow+0x738>)
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	2000      	movs	r0, #0
 8007d06:	4604      	mov	r4, r0
 8007d08:	460d      	mov	r5, r1
 8007d0a:	f7f8 fc21 	bl	8000550 <__aeabi_dmul>
 8007d0e:	4642      	mov	r2, r8
 8007d10:	ec41 0b18 	vmov	d8, r0, r1
 8007d14:	464b      	mov	r3, r9
 8007d16:	4620      	mov	r0, r4
 8007d18:	4629      	mov	r1, r5
 8007d1a:	f7f8 fa61 	bl	80001e0 <__aeabi_dsub>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4630      	mov	r0, r6
 8007d24:	4639      	mov	r1, r7
 8007d26:	f7f8 fa5b 	bl	80001e0 <__aeabi_dsub>
 8007d2a:	a335      	add	r3, pc, #212	; (adr r3, 8007e00 <__ieee754_pow+0x740>)
 8007d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d30:	f7f8 fc0e 	bl	8000550 <__aeabi_dmul>
 8007d34:	a334      	add	r3, pc, #208	; (adr r3, 8007e08 <__ieee754_pow+0x748>)
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	460f      	mov	r7, r1
 8007d3e:	4620      	mov	r0, r4
 8007d40:	4629      	mov	r1, r5
 8007d42:	f7f8 fc05 	bl	8000550 <__aeabi_dmul>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	4639      	mov	r1, r7
 8007d4e:	f7f8 fa49 	bl	80001e4 <__adddf3>
 8007d52:	9a07      	ldr	r2, [sp, #28]
 8007d54:	4b37      	ldr	r3, [pc, #220]	; (8007e34 <__ieee754_pow+0x774>)
 8007d56:	4413      	add	r3, r2
 8007d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5c:	f7f8 fa42 	bl	80001e4 <__adddf3>
 8007d60:	4682      	mov	sl, r0
 8007d62:	9805      	ldr	r0, [sp, #20]
 8007d64:	468b      	mov	fp, r1
 8007d66:	f7f8 fb89 	bl	800047c <__aeabi_i2d>
 8007d6a:	9a07      	ldr	r2, [sp, #28]
 8007d6c:	4b32      	ldr	r3, [pc, #200]	; (8007e38 <__ieee754_pow+0x778>)
 8007d6e:	4413      	add	r3, r2
 8007d70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d74:	4606      	mov	r6, r0
 8007d76:	460f      	mov	r7, r1
 8007d78:	4652      	mov	r2, sl
 8007d7a:	465b      	mov	r3, fp
 8007d7c:	ec51 0b18 	vmov	r0, r1, d8
 8007d80:	f7f8 fa30 	bl	80001e4 <__adddf3>
 8007d84:	4642      	mov	r2, r8
 8007d86:	464b      	mov	r3, r9
 8007d88:	f7f8 fa2c 	bl	80001e4 <__adddf3>
 8007d8c:	4632      	mov	r2, r6
 8007d8e:	463b      	mov	r3, r7
 8007d90:	f7f8 fa28 	bl	80001e4 <__adddf3>
 8007d94:	2000      	movs	r0, #0
 8007d96:	4632      	mov	r2, r6
 8007d98:	463b      	mov	r3, r7
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	460d      	mov	r5, r1
 8007d9e:	f7f8 fa1f 	bl	80001e0 <__aeabi_dsub>
 8007da2:	4642      	mov	r2, r8
 8007da4:	464b      	mov	r3, r9
 8007da6:	f7f8 fa1b 	bl	80001e0 <__aeabi_dsub>
 8007daa:	ec53 2b18 	vmov	r2, r3, d8
 8007dae:	f7f8 fa17 	bl	80001e0 <__aeabi_dsub>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4650      	mov	r0, sl
 8007db8:	4659      	mov	r1, fp
 8007dba:	e610      	b.n	80079de <__ieee754_pow+0x31e>
 8007dbc:	2401      	movs	r4, #1
 8007dbe:	e6a1      	b.n	8007b04 <__ieee754_pow+0x444>
 8007dc0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007e10 <__ieee754_pow+0x750>
 8007dc4:	e617      	b.n	80079f6 <__ieee754_pow+0x336>
 8007dc6:	bf00      	nop
 8007dc8:	4a454eef 	.word	0x4a454eef
 8007dcc:	3fca7e28 	.word	0x3fca7e28
 8007dd0:	93c9db65 	.word	0x93c9db65
 8007dd4:	3fcd864a 	.word	0x3fcd864a
 8007dd8:	a91d4101 	.word	0xa91d4101
 8007ddc:	3fd17460 	.word	0x3fd17460
 8007de0:	518f264d 	.word	0x518f264d
 8007de4:	3fd55555 	.word	0x3fd55555
 8007de8:	db6fabff 	.word	0xdb6fabff
 8007dec:	3fdb6db6 	.word	0x3fdb6db6
 8007df0:	33333303 	.word	0x33333303
 8007df4:	3fe33333 	.word	0x3fe33333
 8007df8:	e0000000 	.word	0xe0000000
 8007dfc:	3feec709 	.word	0x3feec709
 8007e00:	dc3a03fd 	.word	0xdc3a03fd
 8007e04:	3feec709 	.word	0x3feec709
 8007e08:	145b01f5 	.word	0x145b01f5
 8007e0c:	be3e2fe0 	.word	0xbe3e2fe0
 8007e10:	00000000 	.word	0x00000000
 8007e14:	3ff00000 	.word	0x3ff00000
 8007e18:	7ff00000 	.word	0x7ff00000
 8007e1c:	43400000 	.word	0x43400000
 8007e20:	0003988e 	.word	0x0003988e
 8007e24:	000bb679 	.word	0x000bb679
 8007e28:	08008b18 	.word	0x08008b18
 8007e2c:	3ff00000 	.word	0x3ff00000
 8007e30:	40080000 	.word	0x40080000
 8007e34:	08008b38 	.word	0x08008b38
 8007e38:	08008b28 	.word	0x08008b28
 8007e3c:	a3b5      	add	r3, pc, #724	; (adr r3, 8008114 <__ieee754_pow+0xa54>)
 8007e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e42:	4640      	mov	r0, r8
 8007e44:	4649      	mov	r1, r9
 8007e46:	f7f8 f9cd 	bl	80001e4 <__adddf3>
 8007e4a:	4622      	mov	r2, r4
 8007e4c:	ec41 0b1a 	vmov	d10, r0, r1
 8007e50:	462b      	mov	r3, r5
 8007e52:	4630      	mov	r0, r6
 8007e54:	4639      	mov	r1, r7
 8007e56:	f7f8 f9c3 	bl	80001e0 <__aeabi_dsub>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	ec51 0b1a 	vmov	r0, r1, d10
 8007e62:	f7f8 fe05 	bl	8000a70 <__aeabi_dcmpgt>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	f47f ae04 	bne.w	8007a74 <__ieee754_pow+0x3b4>
 8007e6c:	4aa4      	ldr	r2, [pc, #656]	; (8008100 <__ieee754_pow+0xa40>)
 8007e6e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e72:	4293      	cmp	r3, r2
 8007e74:	f340 8108 	ble.w	8008088 <__ieee754_pow+0x9c8>
 8007e78:	151b      	asrs	r3, r3, #20
 8007e7a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007e7e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007e82:	fa4a f303 	asr.w	r3, sl, r3
 8007e86:	445b      	add	r3, fp
 8007e88:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007e8c:	4e9d      	ldr	r6, [pc, #628]	; (8008104 <__ieee754_pow+0xa44>)
 8007e8e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007e92:	4116      	asrs	r6, r2
 8007e94:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007e98:	2000      	movs	r0, #0
 8007e9a:	ea23 0106 	bic.w	r1, r3, r6
 8007e9e:	f1c2 0214 	rsb	r2, r2, #20
 8007ea2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007ea6:	fa4a fa02 	asr.w	sl, sl, r2
 8007eaa:	f1bb 0f00 	cmp.w	fp, #0
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	bfb8      	it	lt
 8007eb8:	f1ca 0a00 	rsblt	sl, sl, #0
 8007ebc:	f7f8 f990 	bl	80001e0 <__aeabi_dsub>
 8007ec0:	ec41 0b19 	vmov	d9, r0, r1
 8007ec4:	4642      	mov	r2, r8
 8007ec6:	464b      	mov	r3, r9
 8007ec8:	ec51 0b19 	vmov	r0, r1, d9
 8007ecc:	f7f8 f98a 	bl	80001e4 <__adddf3>
 8007ed0:	a37b      	add	r3, pc, #492	; (adr r3, 80080c0 <__ieee754_pow+0xa00>)
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	4604      	mov	r4, r0
 8007eda:	460d      	mov	r5, r1
 8007edc:	f7f8 fb38 	bl	8000550 <__aeabi_dmul>
 8007ee0:	ec53 2b19 	vmov	r2, r3, d9
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	460f      	mov	r7, r1
 8007ee8:	4620      	mov	r0, r4
 8007eea:	4629      	mov	r1, r5
 8007eec:	f7f8 f978 	bl	80001e0 <__aeabi_dsub>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4640      	mov	r0, r8
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	f7f8 f972 	bl	80001e0 <__aeabi_dsub>
 8007efc:	a372      	add	r3, pc, #456	; (adr r3, 80080c8 <__ieee754_pow+0xa08>)
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f7f8 fb25 	bl	8000550 <__aeabi_dmul>
 8007f06:	a372      	add	r3, pc, #456	; (adr r3, 80080d0 <__ieee754_pow+0xa10>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	4680      	mov	r8, r0
 8007f0e:	4689      	mov	r9, r1
 8007f10:	4620      	mov	r0, r4
 8007f12:	4629      	mov	r1, r5
 8007f14:	f7f8 fb1c 	bl	8000550 <__aeabi_dmul>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	4649      	mov	r1, r9
 8007f20:	f7f8 f960 	bl	80001e4 <__adddf3>
 8007f24:	4604      	mov	r4, r0
 8007f26:	460d      	mov	r5, r1
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	4639      	mov	r1, r7
 8007f30:	f7f8 f958 	bl	80001e4 <__adddf3>
 8007f34:	4632      	mov	r2, r6
 8007f36:	463b      	mov	r3, r7
 8007f38:	4680      	mov	r8, r0
 8007f3a:	4689      	mov	r9, r1
 8007f3c:	f7f8 f950 	bl	80001e0 <__aeabi_dsub>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4620      	mov	r0, r4
 8007f46:	4629      	mov	r1, r5
 8007f48:	f7f8 f94a 	bl	80001e0 <__aeabi_dsub>
 8007f4c:	4642      	mov	r2, r8
 8007f4e:	4606      	mov	r6, r0
 8007f50:	460f      	mov	r7, r1
 8007f52:	464b      	mov	r3, r9
 8007f54:	4640      	mov	r0, r8
 8007f56:	4649      	mov	r1, r9
 8007f58:	f7f8 fafa 	bl	8000550 <__aeabi_dmul>
 8007f5c:	a35e      	add	r3, pc, #376	; (adr r3, 80080d8 <__ieee754_pow+0xa18>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	4604      	mov	r4, r0
 8007f64:	460d      	mov	r5, r1
 8007f66:	f7f8 faf3 	bl	8000550 <__aeabi_dmul>
 8007f6a:	a35d      	add	r3, pc, #372	; (adr r3, 80080e0 <__ieee754_pow+0xa20>)
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f7f8 f936 	bl	80001e0 <__aeabi_dsub>
 8007f74:	4622      	mov	r2, r4
 8007f76:	462b      	mov	r3, r5
 8007f78:	f7f8 faea 	bl	8000550 <__aeabi_dmul>
 8007f7c:	a35a      	add	r3, pc, #360	; (adr r3, 80080e8 <__ieee754_pow+0xa28>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	f7f8 f92f 	bl	80001e4 <__adddf3>
 8007f86:	4622      	mov	r2, r4
 8007f88:	462b      	mov	r3, r5
 8007f8a:	f7f8 fae1 	bl	8000550 <__aeabi_dmul>
 8007f8e:	a358      	add	r3, pc, #352	; (adr r3, 80080f0 <__ieee754_pow+0xa30>)
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f7f8 f924 	bl	80001e0 <__aeabi_dsub>
 8007f98:	4622      	mov	r2, r4
 8007f9a:	462b      	mov	r3, r5
 8007f9c:	f7f8 fad8 	bl	8000550 <__aeabi_dmul>
 8007fa0:	a355      	add	r3, pc, #340	; (adr r3, 80080f8 <__ieee754_pow+0xa38>)
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	f7f8 f91d 	bl	80001e4 <__adddf3>
 8007faa:	4622      	mov	r2, r4
 8007fac:	462b      	mov	r3, r5
 8007fae:	f7f8 facf 	bl	8000550 <__aeabi_dmul>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	4640      	mov	r0, r8
 8007fb8:	4649      	mov	r1, r9
 8007fba:	f7f8 f911 	bl	80001e0 <__aeabi_dsub>
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	460d      	mov	r5, r1
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4640      	mov	r0, r8
 8007fc8:	4649      	mov	r1, r9
 8007fca:	f7f8 fac1 	bl	8000550 <__aeabi_dmul>
 8007fce:	2200      	movs	r2, #0
 8007fd0:	ec41 0b19 	vmov	d9, r0, r1
 8007fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fd8:	4620      	mov	r0, r4
 8007fda:	4629      	mov	r1, r5
 8007fdc:	f7f8 f900 	bl	80001e0 <__aeabi_dsub>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	ec51 0b19 	vmov	r0, r1, d9
 8007fe8:	f7f8 fbdc 	bl	80007a4 <__aeabi_ddiv>
 8007fec:	4632      	mov	r2, r6
 8007fee:	4604      	mov	r4, r0
 8007ff0:	460d      	mov	r5, r1
 8007ff2:	463b      	mov	r3, r7
 8007ff4:	4640      	mov	r0, r8
 8007ff6:	4649      	mov	r1, r9
 8007ff8:	f7f8 faaa 	bl	8000550 <__aeabi_dmul>
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	463b      	mov	r3, r7
 8008000:	f7f8 f8f0 	bl	80001e4 <__adddf3>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	4620      	mov	r0, r4
 800800a:	4629      	mov	r1, r5
 800800c:	f7f8 f8e8 	bl	80001e0 <__aeabi_dsub>
 8008010:	4642      	mov	r2, r8
 8008012:	464b      	mov	r3, r9
 8008014:	f7f8 f8e4 	bl	80001e0 <__aeabi_dsub>
 8008018:	460b      	mov	r3, r1
 800801a:	4602      	mov	r2, r0
 800801c:	493a      	ldr	r1, [pc, #232]	; (8008108 <__ieee754_pow+0xa48>)
 800801e:	2000      	movs	r0, #0
 8008020:	f7f8 f8de 	bl	80001e0 <__aeabi_dsub>
 8008024:	ec41 0b10 	vmov	d0, r0, r1
 8008028:	ee10 3a90 	vmov	r3, s1
 800802c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008034:	da2b      	bge.n	800808e <__ieee754_pow+0x9ce>
 8008036:	4650      	mov	r0, sl
 8008038:	f000 f966 	bl	8008308 <scalbn>
 800803c:	ec51 0b10 	vmov	r0, r1, d0
 8008040:	ec53 2b18 	vmov	r2, r3, d8
 8008044:	f7ff bbed 	b.w	8007822 <__ieee754_pow+0x162>
 8008048:	4b30      	ldr	r3, [pc, #192]	; (800810c <__ieee754_pow+0xa4c>)
 800804a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800804e:	429e      	cmp	r6, r3
 8008050:	f77f af0c 	ble.w	8007e6c <__ieee754_pow+0x7ac>
 8008054:	4b2e      	ldr	r3, [pc, #184]	; (8008110 <__ieee754_pow+0xa50>)
 8008056:	440b      	add	r3, r1
 8008058:	4303      	orrs	r3, r0
 800805a:	d009      	beq.n	8008070 <__ieee754_pow+0x9b0>
 800805c:	ec51 0b18 	vmov	r0, r1, d8
 8008060:	2200      	movs	r2, #0
 8008062:	2300      	movs	r3, #0
 8008064:	f7f8 fce6 	bl	8000a34 <__aeabi_dcmplt>
 8008068:	3800      	subs	r0, #0
 800806a:	bf18      	it	ne
 800806c:	2001      	movne	r0, #1
 800806e:	e447      	b.n	8007900 <__ieee754_pow+0x240>
 8008070:	4622      	mov	r2, r4
 8008072:	462b      	mov	r3, r5
 8008074:	f7f8 f8b4 	bl	80001e0 <__aeabi_dsub>
 8008078:	4642      	mov	r2, r8
 800807a:	464b      	mov	r3, r9
 800807c:	f7f8 fcee 	bl	8000a5c <__aeabi_dcmpge>
 8008080:	2800      	cmp	r0, #0
 8008082:	f43f aef3 	beq.w	8007e6c <__ieee754_pow+0x7ac>
 8008086:	e7e9      	b.n	800805c <__ieee754_pow+0x99c>
 8008088:	f04f 0a00 	mov.w	sl, #0
 800808c:	e71a      	b.n	8007ec4 <__ieee754_pow+0x804>
 800808e:	ec51 0b10 	vmov	r0, r1, d0
 8008092:	4619      	mov	r1, r3
 8008094:	e7d4      	b.n	8008040 <__ieee754_pow+0x980>
 8008096:	491c      	ldr	r1, [pc, #112]	; (8008108 <__ieee754_pow+0xa48>)
 8008098:	2000      	movs	r0, #0
 800809a:	f7ff bb30 	b.w	80076fe <__ieee754_pow+0x3e>
 800809e:	2000      	movs	r0, #0
 80080a0:	2100      	movs	r1, #0
 80080a2:	f7ff bb2c 	b.w	80076fe <__ieee754_pow+0x3e>
 80080a6:	4630      	mov	r0, r6
 80080a8:	4639      	mov	r1, r7
 80080aa:	f7ff bb28 	b.w	80076fe <__ieee754_pow+0x3e>
 80080ae:	9204      	str	r2, [sp, #16]
 80080b0:	f7ff bb7a 	b.w	80077a8 <__ieee754_pow+0xe8>
 80080b4:	2300      	movs	r3, #0
 80080b6:	f7ff bb64 	b.w	8007782 <__ieee754_pow+0xc2>
 80080ba:	bf00      	nop
 80080bc:	f3af 8000 	nop.w
 80080c0:	00000000 	.word	0x00000000
 80080c4:	3fe62e43 	.word	0x3fe62e43
 80080c8:	fefa39ef 	.word	0xfefa39ef
 80080cc:	3fe62e42 	.word	0x3fe62e42
 80080d0:	0ca86c39 	.word	0x0ca86c39
 80080d4:	be205c61 	.word	0xbe205c61
 80080d8:	72bea4d0 	.word	0x72bea4d0
 80080dc:	3e663769 	.word	0x3e663769
 80080e0:	c5d26bf1 	.word	0xc5d26bf1
 80080e4:	3ebbbd41 	.word	0x3ebbbd41
 80080e8:	af25de2c 	.word	0xaf25de2c
 80080ec:	3f11566a 	.word	0x3f11566a
 80080f0:	16bebd93 	.word	0x16bebd93
 80080f4:	3f66c16c 	.word	0x3f66c16c
 80080f8:	5555553e 	.word	0x5555553e
 80080fc:	3fc55555 	.word	0x3fc55555
 8008100:	3fe00000 	.word	0x3fe00000
 8008104:	000fffff 	.word	0x000fffff
 8008108:	3ff00000 	.word	0x3ff00000
 800810c:	4090cbff 	.word	0x4090cbff
 8008110:	3f6f3400 	.word	0x3f6f3400
 8008114:	652b82fe 	.word	0x652b82fe
 8008118:	3c971547 	.word	0x3c971547

0800811c <__ieee754_sqrt>:
 800811c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008120:	ec55 4b10 	vmov	r4, r5, d0
 8008124:	4e55      	ldr	r6, [pc, #340]	; (800827c <__ieee754_sqrt+0x160>)
 8008126:	43ae      	bics	r6, r5
 8008128:	ee10 0a10 	vmov	r0, s0
 800812c:	ee10 3a10 	vmov	r3, s0
 8008130:	462a      	mov	r2, r5
 8008132:	4629      	mov	r1, r5
 8008134:	d110      	bne.n	8008158 <__ieee754_sqrt+0x3c>
 8008136:	ee10 2a10 	vmov	r2, s0
 800813a:	462b      	mov	r3, r5
 800813c:	f7f8 fa08 	bl	8000550 <__aeabi_dmul>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4620      	mov	r0, r4
 8008146:	4629      	mov	r1, r5
 8008148:	f7f8 f84c 	bl	80001e4 <__adddf3>
 800814c:	4604      	mov	r4, r0
 800814e:	460d      	mov	r5, r1
 8008150:	ec45 4b10 	vmov	d0, r4, r5
 8008154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008158:	2d00      	cmp	r5, #0
 800815a:	dc10      	bgt.n	800817e <__ieee754_sqrt+0x62>
 800815c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008160:	4330      	orrs	r0, r6
 8008162:	d0f5      	beq.n	8008150 <__ieee754_sqrt+0x34>
 8008164:	b15d      	cbz	r5, 800817e <__ieee754_sqrt+0x62>
 8008166:	ee10 2a10 	vmov	r2, s0
 800816a:	462b      	mov	r3, r5
 800816c:	ee10 0a10 	vmov	r0, s0
 8008170:	f7f8 f836 	bl	80001e0 <__aeabi_dsub>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	f7f8 fb14 	bl	80007a4 <__aeabi_ddiv>
 800817c:	e7e6      	b.n	800814c <__ieee754_sqrt+0x30>
 800817e:	1512      	asrs	r2, r2, #20
 8008180:	d074      	beq.n	800826c <__ieee754_sqrt+0x150>
 8008182:	07d4      	lsls	r4, r2, #31
 8008184:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008188:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800818c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008190:	bf5e      	ittt	pl
 8008192:	0fda      	lsrpl	r2, r3, #31
 8008194:	005b      	lslpl	r3, r3, #1
 8008196:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800819a:	2400      	movs	r4, #0
 800819c:	0fda      	lsrs	r2, r3, #31
 800819e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80081a2:	107f      	asrs	r7, r7, #1
 80081a4:	005b      	lsls	r3, r3, #1
 80081a6:	2516      	movs	r5, #22
 80081a8:	4620      	mov	r0, r4
 80081aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80081ae:	1886      	adds	r6, r0, r2
 80081b0:	428e      	cmp	r6, r1
 80081b2:	bfde      	ittt	le
 80081b4:	1b89      	suble	r1, r1, r6
 80081b6:	18b0      	addle	r0, r6, r2
 80081b8:	18a4      	addle	r4, r4, r2
 80081ba:	0049      	lsls	r1, r1, #1
 80081bc:	3d01      	subs	r5, #1
 80081be:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80081c2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80081c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80081ca:	d1f0      	bne.n	80081ae <__ieee754_sqrt+0x92>
 80081cc:	462a      	mov	r2, r5
 80081ce:	f04f 0e20 	mov.w	lr, #32
 80081d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80081d6:	4281      	cmp	r1, r0
 80081d8:	eb06 0c05 	add.w	ip, r6, r5
 80081dc:	dc02      	bgt.n	80081e4 <__ieee754_sqrt+0xc8>
 80081de:	d113      	bne.n	8008208 <__ieee754_sqrt+0xec>
 80081e0:	459c      	cmp	ip, r3
 80081e2:	d811      	bhi.n	8008208 <__ieee754_sqrt+0xec>
 80081e4:	f1bc 0f00 	cmp.w	ip, #0
 80081e8:	eb0c 0506 	add.w	r5, ip, r6
 80081ec:	da43      	bge.n	8008276 <__ieee754_sqrt+0x15a>
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	db41      	blt.n	8008276 <__ieee754_sqrt+0x15a>
 80081f2:	f100 0801 	add.w	r8, r0, #1
 80081f6:	1a09      	subs	r1, r1, r0
 80081f8:	459c      	cmp	ip, r3
 80081fa:	bf88      	it	hi
 80081fc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008200:	eba3 030c 	sub.w	r3, r3, ip
 8008204:	4432      	add	r2, r6
 8008206:	4640      	mov	r0, r8
 8008208:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800820c:	f1be 0e01 	subs.w	lr, lr, #1
 8008210:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008214:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008218:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800821c:	d1db      	bne.n	80081d6 <__ieee754_sqrt+0xba>
 800821e:	430b      	orrs	r3, r1
 8008220:	d006      	beq.n	8008230 <__ieee754_sqrt+0x114>
 8008222:	1c50      	adds	r0, r2, #1
 8008224:	bf13      	iteet	ne
 8008226:	3201      	addne	r2, #1
 8008228:	3401      	addeq	r4, #1
 800822a:	4672      	moveq	r2, lr
 800822c:	f022 0201 	bicne.w	r2, r2, #1
 8008230:	1063      	asrs	r3, r4, #1
 8008232:	0852      	lsrs	r2, r2, #1
 8008234:	07e1      	lsls	r1, r4, #31
 8008236:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800823a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800823e:	bf48      	it	mi
 8008240:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008244:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008248:	4614      	mov	r4, r2
 800824a:	e781      	b.n	8008150 <__ieee754_sqrt+0x34>
 800824c:	0ad9      	lsrs	r1, r3, #11
 800824e:	3815      	subs	r0, #21
 8008250:	055b      	lsls	r3, r3, #21
 8008252:	2900      	cmp	r1, #0
 8008254:	d0fa      	beq.n	800824c <__ieee754_sqrt+0x130>
 8008256:	02cd      	lsls	r5, r1, #11
 8008258:	d50a      	bpl.n	8008270 <__ieee754_sqrt+0x154>
 800825a:	f1c2 0420 	rsb	r4, r2, #32
 800825e:	fa23 f404 	lsr.w	r4, r3, r4
 8008262:	1e55      	subs	r5, r2, #1
 8008264:	4093      	lsls	r3, r2
 8008266:	4321      	orrs	r1, r4
 8008268:	1b42      	subs	r2, r0, r5
 800826a:	e78a      	b.n	8008182 <__ieee754_sqrt+0x66>
 800826c:	4610      	mov	r0, r2
 800826e:	e7f0      	b.n	8008252 <__ieee754_sqrt+0x136>
 8008270:	0049      	lsls	r1, r1, #1
 8008272:	3201      	adds	r2, #1
 8008274:	e7ef      	b.n	8008256 <__ieee754_sqrt+0x13a>
 8008276:	4680      	mov	r8, r0
 8008278:	e7bd      	b.n	80081f6 <__ieee754_sqrt+0xda>
 800827a:	bf00      	nop
 800827c:	7ff00000 	.word	0x7ff00000

08008280 <with_errno>:
 8008280:	b570      	push	{r4, r5, r6, lr}
 8008282:	4604      	mov	r4, r0
 8008284:	460d      	mov	r5, r1
 8008286:	4616      	mov	r6, r2
 8008288:	f7ff f8f2 	bl	8007470 <__errno>
 800828c:	4629      	mov	r1, r5
 800828e:	6006      	str	r6, [r0, #0]
 8008290:	4620      	mov	r0, r4
 8008292:	bd70      	pop	{r4, r5, r6, pc}

08008294 <xflow>:
 8008294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008296:	4614      	mov	r4, r2
 8008298:	461d      	mov	r5, r3
 800829a:	b108      	cbz	r0, 80082a0 <xflow+0xc>
 800829c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80082a0:	e9cd 2300 	strd	r2, r3, [sp]
 80082a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082a8:	4620      	mov	r0, r4
 80082aa:	4629      	mov	r1, r5
 80082ac:	f7f8 f950 	bl	8000550 <__aeabi_dmul>
 80082b0:	2222      	movs	r2, #34	; 0x22
 80082b2:	b003      	add	sp, #12
 80082b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082b8:	f7ff bfe2 	b.w	8008280 <with_errno>

080082bc <__math_uflow>:
 80082bc:	b508      	push	{r3, lr}
 80082be:	2200      	movs	r2, #0
 80082c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80082c4:	f7ff ffe6 	bl	8008294 <xflow>
 80082c8:	ec41 0b10 	vmov	d0, r0, r1
 80082cc:	bd08      	pop	{r3, pc}

080082ce <__math_oflow>:
 80082ce:	b508      	push	{r3, lr}
 80082d0:	2200      	movs	r2, #0
 80082d2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80082d6:	f7ff ffdd 	bl	8008294 <xflow>
 80082da:	ec41 0b10 	vmov	d0, r0, r1
 80082de:	bd08      	pop	{r3, pc}

080082e0 <fabs>:
 80082e0:	ec51 0b10 	vmov	r0, r1, d0
 80082e4:	ee10 2a10 	vmov	r2, s0
 80082e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80082ec:	ec43 2b10 	vmov	d0, r2, r3
 80082f0:	4770      	bx	lr

080082f2 <finite>:
 80082f2:	b082      	sub	sp, #8
 80082f4:	ed8d 0b00 	vstr	d0, [sp]
 80082f8:	9801      	ldr	r0, [sp, #4]
 80082fa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80082fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008302:	0fc0      	lsrs	r0, r0, #31
 8008304:	b002      	add	sp, #8
 8008306:	4770      	bx	lr

08008308 <scalbn>:
 8008308:	b570      	push	{r4, r5, r6, lr}
 800830a:	ec55 4b10 	vmov	r4, r5, d0
 800830e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008312:	4606      	mov	r6, r0
 8008314:	462b      	mov	r3, r5
 8008316:	b99a      	cbnz	r2, 8008340 <scalbn+0x38>
 8008318:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800831c:	4323      	orrs	r3, r4
 800831e:	d036      	beq.n	800838e <scalbn+0x86>
 8008320:	4b39      	ldr	r3, [pc, #228]	; (8008408 <scalbn+0x100>)
 8008322:	4629      	mov	r1, r5
 8008324:	ee10 0a10 	vmov	r0, s0
 8008328:	2200      	movs	r2, #0
 800832a:	f7f8 f911 	bl	8000550 <__aeabi_dmul>
 800832e:	4b37      	ldr	r3, [pc, #220]	; (800840c <scalbn+0x104>)
 8008330:	429e      	cmp	r6, r3
 8008332:	4604      	mov	r4, r0
 8008334:	460d      	mov	r5, r1
 8008336:	da10      	bge.n	800835a <scalbn+0x52>
 8008338:	a32b      	add	r3, pc, #172	; (adr r3, 80083e8 <scalbn+0xe0>)
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	e03a      	b.n	80083b6 <scalbn+0xae>
 8008340:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008344:	428a      	cmp	r2, r1
 8008346:	d10c      	bne.n	8008362 <scalbn+0x5a>
 8008348:	ee10 2a10 	vmov	r2, s0
 800834c:	4620      	mov	r0, r4
 800834e:	4629      	mov	r1, r5
 8008350:	f7f7 ff48 	bl	80001e4 <__adddf3>
 8008354:	4604      	mov	r4, r0
 8008356:	460d      	mov	r5, r1
 8008358:	e019      	b.n	800838e <scalbn+0x86>
 800835a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800835e:	460b      	mov	r3, r1
 8008360:	3a36      	subs	r2, #54	; 0x36
 8008362:	4432      	add	r2, r6
 8008364:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008368:	428a      	cmp	r2, r1
 800836a:	dd08      	ble.n	800837e <scalbn+0x76>
 800836c:	2d00      	cmp	r5, #0
 800836e:	a120      	add	r1, pc, #128	; (adr r1, 80083f0 <scalbn+0xe8>)
 8008370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008374:	da1c      	bge.n	80083b0 <scalbn+0xa8>
 8008376:	a120      	add	r1, pc, #128	; (adr r1, 80083f8 <scalbn+0xf0>)
 8008378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800837c:	e018      	b.n	80083b0 <scalbn+0xa8>
 800837e:	2a00      	cmp	r2, #0
 8008380:	dd08      	ble.n	8008394 <scalbn+0x8c>
 8008382:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008386:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800838a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800838e:	ec45 4b10 	vmov	d0, r4, r5
 8008392:	bd70      	pop	{r4, r5, r6, pc}
 8008394:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008398:	da19      	bge.n	80083ce <scalbn+0xc6>
 800839a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800839e:	429e      	cmp	r6, r3
 80083a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80083a4:	dd0a      	ble.n	80083bc <scalbn+0xb4>
 80083a6:	a112      	add	r1, pc, #72	; (adr r1, 80083f0 <scalbn+0xe8>)
 80083a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e2      	bne.n	8008376 <scalbn+0x6e>
 80083b0:	a30f      	add	r3, pc, #60	; (adr r3, 80083f0 <scalbn+0xe8>)
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	f7f8 f8cb 	bl	8000550 <__aeabi_dmul>
 80083ba:	e7cb      	b.n	8008354 <scalbn+0x4c>
 80083bc:	a10a      	add	r1, pc, #40	; (adr r1, 80083e8 <scalbn+0xe0>)
 80083be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d0b8      	beq.n	8008338 <scalbn+0x30>
 80083c6:	a10e      	add	r1, pc, #56	; (adr r1, 8008400 <scalbn+0xf8>)
 80083c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083cc:	e7b4      	b.n	8008338 <scalbn+0x30>
 80083ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80083d2:	3236      	adds	r2, #54	; 0x36
 80083d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80083d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80083dc:	4620      	mov	r0, r4
 80083de:	4b0c      	ldr	r3, [pc, #48]	; (8008410 <scalbn+0x108>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	e7e8      	b.n	80083b6 <scalbn+0xae>
 80083e4:	f3af 8000 	nop.w
 80083e8:	c2f8f359 	.word	0xc2f8f359
 80083ec:	01a56e1f 	.word	0x01a56e1f
 80083f0:	8800759c 	.word	0x8800759c
 80083f4:	7e37e43c 	.word	0x7e37e43c
 80083f8:	8800759c 	.word	0x8800759c
 80083fc:	fe37e43c 	.word	0xfe37e43c
 8008400:	c2f8f359 	.word	0xc2f8f359
 8008404:	81a56e1f 	.word	0x81a56e1f
 8008408:	43500000 	.word	0x43500000
 800840c:	ffff3cb0 	.word	0xffff3cb0
 8008410:	3c900000 	.word	0x3c900000

08008414 <_init>:
 8008414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008416:	bf00      	nop
 8008418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841a:	bc08      	pop	{r3}
 800841c:	469e      	mov	lr, r3
 800841e:	4770      	bx	lr

08008420 <_fini>:
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	bf00      	nop
 8008424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008426:	bc08      	pop	{r3}
 8008428:	469e      	mov	lr, r3
 800842a:	4770      	bx	lr
